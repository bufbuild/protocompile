// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

//lint:file-ignore SA4006 generated parser has unused values

import (
	"math"
	"strings"

	"github.com/bufbuild/protocompile/ast"
)

type protoSymType struct {
	yys          int
	file         *ast.FileNode
	syn          *ast.SyntaxNode
	ed           *ast.EditionNode
	fileElements []ast.FileElement
	pkg          nodeWithRunes[*ast.PackageNode]
	imprt        nodeWithRunes[*ast.ImportNode]
	msg          nodeWithRunes[*ast.MessageNode]
	msgElements  []ast.MessageElement
	fld          *ast.FieldNode
	msgFld       nodeWithRunes[*ast.FieldNode]
	mapFld       nodeWithRunes[*ast.MapFieldNode]
	mapType      *ast.MapTypeNode
	grp          *ast.GroupNode
	msgGrp       nodeWithRunes[*ast.GroupNode]
	oo           nodeWithRunes[*ast.OneofNode]
	ooElement    ast.OneofElement
	ooElements   []ast.OneofElement
	ext          nodeWithRunes[*ast.ExtensionRangeNode]
	resvd        nodeWithRunes[*ast.ReservedNode]
	en           nodeWithRunes[*ast.EnumNode]
	enElements   []ast.EnumElement
	env          nodeWithRunes[*ast.EnumValueNode]
	extend       nodeWithRunes[*ast.ExtendNode]
	extElement   ast.ExtendElement
	extElements  []ast.ExtendElement
	svc          nodeWithRunes[*ast.ServiceNode]
	svcElements  []ast.ServiceElement
	mtd          nodeWithRunes[*ast.RPCNode]
	mtdMsgType   *ast.RPCTypeNode
	mtdElements  []ast.RPCElement
	optRaw       *ast.OptionNode
	opt          nodeWithRunes[*ast.OptionNode]
	opts         *compactOptionSlices
	refRaw       *ast.FieldReferenceNode
	ref          nodeWithRunes[*ast.FieldReferenceNode]
	optNms       *fieldRefSlices
	cmpctOpts    *ast.CompactOptionsNode
	rng          *ast.RangeNode
	rngs         *rangeSlices
	names        *nameSlices
	cidPart      nodeWithRunes[*ast.IdentNode]
	cid          *identSlices
	tid          ast.IdentValueNode
	sl           *valueSlices
	msgLitFlds   *messageFieldList
	msgLitFld    *ast.MessageFieldNode
	v            ast.ValueNode
	il           ast.IntValueNode
	str          []*ast.StringLiteralNode
	s            *ast.StringLiteralNode
	i            *ast.UintLiteralNode
	f            *ast.FloatLiteralNode
	id           *ast.IdentNode
	b            *ast.RuneNode
	bs           []*ast.RuneNode
	err          error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _NAME = 57349
const _SYNTAX = 57350
const _EDITION = 57351
const _IMPORT = 57352
const _WEAK = 57353
const _PUBLIC = 57354
const _PACKAGE = 57355
const _OPTION = 57356
const _TRUE = 57357
const _FALSE = 57358
const _INF = 57359
const _NAN = 57360
const _REPEATED = 57361
const _OPTIONAL = 57362
const _REQUIRED = 57363
const _DOUBLE = 57364
const _FLOAT = 57365
const _INT32 = 57366
const _INT64 = 57367
const _UINT32 = 57368
const _UINT64 = 57369
const _SINT32 = 57370
const _SINT64 = 57371
const _FIXED32 = 57372
const _FIXED64 = 57373
const _SFIXED32 = 57374
const _SFIXED64 = 57375
const _BOOL = 57376
const _STRING = 57377
const _BYTES = 57378
const _GROUP = 57379
const _ONEOF = 57380
const _MAP = 57381
const _EXTENSIONS = 57382
const _TO = 57383
const _MAX = 57384
const _RESERVED = 57385
const _ENUM = 57386
const _MESSAGE = 57387
const _EXTEND = 57388
const _SERVICE = 57389
const _RPC = 57390
const _STREAM = 57391
const _RETURNS = 57392
const _EXPORT = 57393
const _LOCAL = 57394
const _ERROR = 57395

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_NAME",
	"_SYNTAX",
	"_EDITION",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_EXPORT",
	"_LOCAL",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"'.'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int16{
	-1, 0,
	1, 6,
	-2, 21,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	-2, 21,
	-1, 3,
	1, 2,
	-2, 21,
	-1, 14,
	1, 7,
	-2, 0,
	-1, 92,
	54, 61,
	63, 61,
	71, 61,
	-2, 62,
	-1, 108,
	57, 38,
	60, 38,
	64, 38,
	69, 38,
	71, 38,
	-2, 35,
	-1, 120,
	54, 61,
	63, 61,
	71, 61,
	-2, 63,
	-1, 130,
	58, 254,
	-2, 0,
	-1, 133,
	57, 38,
	60, 38,
	64, 38,
	69, 38,
	71, 38,
	-2, 36,
	-1, 153,
	58, 230,
	-2, 0,
	-1, 159,
	58, 217,
	-2, 0,
	-1, 161,
	58, 255,
	-2, 0,
	-1, 215,
	58, 267,
	-2, 0,
	-1, 220,
	58, 84,
	64, 84,
	-2, 0,
	-1, 231,
	58, 231,
	-2, 0,
	-1, 292,
	58, 218,
	-2, 0,
	-1, 398,
	58, 268,
	-2, 0,
	-1, 489,
	58, 156,
	-2, 0,
	-1, 552,
	71, 145,
	-2, 142,
	-1, 560,
	58, 157,
	-2, 0,
	-1, 636,
	69, 53,
	-2, 50,
	-1, 694,
	71, 145,
	-2, 143,
	-1, 719,
	69, 53,
	-2, 51,
	-1, 761,
	58, 278,
	-2, 0,
	-1, 774,
	58, 279,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 2118

var protoAct = [...]int16{
	153, 7, 775, 7, 7, 465, 152, 18, 464, 415,
	102, 462, 140, 461, 531, 42, 633, 103, 625, 636,
	525, 34, 36, 561, 553, 549, 552, 426, 217, 447,
	250, 460, 446, 38, 293, 399, 425, 347, 21, 113,
	20, 19, 219, 117, 166, 232, 162, 158, 114, 115,
	116, 88, 105, 107, 89, 92, 108, 474, 411, 147,
	735, 732, 627, 736, 692, 684, 681, 416, 682, 542,
	9, 537, 417, 746, 680, 539, 484, 484, 540, 43,
	93, 96, 536, 477, 101, 484, 109, 490, 9, 485,
	535, 484, 481, 9, 476, 627, 768, 487, 483, 9,
	722, 478, 437, 484, 484, 709, 123, 448, 484, 484,
	484, 716, 147, 484, 484, 136, 137, 138, 484, 448,
	416, 151, 131, 147, 526, 144, 473, 740, 143, 142,
	159, 416, 409, 410, 534, 518, 215, 695, 616, 9,
	408, 216, 9, 517, 93, 121, 120, 497, 118, 789,
	495, 125, 126, 127, 128, 159, 622, 159, 493, 132,
	407, 239, 288, 133, 290, 787, 487, 294, 406, 449,
	9, 720, 139, 146, 703, 453, 782, 118, 435, 395,
	134, 449, 122, 783, 779, 773, 772, 770, 396, 762,
	300, 758, 236, 750, 234, 235, 724, 9, 244, 745,
	757, 224, 287, 23, 289, 697, 441, 440, 344, 439,
	438, 24, 404, 397, 25, 26, 343, 291, 230, 748,
	742, 394, 687, 400, 489, 157, 43, 156, 155, 154,
	135, 420, 130, 129, 124, 413, 5, 6, 111, 239,
	111, 9, 111, 418, 627, 30, 27, 31, 32, 699,
	345, 33, 28, 29, 731, 519, 696, 522, 433, 521,
	455, 444, 119, 405, 13, 12, 628, 402, 436, 777,
	236, 488, 234, 235, 224, 557, 244, 421, 755, 26,
	15, 26, 423, 9, 99, 100, 430, 97, 98, 9,
	753, 112, 442, 110, 688, 37, 685, 227, 226, 424,
	294, 428, 429, 434, 624, 623, 43, 35, 433, 228,
	229, 611, 558, 403, 39, 40, 427, 41, 545, 524,
	520, 4, 111, 300, 10, 11, 35, 443, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	8, 760, 774, 401, 450, 214, 398, 22, 160, 161,
	295, 292, 237, 434, 445, 296, 242, 432, 431, 559,
	560, 231, 248, 241, 238, 454, 564, 164, 240, 163,
	563, 233, 221, 220, 472, 528, 630, 567, 167, 245,
	634, 106, 631, 348, 569, 171, 251, 298, 635, 350,
	571, 173, 254, 499, 412, 414, 463, 145, 457, 141,
	451, 452, 90, 43, 91, 223, 400, 94, 550, 547,
	562, 551, 17, 16, 14, 3, 2, 1, 0, 0,
	0, 0, 0, 0, 0, 482, 0, 0, 0, 475,
	491, 0, 494, 496, 458, 0, 0, 0, 0, 512,
	513, 514, 515, 469, 0, 470, 0, 0, 0, 456,
	0, 0, 0, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 0, 0, 467, 467, 0, 0, 0, 0,
	224, 0, 0, 0, 516, 0, 479, 480, 0, 0,
	533, 543, 532, 0, 546, 0, 554, 555, 0, 498,
	0, 0, 0, 612, 613, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 523, 0, 0,
	0, 0, 0, 0, 0, 556, 0, 617, 0, 620,
	527, 0, 467, 0, 486, 0, 0, 0, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 689, 690, 686, 683, 621,
	619, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 693, 694, 541, 544,
	0, 0, 0, 0, 698, 0, 704, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 705, 0, 0, 618, 0, 0, 0, 708,
	93, 701, 702, 626, 43, 0, 0, 707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	715, 0, 0, 711, 691, 713, 0, 0, 0, 714,
	717, 718, 0, 0, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 726,
	0, 0, 728, 533, 725, 532, 721, 0, 730, 0,
	0, 0, 144, 0, 0, 143, 142, 739, 0, 729,
	706, 0, 0, 0, 0, 744, 741, 0, 0, 0,
	733, 0, 710, 712, 0, 749, 0, 0, 751, 747,
	0, 743, 0, 0, 0, 467, 0, 144, 0, 0,
	143, 142, 0, 756, 752, 0, 761, 0, 0, 759,
	146, 764, 0, 754, 0, 763, 0, 738, 0, 0,
	0, 0, 0, 778, 771, 0, 0, 0, 0, 776,
	0, 765, 766, 0, 784, 781, 0, 785, 0, 0,
	786, 0, 776, 0, 723, 146, 780, 727, 0, 788,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	734, 737, 530, 0, 35, 150, 148, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 0, 767, 0, 769, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 416, 0, 466, 0, 0,
	0, 529, 35, 150, 148, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 416, 0, 466, 0, 0, 468, 35,
	150, 148, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	416, 0, 466, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 95, 0, 0, 548, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 471, 0, 222, 0, 0,
	0, 225, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 35, 150, 148, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 149,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 35, 448, 225, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 449, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 0, 0, 0, 95, 255, 256, 257,
	258, 259, 260, 261, 26, 262, 263, 264, 265, 170,
	169, 168, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 0, 247, 253,
	246, 281, 282, 249, 30, 27, 31, 283, 284, 285,
	286, 28, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 629, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 632, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 422, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 346, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 392, 393, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 349, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 170,
	169, 168, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 0, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 565, 0,
	0, 0, 172, 572, 573, 574, 575, 576, 577, 578,
	566, 579, 580, 581, 582, 0, 0, 0, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 568, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 227,
	226, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 35, 427, 0, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 297, 0, 0, 0, 0, 301, 302, 303,
	304, 305, 306, 307, 26, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	333, 334, 335, 299, 336, 337, 338, 339, 340, 341,
	342, 419, 0, 0, 0, 0, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 0, 679,
}

var protoPact = [...]int16{
	228, -1000, 186, 186, -1000, 211, 210, 201, 196, -1000,
	-1000, -1000, 322, 322, 201, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 303, 2023, 1378, 2023, 243, 240,
	2023, 1496, 2023, -1000, 238, -1000, 236, -1000, 234, 322,
	322, 322, 115, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 208, -1000,
	1378, 120, -1000, -1000, -1000, 1496, 177, 2023, 2023, 2023,
	2023, 176, 175, -1000, 2023, -1000, 2023, 118, -1000, 173,
	-1000, -1000, -1000, -1000, 234, 234, 234, -1000, 2023, 1192,
	-1000, -1000, -1000, 52, 186, 172, 171, 170, 168, 186,
	1720, -1000, -1000, -1000, -1000, 186, -1000, -1000, -1000, -1000,
	186, -1000, -1000, 318, -1000, -1000, -1000, 1125, -1000, 292,
	-1000, -1000, 160, 1440, 186, 186, 186, 186, 159, 1930,
	158, 1720, -1000, -1000, -1000, 195, 1664, 2023, -1000, -1000,
	-1000, 117, 2023, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 155, 265, -1000, 154, -1000, -1000,
	1253, 105, 77, 2, -1000, 1979, -1000, -1000, -1000, -1000,
	186, 1440, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1608, 2023, 311, 2023, 2023, 1881,
	-1000, 116, 2023, 37, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 152, 151, 149,
	148, 186, 1930, -1000, -1000, -1000, -1000, -1000, 207, 1317,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 186, -1000, -1000, 2023, 2023, 113, 2023,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 206, 2023, 86, 186, 265, -1000,
	-1000, -1000, -1000, 2023, -1000, -1000, -1000, -1000, -1000, -1000,
	868, 868, -1000, -1000, -1000, -1000, 1061, 55, 23, 30,
	-1000, -1000, 2023, 2023, 38, 34, -1000, 230, 167, 33,
	103, 87, 84, 318, -1000, 2023, 86, 304, 186, 186,
	186, 186, -1000, -1000, 102, 80, -1000, 214, -1000, 315,
	-1000, 205, 203, 2023, 86, 314, -1000, -1000, -1000, 56,
	-1000, -1000, -1000, -1000, 318, -1000, 1834, -1000, 800, -1000,
	70, -1000, 19, -1000, 0, -1000, -1000, 2023, -1000, 21,
	15, 313, -1000, 186, 996, 186, 186, 311, 270, 1776,
	306, -1000, 186, 186, -1000, 322, -1000, 2023, -1000, 75,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 44, 102, 186, 114,
	-1000, 300, 299, -1000, 40, 216, 1552, -1000, 3, -1000,
	-3, -1000, -1000, -1000, -1000, -1000, 66, -1000, -6, 291,
	186, 165, 289, -1000, 186, 44, -1000, -7, -1000, -1000,
	1378, 74, -1000, 202, -1000, -1000, -1000, -1000, -1000, 147,
	1776, -1000, -1000, -1000, -1000, 194, 1378, 2023, 2023, 112,
	2023, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44, -1000, -1000, 318, -1000, 1496, -1000, 186, -1000,
	-1000, -1000, -1000, 48, 40, -1000, 189, -1000, 56, 1496,
	42, -1000, 2023, -1000, 2067, 109, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 935, -1000, -1000, -1000, 43, 138, 186, 44, -1000,
	-1000, 186, -1000, -1000, -1000, -1000, 1192, 186, -1000, -1000,
	200, 7, 6, 2023, 86, -1000, 186, 63, -1000, 186,
	163, -1000, 189, -1000, 142, 4, -1000, -1000, -1000, -1000,
	-1000, -1000, 186, 162, 186, 135, -1000, 186, -1000, -1000,
	-1000, 1192, 285, -1000, 189, 273, 186, 143, -1000, -1000,
	-1000, 133, 186, -1000, -1000, 186, -1000, 131, 186, -1000,
	186, -1000, 189, 40, -1000, 39, 129, 186, -1000, 128,
	127, 267, 186, 126, -1000, -1000, -1000, 189, 186, 119,
	-1000, 125, -1000, 186, 267, -1000, -1000, -1000, -1000, 186,
	-1000, 107, 186, -1000, -1000, -1000, -1000, -1000, 91, -1000,
}

var protoPgo = [...]int16{
	0, 417, 416, 415, 321, 280, 414, 413, 412, 411,
	410, 7, 26, 25, 409, 408, 407, 405, 404, 55,
	54, 24, 402, 98, 31, 12, 399, 13, 9, 11,
	5, 397, 396, 14, 395, 394, 29, 53, 393, 392,
	391, 390, 389, 388, 387, 44, 56, 52, 19, 16,
	15, 386, 385, 384, 383, 382, 17, 381, 380, 10,
	379, 378, 377, 37, 376, 375, 374, 373, 42, 28,
	372, 371, 370, 369, 368, 367, 366, 364, 363, 362,
	41, 45, 361, 6, 23, 360, 359, 358, 357, 356,
	355, 30, 27, 32, 36, 354, 352, 40, 34, 351,
	47, 350, 38, 46, 349, 348, 8, 347, 35, 346,
	345, 343, 2, 342, 341, 20, 18, 0, 340,
}

var protoR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 4, 6, 6,
	5, 5, 5, 5, 5, 5, 5, 5, 118, 118,
	117, 117, 116, 116, 2, 3, 7, 7, 7, 7,
	8, 50, 50, 56, 56, 57, 57, 47, 47, 46,
	51, 51, 52, 52, 53, 53, 54, 54, 55, 55,
	58, 58, 49, 49, 48, 10, 11, 18, 18, 19,
	20, 20, 22, 22, 21, 21, 16, 25, 25, 26,
	26, 26, 26, 30, 30, 30, 30, 31, 31, 106,
	106, 28, 28, 69, 68, 68, 67, 67, 67, 67,
	67, 67, 70, 70, 70, 17, 17, 17, 17, 24,
	24, 24, 27, 27, 27, 27, 35, 35, 29, 29,
	29, 32, 32, 32, 65, 65, 33, 33, 34, 34,
	34, 66, 66, 59, 59, 60, 60, 61, 61, 62,
	62, 63, 63, 64, 64, 45, 45, 45, 23, 23,
	14, 14, 15, 15, 13, 13, 12, 9, 9, 75,
	75, 77, 77, 77, 77, 74, 86, 86, 85, 85,
	84, 84, 84, 84, 84, 72, 72, 72, 72, 76,
	76, 76, 76, 78, 78, 78, 78, 79, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	96, 96, 94, 94, 92, 92, 92, 95, 95, 93,
	93, 93, 36, 36, 89, 89, 90, 90, 91, 91,
	87, 87, 88, 88, 97, 97, 97, 100, 100, 99,
	99, 98, 98, 98, 98, 101, 101, 80, 80, 80,
	83, 83, 82, 82, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 71, 71, 71, 71, 71,
	71, 71, 71, 102, 105, 105, 104, 104, 103, 103,
	103, 103, 73, 73, 73, 73, 107, 110, 110, 109,
	109, 108, 108, 108, 111, 111, 115, 115, 114, 114,
	113, 113, 112, 112, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37,
}

var protoR2 = [...]int8{
	0, 1, 1, 1, 2, 2, 0, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 0, 1, 0, 4, 4, 3, 4, 4, 4,
	3, 1, 3, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 2,
	1, 2, 1, 1, 2, 5, 5, 1, 1, 2,
	1, 1, 1, 2, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 2, 1,
	2, 3, 2, 1, 1, 2, 1, 2, 2, 2,
	2, 1, 3, 2, 3, 1, 3, 5, 3, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 3,
	2, 3, 2, 3, 1, 3, 1, 1, 3, 2,
	3, 1, 3, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 3, 2,
	1, 2, 1, 2, 1, 1, 2, 3, 1, 8,
	9, 9, 10, 7, 8, 6, 0, 1, 2, 1,
	1, 1, 1, 2, 1, 5, 6, 3, 4, 7,
	8, 5, 6, 5, 6, 3, 4, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 1, 3, 1, 3, 3, 1, 3, 1,
	3, 3, 1, 2, 4, 1, 4, 1, 3, 3,
	1, 3, 1, 3, 6, 7, 7, 1, 2, 2,
	1, 1, 1, 1, 1, 4, 5, 6, 7, 7,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 7, 5, 6, 4,
	5, 3, 4, 6, 0, 1, 2, 1, 1, 1,
	2, 1, 6, 7, 5, 6, 6, 1, 2, 2,
	1, 1, 1, 1, 6, 9, 4, 3, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var protoChk = [...]int16{
	-1000, -1, -2, -3, -4, 8, 9, -117, -118, 55,
	-4, -4, 54, 54, -6, -5, -7, -8, -11, -80,
	-97, -102, -107, 2, 10, 13, 14, 45, 51, 52,
	44, 46, 47, 55, -106, 4, -106, -5, -106, 11,
	12, 14, -50, -37, 7, 8, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
	23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, -21, -20,
	-22, -18, -19, -37, -16, 68, -37, 44, 45, 44,
	45, -37, -59, -56, 62, -47, -57, -37, -46, -37,
	55, 4, 55, -117, -106, -106, -106, -117, 62, 54,
	-19, -20, 62, -59, 57, -37, -37, -37, -37, 57,
	57, -56, -47, -46, 62, 57, -117, -117, -117, -37,
	-25, -26, -28, -106, -30, -31, -37, 57, 6, 67,
	5, 69, -83, -117, 57, 57, 57, 57, -100, -117,
	-105, -104, -103, -73, -75, 2, -45, -61, 21, 20,
	19, -52, 62, -40, 7, 8, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, -110, -117, -117, -69, 58, -68,
	-67, -70, 2, -17, -37, 70, 6, 5, 17, 18,
	58, -82, -81, -71, -97, -80, -102, -96, -77, -11,
	-74, -78, -89, 2, -45, -60, 40, 38, -79, 43,
	-91, -51, 62, 39, -39, 7, 8, 9, 10, 11,
	12, 13, 15, 16, 17, 18, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 41, 42, 47, 48, 49, 50, -100, -83, -100,
	-83, 58, -99, -98, -11, -101, -90, 2, -44, 43,
	-91, 7, 8, 9, 10, 11, 12, 13, 15, 16,
	17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 44, 45, 46, 47,
	48, 49, 50, 58, -103, 55, 37, -63, -54, 62,
	-42, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, -37, 62, -50, 58, -109, -108,
	-11, -111, 2, 48, 58, -68, 63, 55, 63, 55,
	56, 56, -35, -29, -34, -28, 65, 70, -56, 2,
	-117, -81, 37, -63, -37, -94, -92, 5, -37, -37,
	-94, -87, -88, -106, -37, 62, -50, 65, 58, 58,
	58, 58, -117, -98, 54, -95, -93, -36, 5, 67,
	-117, -37, -37, 62, -50, 54, -37, -117, -108, -37,
	-24, -27, -29, -32, -106, -30, 67, -37, 70, -24,
	-69, 64, -66, 71, 2, -29, 71, 60, 71, -37,
	-37, 54, -117, -23, 70, 55, -23, 63, 41, 57,
	54, -117, -23, 55, -117, 63, -117, 63, -37, -38,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, -117, -117, -117, -117, -36, 63, 55, 41,
	5, 54, 54, -37, 5, -115, 68, -37, -65, 71,
	2, -33, -27, -29, 64, 71, 63, 71, -56, 54,
	57, -23, 54, -117, -23, 5, -117, -14, 71, -13,
	-15, -9, -12, -21, -117, -117, -92, 5, 42, -86,
	-85, -84, -10, -72, -76, 2, 14, -62, 37, -53,
	62, -41, 7, 8, 9, 10, 11, 12, 13, 15,
	16, 17, 18, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 5, -117, -117, -106, -37, 63, -117, -23, -93,
	-117, -36, 42, 5, 5, -116, -23, 55, 50, 49,
	-64, -55, 62, -49, -58, -43, -48, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 50,
	71, 63, 71, -29, 71, 5, -83, 57, 5, -117,
	-117, -23, 71, -13, -12, 63, 54, 58, -84, 55,
	-21, -37, -37, 62, -50, -117, -23, -59, -117, 57,
	-23, -116, -23, -116, -115, -59, 69, -56, -49, -48,
	62, -33, 57, -23, 58, -83, -117, -23, -117, -25,
	-117, 54, 54, -116, -23, 54, 57, -23, -37, -117,
	64, -83, 57, -116, -117, 57, 69, -83, 57, -117,
	58, -117, -25, 5, -116, 5, -83, 57, 58, -83,
	-114, -117, 58, -83, -117, -116, -116, -23, 57, -23,
	58, -83, 58, 58, -113, -112, -11, 2, -117, 58,
	-116, -83, 57, 58, -117, -112, -117, 58, -83, 58,
}

var protoDef = [...]int16{
	-2, -2, -2, -2, 3, 0, 0, 0, 20, 18,
	4, 5, 0, 0, -2, 9, 10, 11, 12, 13,
	14, 15, 16, 17, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 19, 0, 79, 0, 8, 21, 0,
	0, 0, 21, 31, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 0, 64,
	0, 60, -2, 57, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 33, 0, 37, -2, 0,
	24, 80, 25, 26, 21, 21, 21, 30, 0, 0,
	-2, 65, 59, 0, 21, 0, 0, 0, 0, 21,
	-2, 124, 34, -2, 39, 21, 27, 28, 29, 32,
	21, 67, 68, 69, 70, 71, 72, 0, 73, 0,
	75, 66, 0, -2, 21, 21, 21, 21, 0, -2,
	0, -2, 257, 258, 259, 261, 0, 0, 135, 136,
	137, 127, 0, 42, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 0, -2, 56, 0, 82, 83,
	-2, 86, 91, 0, 95, 0, 74, 76, 77, 78,
	21, -2, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	205, 125, 0, 310, 40, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 0, 0, 0,
	0, 21, -2, 220, 221, 222, 223, 224, 0, 0,
	207, 357, 358, 359, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 21, 256, 260, 0, 0, 131, 0,
	46, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 470, 471, 472, 473, 474, 475, 476,
	477, 478, 479, 480, 0, 0, 128, 21, -2, 270,
	271, 272, 273, 0, 81, 85, 87, 88, 89, 90,
	0, 0, 93, 106, 107, 108, 0, 0, 0, 0,
	227, 232, 0, 0, 21, 0, 192, 194, 0, 21,
	0, 21, 21, 210, 212, 0, 126, 0, 21, 21,
	21, 21, 214, 219, 0, 0, 197, 199, 202, 0,
	253, 0, 0, 0, 132, 0, 43, 266, 269, 0,
	94, 99, 100, 101, 102, 103, 0, 105, 0, 92,
	0, 110, 0, 119, 0, 121, 96, 0, 98, 0,
	21, 0, 251, 21, 0, 21, 21, 0, 0, -2,
	0, 175, 21, 21, 208, 0, 209, 0, 41, 0,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 215, 228, 216, 229, 21, 0, 21, 0,
	203, 0, 0, 47, 23, 0, 0, 104, 0, 112,
	0, 114, 116, 117, 109, 118, 0, 120, 0, 0,
	21, 0, 0, 249, 21, 21, 252, 0, 139, 140,
	0, 144, -2, 148, 190, 191, 193, 195, 196, 0,
	-2, 159, 160, 161, 162, 164, 0, 0, 0, 129,
	0, 44, 399, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 423, 424, 425, 426,
	427, 428, 429, 430, 431, 432, 433, 434, 435, 436,
	437, 21, 176, 204, 211, 213, 0, 225, 21, 198,
	206, 200, 201, 0, 23, 264, 23, 22, 0, 0,
	0, 133, 0, 48, 0, 52, -2, 481, 482, 483,
	484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
	494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	111, 0, 113, 122, 97, 0, 0, 21, 21, 250,
	247, 21, 138, 141, -2, 146, 0, 21, 158, 163,
	0, 23, 0, 0, 130, 173, 21, 0, 226, 21,
	0, 262, 23, 265, 21, 0, 277, 134, 49, -2,
	54, 115, 21, 0, 21, 0, 245, 21, 248, 147,
	155, 0, 0, 167, 23, 0, 21, 0, 45, 174,
	177, 0, 21, 263, 274, 21, 276, 0, 21, 153,
	21, 246, 23, 23, 168, 0, 0, 21, 149, 0,
	0, -2, 21, 0, 154, 55, 165, 23, 21, 0,
	171, 0, 150, 21, -2, 281, 282, 283, 151, 21,
	166, 0, 21, 172, 275, 280, 152, 169, 0, 170,
}

var protoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 77, 76, 75, 73, 3,
	68, 69, 72, 66, 63, 67, 62, 60, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 56, 55,
	65, 54, 64, 61, 78, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 70, 59, 71, 74, 3, 81, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 57, 3, 58, 80,
}

var protoTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53,
}

var protoTok3 = [...]int8{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(protoPact[state])
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && int(protoChk[int(protoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || int(protoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := int(protoExca[i])
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(protoTok1[0])
		goto out
	}
	if char < len(protoTok1) {
		token = int(protoTok1[char])
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = int(protoTok2[char-protoPrivate])
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = int(protoTok3[i+0])
		if token == char {
			token = int(protoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(protoTok2[1]) /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = int(protoPact[protostate])
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = int(protoAct[proton])
	if int(protoChk[proton]) == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = int(protoDef[protostate])
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && int(protoExca[xi+1]) == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = int(protoExca[xi+0])
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = int(protoExca[xi+1])
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = int(protoPact[protoS[protop].yys]) + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = int(protoAct[proton]) /* simulate a shift of "error" */
					if int(protoChk[protostate]) == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= int(protoR2[proton])
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = int(protoR1[proton])
	protog := int(protoPgo[proton])
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = int(protoAct[protog])
	} else {
		protostate = int(protoAct[protoj])
		if int(protoChk[protostate]) != -proton {
			protostate = int(protoAct[protog])
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, protoDollar[1].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, protoDollar[2].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 5:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, protoDollar[2].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 6:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 7:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.fileElements = prependRunes(toFileElement, protoDollar[1].bs, protoDollar[2].fileElements)
		}
	case 8:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.fileElements = append(protoDollar[1].fileElements, protoDollar[2].fileElements...)
		}
	case 9:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElements = protoDollar[1].fileElements
		}
	case 10:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElements = toElements[ast.FileElement](toFileElement, protoDollar[1].imprt.Node, protoDollar[1].imprt.Runes)
		}
	case 11:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElements = toElements[ast.FileElement](toFileElement, protoDollar[1].pkg.Node, protoDollar[1].pkg.Runes)
		}
	case 12:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElements = toElements[ast.FileElement](toFileElement, protoDollar[1].opt.Node, protoDollar[1].opt.Runes)
		}
	case 13:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElements = toElements[ast.FileElement](toFileElement, protoDollar[1].msg.Node, protoDollar[1].msg.Runes)
		}
	case 14:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElements = toElements[ast.FileElement](toFileElement, protoDollar[1].en.Node, protoDollar[1].en.Runes)
		}
	case 15:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElements = toElements[ast.FileElement](toFileElement, protoDollar[1].extend.Node, protoDollar[1].extend.Runes)
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElements = toElements[ast.FileElement](toFileElement, protoDollar[1].svc.Node, protoDollar[1].svc.Runes)
		}
	case 17:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElements = nil
		}
	case 18:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.bs = []*ast.RuneNode{protoDollar[1].b}
		}
	case 19:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.bs = append(protoDollar[1].bs, protoDollar[2].b)
		}
	case 20:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.bs = protoDollar[1].bs
		}
	case 21:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.bs = nil
		}
	case 22:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 23:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protolex.(*protoLex).Error("syntax error: expecting ';'")
			protoVAL.b = nil
		}
	case 24:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.syn = ast.NewSyntaxNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, toStringValueNode(protoDollar[3].str), protoDollar[4].b)
		}
	case 25:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ed = ast.NewEditionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, toStringValueNode(protoDollar[3].str), protoDollar[4].b)
		}
	case 26:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[3].bs)
			protoVAL.imprt = newNodeWithRunes(ast.NewImportNodeWithModifier(protoDollar[1].id.ToKeyword(), nil, toStringValueNode(protoDollar[2].str), semi), extra...)
		}
	case 27:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[4].bs)
			protoVAL.imprt = newNodeWithRunes(ast.NewImportNodeWithModifier(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), toStringValueNode(protoDollar[3].str), semi), extra...)
		}
	case 28:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[4].bs)
			protoVAL.imprt = newNodeWithRunes(ast.NewImportNodeWithModifier(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), toStringValueNode(protoDollar[3].str), semi), extra...)
		}
	case 29:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[4].bs)
			protoVAL.imprt = newNodeWithRunes(ast.NewImportNodeWithModifier(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), toStringValueNode(protoDollar[3].str), semi), extra...)
		}
	case 30:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[3].bs)
			protoVAL.pkg = newNodeWithRunes(ast.NewPackageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].cid.toIdentValueNode(nil), semi), extra...)
		}
	case 31:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 32:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 33:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].cidPart.Node}, dots: protoDollar[1].cidPart.Runes}
		}
	case 34:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[2].cidPart.Node)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].cidPart.Runes...)
			protoVAL.cid = protoDollar[1].cid
		}
	case 35:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].cidPart.Node}, dots: protoDollar[1].cidPart.Runes}
		}
	case 36:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[2].cidPart.Node)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].cidPart.Runes...)
			protoVAL.cid = protoDollar[1].cid
		}
	case 37:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cidPart = newNodeWithRunes(protoDollar[1].id)
		}
	case 38:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).Error("syntax error: unexpected '.'")
			protoVAL.cidPart = protoDollar[1].cidPart
		}
	case 39:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.cidPart = newNodeWithRunes(protoDollar[1].id, protoDollar[2].b)
		}
	case 40:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 41:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 42:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 43:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 44:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 45:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 46:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 47:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 48:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].cidPart.Node}, dots: protoDollar[1].cidPart.Runes}
		}
	case 49:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[2].cidPart.Node)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].cidPart.Runes...)
			protoVAL.cid = protoDollar[1].cid
		}
	case 50:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].cidPart.Node}, dots: protoDollar[1].cidPart.Runes}
		}
	case 51:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[2].cidPart.Node)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].cidPart.Runes...)
			protoVAL.cid = protoDollar[1].cid
		}
	case 52:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cidPart = newNodeWithRunes(protoDollar[1].id)
		}
	case 53:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).Error("syntax error: unexpected '.'")
			protoVAL.cidPart = protoDollar[1].cidPart
		}
	case 54:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.cidPart = newNodeWithRunes(protoDollar[1].id, protoDollar[2].b)
		}
	case 55:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[2].optNms.refs, protoDollar[2].optNms.dots)
			protoVAL.optRaw = ast.NewOptionNode(protoDollar[1].id.ToKeyword(), optName, protoDollar[3].b, protoDollar[4].v, protoDollar[5].b)
		}
	case 56:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[2].optNms.refs, protoDollar[2].optNms.dots)
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[5].bs)
			protoVAL.opt = newNodeWithRunes(ast.NewOptionNode(protoDollar[1].id.ToKeyword(), optName, protoDollar[3].b, protoDollar[4].v, semi), extra...)
		}
	case 57:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.refRaw = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 58:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.refRaw = protoDollar[1].refRaw
		}
	case 59:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.ref = newNodeWithRunes(protoDollar[1].refRaw, protoDollar[2].b)
		}
	case 60:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = newNodeWithRunes(protoDollar[1].refRaw)
		}
	case 61:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).Error("syntax error: unexpected '.'")
			protoVAL.ref = protoDollar[1].ref
		}
	case 62:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optNms = &fieldRefSlices{refs: []*ast.FieldReferenceNode{protoDollar[1].ref.Node}, dots: protoDollar[1].ref.Runes}
		}
	case 63:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].optNms.refs = append(protoDollar[1].optNms.refs, protoDollar[2].ref.Node)
			protoDollar[1].optNms.dots = append(protoDollar[1].optNms.dots, protoDollar[2].ref.Runes...)
			protoVAL.optNms = protoDollar[1].optNms
		}
	case 64:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optNms = &fieldRefSlices{refs: []*ast.FieldReferenceNode{protoDollar[1].ref.Node}, dots: protoDollar[1].ref.Runes}
		}
	case 65:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].optNms.refs = append(protoDollar[1].optNms.refs, protoDollar[2].ref.Node)
			protoDollar[1].optNms.dots = append(protoDollar[1].optNms.dots, protoDollar[2].ref.Runes...)
			protoVAL.optNms = protoDollar[1].optNms
		}
	case 66:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.refRaw = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].tid, protoDollar[3].b)
		}
	case 69:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = toStringValueNode(protoDollar[1].str)
		}
	case 72:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id
		}
	case 73:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].f
		}
	case 74:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 75:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].i
		}
	case 76:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].i.Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].i)
			} else {
				protoVAL.v = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
			}
		}
	case 77:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 78:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 79:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.str = []*ast.StringLiteralNode{protoDollar[1].s}
		}
	case 80:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.str = append(protoDollar[1].str, protoDollar[2].s)
		}
	case 81:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 82:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 85:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFlds != nil {
				protoDollar[1].msgLitFlds.next = protoDollar[2].msgLitFlds
				protoVAL.msgLitFlds = protoDollar[1].msgLitFlds
			} else {
				protoVAL.msgLitFlds = protoDollar[2].msgLitFlds
			}
		}
	case 86:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 87:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 88:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 89:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 90:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 91:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 92:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].refRaw != nil && protoDollar[2].b != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].refRaw, protoDollar[2].b, protoDollar[3].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 93:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].refRaw != nil && protoDollar[2].v != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].refRaw, nil, protoDollar[2].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 94:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.msgLitFld = nil
		}
	case 95:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.refRaw = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 96:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.refRaw = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b)
		}
	case 97:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.refRaw = ast.NewAnyTypeReferenceNode(protoDollar[1].b, protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b, protoDollar[4].cid.toIdentValueNode(nil), protoDollar[5].b)
		}
	case 98:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.refRaw = nil
		}
	case 102:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = toStringValueNode(protoDollar[1].str)
		}
	case 104:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			kw := protoDollar[2].id.ToKeyword()
			switch strings.ToLower(kw.Val) {
			case "inf", "infinity", "nan":
				// these are acceptable
			default:
				// anything else is not
				protolex.(*protoLex).Error(`only identifiers "inf", "infinity", or "nan" may appear after negative sign`)
			}
			// we'll validate the identifier later
			f := ast.NewSpecialFloatLiteralNode(kw)
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 105:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id
		}
	case 109:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 110:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 111:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[3].b)
			}
		}
	case 112:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 113:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 114:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 115:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 118:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[3].b)
			}
		}
	case 119:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 120:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 121:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 122:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 123:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 124:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 125:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 126:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 127:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 128:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 129:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 130:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 131:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 132:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 133:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 134:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 138:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, protoDollar[2].opts.options, protoDollar[2].opts.commas, protoDollar[3].b)
		}
	case 139:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).Error("compact options must have at least one option")
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 140:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{protoDollar[1].opt.Node}, commas: protoDollar[1].opt.Runes}
		}
	case 141:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opts.options = append(protoDollar[1].opts.options, protoDollar[2].opt.Node)
			protoDollar[1].opts.commas = append(protoDollar[1].opts.commas, protoDollar[2].opt.Runes...)
			protoVAL.opts = protoDollar[1].opts
		}
	case 142:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{protoDollar[1].opt.Node}, commas: protoDollar[1].opt.Runes}
		}
	case 143:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opts.options = append(protoDollar[1].opts.options, protoDollar[2].opt.Node)
			protoDollar[1].opts.commas = append(protoDollar[1].opts.commas, protoDollar[2].opt.Runes...)
			protoVAL.opts = protoDollar[1].opts
		}
	case 144:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opt = newNodeWithRunes(protoDollar[1].optRaw)
		}
	case 145:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).Error("syntax error: unexpected ','")
			protoVAL.opt = protoDollar[1].opt
		}
	case 146:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.opt = newNodeWithRunes(protoDollar[1].optRaw, protoDollar[2].b)
		}
	case 147:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[1].optNms.refs, protoDollar[1].optNms.dots)
			protoVAL.optRaw = ast.NewCompactOptionNode(optName, protoDollar[2].b, protoDollar[3].v)
		}
	case 148:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[1].optNms.refs, protoDollar[1].optNms.dots)
			protolex.(*protoLex).Error("compact option must have a value")
			protoVAL.optRaw = ast.NewCompactOptionNode(optName, nil, nil)
		}
	case 149:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 150:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b, protoDollar[8].msgElements, protoDollar[9].b)
		}
	case 151:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.msgGrp = newNodeWithRunes(ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b), protoDollar[9].bs...)
		}
	case 152:
		protoDollar = protoS[protopt-10 : protopt+1]
		{
			protoVAL.msgGrp = newNodeWithRunes(ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b, protoDollar[8].msgElements, protoDollar[9].b), protoDollar[10].bs...)
		}
	case 153:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.msgGrp = newNodeWithRunes(ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, nil, nil, nil, protoDollar[4].b, protoDollar[5].msgElements, protoDollar[6].b), protoDollar[7].bs...)
		}
	case 154:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.msgGrp = newNodeWithRunes(ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, nil, nil, protoDollar[4].cmpctOpts, protoDollar[5].b, protoDollar[6].msgElements, protoDollar[7].b), protoDollar[8].bs...)
		}
	case 155:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.oo = newNodeWithRunes(ast.NewOneofNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].ooElements, protoDollar[5].b), protoDollar[6].bs...)
		}
	case 156:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.ooElements = nil
		}
	case 158:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].ooElement != nil {
				protoVAL.ooElements = append(protoDollar[1].ooElements, protoDollar[2].ooElement)
			} else {
				protoVAL.ooElements = protoDollar[1].ooElements
			}
		}
	case 159:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].ooElement != nil {
				protoVAL.ooElements = []ast.OneofElement{protoDollar[1].ooElement}
			} else {
				protoVAL.ooElements = nil
			}
		}
	case 160:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].optRaw
		}
	case 161:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].fld
		}
	case 162:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].grp
		}
	case 163:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 164:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 165:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 166:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 167:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, nil, nil, nil, protoDollar[3].b)
		}
	case 168:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, nil, nil, protoDollar[3].cmpctOpts, protoDollar[4].b)
		}
	case 169:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b, protoDollar[6].msgElements, protoDollar[7].b)
		}
	case 170:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 171:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, nil, nil, nil, protoDollar[3].b, protoDollar[4].msgElements, protoDollar[5].b)
		}
	case 172:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, nil, nil, protoDollar[3].cmpctOpts, protoDollar[4].b, protoDollar[5].msgElements, protoDollar[6].b)
		}
	case 173:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[5].bs)
			protoVAL.mapFld = newNodeWithRunes(ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, semi), extra...)
		}
	case 174:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[6].bs)
			protoVAL.mapFld = newNodeWithRunes(ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, semi), extra...)
		}
	case 175:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[3].bs)
			protoVAL.mapFld = newNodeWithRunes(ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, nil, nil, nil, semi), extra...)
		}
	case 176:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[4].bs)
			protoVAL.mapFld = newNodeWithRunes(ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, nil, nil, protoDollar[3].cmpctOpts, semi), extra...)
		}
	case 177:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mapType = ast.NewMapTypeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].id, protoDollar[4].b, protoDollar[5].tid, protoDollar[6].b)
		}
	case 190:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			// TODO: Tolerate a missing semicolon here. This currnelty creates a shift/reduce conflict
			// between `extensions 1 to 10` and `extensions 1` followed by `to = 10`.
			protoVAL.ext = newNodeWithRunes(ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, nil, protoDollar[3].b), protoDollar[4].bs...)
		}
	case 191:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[4].bs)
			protoVAL.ext = newNodeWithRunes(ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[3].cmpctOpts, semi), extra...)
		}
	case 192:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 193:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 194:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, nil, nil, nil)
		}
	case 195:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), protoDollar[3].i, nil)
		}
	case 196:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 197:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 198:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 199:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, nil, nil, nil)
		}
	case 200:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), protoDollar[3].il, nil)
		}
	case 201:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 202:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.il = protoDollar[1].i
		}
	case 203:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.il = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 204:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			// TODO: Tolerate a missing semicolon here. This currnelty creates a shift/reduce conflict
			// between `reserved 1 to 10` and `reserved 1` followed by `to = 10`.
			protoVAL.resvd = newNodeWithRunes(ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[3].b), protoDollar[4].bs...)
		}
	case 206:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			// TODO: Tolerate a missing semicolon here. This currnelty creates a shift/reduce conflict
			// between `reserved 1 to 10` and `reserved 1` followed by `to = 10`.
			protoVAL.resvd = newNodeWithRunes(ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[3].b), protoDollar[4].bs...)
		}
	case 208:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[3].bs)
			protoVAL.resvd = newNodeWithRunes(ast.NewReservedNamesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.names, protoDollar[2].names.commas, semi), extra...)
		}
	case 209:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[3].bs)
			protoVAL.resvd = newNodeWithRunes(ast.NewReservedIdentifiersNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.idents, protoDollar[2].names.commas, semi), extra...)
		}
	case 210:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{names: []ast.StringValueNode{toStringValueNode(protoDollar[1].str)}}
		}
	case 211:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.names = append(protoDollar[1].names.names, toStringValueNode(protoDollar[3].str))
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 212:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 213:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.idents = append(protoDollar[1].names.idents, protoDollar[3].id)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 214:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.en = newNodeWithRunes(ast.NewEnumNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].enElements, protoDollar[5].b), protoDollar[6].bs...)
		}
	case 215:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.en = newNodeWithRunes(ast.NewEnumNodeWithVisibility(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].enElements, protoDollar[6].b), protoDollar[7].bs...)
		}
	case 216:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.en = newNodeWithRunes(ast.NewEnumNodeWithVisibility(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].enElements, protoDollar[6].b), protoDollar[7].bs...)
		}
	case 217:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = prependRunes(toEnumElement, protoDollar[1].bs, nil)
		}
	case 218:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.enElements = prependRunes(toEnumElement, protoDollar[1].bs, protoDollar[2].enElements)
		}
	case 219:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.enElements = append(protoDollar[1].enElements, protoDollar[2].enElements...)
		}
	case 220:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = protoDollar[1].enElements
		}
	case 221:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = toElements[ast.EnumElement](toEnumElement, protoDollar[1].opt.Node, protoDollar[1].opt.Runes)
		}
	case 222:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = toElements[ast.EnumElement](toEnumElement, protoDollar[1].env.Node, protoDollar[1].env.Runes)
		}
	case 223:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = toElements[ast.EnumElement](toEnumElement, protoDollar[1].resvd.Node, protoDollar[1].resvd.Runes)
		}
	case 224:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = nil
		}
	case 225:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[4].bs)
			protoVAL.env = newNodeWithRunes(ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, nil, semi), extra...)
		}
	case 226:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[5].bs)
			protoVAL.env = newNodeWithRunes(ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, protoDollar[4].cmpctOpts, semi), extra...)
		}
	case 227:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.msg = newNodeWithRunes(ast.NewMessageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].msgElements, protoDollar[5].b), protoDollar[6].bs...)
		}
	case 228:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.msg = newNodeWithRunes(ast.NewMessageNodeWithVisibility(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].msgElements, protoDollar[6].b), protoDollar[7].bs...)
		}
	case 229:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.msg = newNodeWithRunes(ast.NewMessageNodeWithVisibility(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].msgElements, protoDollar[6].b), protoDollar[7].bs...)
		}
	case 230:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = prependRunes(toMessageElement, protoDollar[1].bs, nil)
		}
	case 231:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgElements = prependRunes(toMessageElement, protoDollar[1].bs, protoDollar[2].msgElements)
		}
	case 232:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgElements = append(protoDollar[1].msgElements, protoDollar[2].msgElements...)
		}
	case 233:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = protoDollar[1].msgElements
		}
	case 234:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = toElements[ast.MessageElement](toMessageElement, protoDollar[1].msgFld.Node, protoDollar[1].msgFld.Runes)
		}
	case 235:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = toElements[ast.MessageElement](toMessageElement, protoDollar[1].en.Node, protoDollar[1].en.Runes)
		}
	case 236:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = toElements[ast.MessageElement](toMessageElement, protoDollar[1].msg.Node, protoDollar[1].msg.Runes)
		}
	case 237:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = toElements[ast.MessageElement](toMessageElement, protoDollar[1].extend.Node, protoDollar[1].extend.Runes)
		}
	case 238:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = toElements[ast.MessageElement](toMessageElement, protoDollar[1].ext.Node, protoDollar[1].ext.Runes)
		}
	case 239:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = toElements[ast.MessageElement](toMessageElement, protoDollar[1].msgGrp.Node, protoDollar[1].msgGrp.Runes)
		}
	case 240:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = toElements[ast.MessageElement](toMessageElement, protoDollar[1].opt.Node, protoDollar[1].opt.Runes)
		}
	case 241:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = toElements[ast.MessageElement](toMessageElement, protoDollar[1].oo.Node, protoDollar[1].oo.Runes)
		}
	case 242:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = toElements[ast.MessageElement](toMessageElement, protoDollar[1].mapFld.Node, protoDollar[1].mapFld.Runes)
		}
	case 243:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = toElements[ast.MessageElement](toMessageElement, protoDollar[1].resvd.Node, protoDollar[1].resvd.Runes)
		}
	case 244:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElements = nil
		}
	case 245:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			semis, extra := protolex.(*protoLex).requireSemicolon(protoDollar[6].bs)
			protoVAL.msgFld = newNodeWithRunes(ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, semis), extra...)
		}
	case 246:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			semis, extra := protolex.(*protoLex).requireSemicolon(protoDollar[7].bs)
			protoVAL.msgFld = newNodeWithRunes(ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, semis), extra...)
		}
	case 247:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			semis, extra := protolex.(*protoLex).requireSemicolon(protoDollar[5].bs)
			protoVAL.msgFld = newNodeWithRunes(ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, semis), extra...)
		}
	case 248:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			semis, extra := protolex.(*protoLex).requireSemicolon(protoDollar[6].bs)
			protoVAL.msgFld = newNodeWithRunes(ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, semis), extra...)
		}
	case 249:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			semis, extra := protolex.(*protoLex).requireSemicolon(protoDollar[4].bs)
			protoVAL.msgFld = newNodeWithRunes(ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, nil, nil, nil, semis), extra...)
		}
	case 250:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			semis, extra := protolex.(*protoLex).requireSemicolon(protoDollar[5].bs)
			protoVAL.msgFld = newNodeWithRunes(ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, nil, nil, protoDollar[4].cmpctOpts, semis), extra...)
		}
	case 251:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			semis, extra := protolex.(*protoLex).requireSemicolon(protoDollar[3].bs)
			protoVAL.msgFld = newNodeWithRunes(ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, nil, nil, nil, semis), extra...)
		}
	case 252:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			semis, extra := protolex.(*protoLex).requireSemicolon(protoDollar[4].bs)
			protoVAL.msgFld = newNodeWithRunes(ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, nil, nil, protoDollar[3].cmpctOpts, semis), extra...)
		}
	case 253:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.extend = newNodeWithRunes(ast.NewExtendNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].b, protoDollar[4].extElements, protoDollar[5].b), protoDollar[6].bs...)
		}
	case 254:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.extElements = nil
		}
	case 256:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].extElement != nil {
				protoVAL.extElements = append(protoDollar[1].extElements, protoDollar[2].extElement)
			} else {
				protoVAL.extElements = protoDollar[1].extElements
			}
		}
	case 257:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].extElement != nil {
				protoVAL.extElements = []ast.ExtendElement{protoDollar[1].extElement}
			} else {
				protoVAL.extElements = nil
			}
		}
	case 258:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = protoDollar[1].fld
		}
	case 259:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = protoDollar[1].grp
		}
	case 260:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 261:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 262:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 263:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 264:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 265:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 266:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.svc = newNodeWithRunes(ast.NewServiceNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].svcElements, protoDollar[5].b), protoDollar[6].bs...)
		}
	case 267:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElements = prependRunes(toServiceElement, protoDollar[1].bs, nil)
		}
	case 268:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.svcElements = prependRunes(toServiceElement, protoDollar[1].bs, protoDollar[2].svcElements)
		}
	case 269:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.svcElements = append(protoDollar[1].svcElements, protoDollar[2].svcElements...)
		}
	case 270:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElements = protoDollar[1].svcElements
		}
	case 271:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElements = toElements[ast.ServiceElement](toServiceElement, protoDollar[1].opt.Node, protoDollar[1].opt.Runes)
		}
	case 272:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElements = toElements[ast.ServiceElement](toServiceElement, protoDollar[1].mtd.Node, protoDollar[1].mtd.Runes)
		}
	case 273:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElements = nil
		}
	case 274:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[6].bs)
			protoVAL.mtd = newNodeWithRunes(ast.NewRPCNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType, semi), extra...)
		}
	case 275:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.mtd = newNodeWithRunes(ast.NewRPCNodeWithBody(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType, protoDollar[6].b, protoDollar[7].mtdElements, protoDollar[8].b), protoDollar[9].bs...)
		}
	case 276:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, protoDollar[2].id.ToKeyword(), protoDollar[3].tid, protoDollar[4].b)
		}
	case 277:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, nil, protoDollar[2].tid, protoDollar[3].b)
		}
	case 278:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElements = prependRunes(toMethodElement, protoDollar[1].bs, nil)
		}
	case 279:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.mtdElements = prependRunes(toMethodElement, protoDollar[1].bs, protoDollar[2].mtdElements)
		}
	case 280:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.mtdElements = append(protoDollar[1].mtdElements, protoDollar[2].mtdElements...)
		}
	case 281:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElements = protoDollar[1].mtdElements
		}
	case 282:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElements = toElements[ast.RPCElement](toMethodElement, protoDollar[1].opt.Node, protoDollar[1].opt.Runes)
		}
	case 283:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElements = nil
		}
	}
	goto protostack /* stack new state and value */
}
