// Copyright 2020-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

//lint:file-ignore SA4006 generated parser has unused values

import (
	"math"

	"github.com/bufbuild/protocompile/ast"
)

type protoSymType struct {
	yys          int
	file         *ast.FileNode
	syn          *ast.SyntaxNode
	ed           *ast.EditionNode
	fileElement  ast.FileElement
	fileElements []ast.FileElement
	pkg          *ast.PackageNode
	imprt        *ast.ImportNode
	msg          *ast.MessageNode
	msgElement   ast.MessageElement
	msgElements  []ast.MessageElement
	fld          *ast.FieldNode
	mapFld       *ast.MapFieldNode
	mapType      *ast.MapTypeNode
	grp          *ast.GroupNode
	oo           *ast.OneofNode
	ooElement    ast.OneofElement
	ooElements   []ast.OneofElement
	ext          *ast.ExtensionRangeNode
	resvd        *ast.ReservedNode
	resvdN       nodeWithEmptyDecls[*ast.ReservedNode]
	en           *ast.EnumNode
	enElement    ast.EnumElement
	enElements   []ast.EnumElement
	env          nodeWithEmptyDecls[*ast.EnumValueNode]
	extend       *ast.ExtendNode
	extElement   ast.ExtendElement
	extElements  []ast.ExtendElement
	svc          *ast.ServiceNode
	svcElements  []ast.ServiceElement
	mtd          nodeWithEmptyDecls[*ast.RPCNode]
	mtdMsgType   *ast.RPCTypeNode
	mtdElements  []ast.RPCElement
	opt          *ast.OptionNode
	optN         nodeWithEmptyDecls[*ast.OptionNode]
	opts         *compactOptionSlices
	ref          *ast.FieldReferenceNode
	optNms       *fieldRefSlices
	cmpctOpts    *ast.CompactOptionsNode
	rng          *ast.RangeNode
	rngs         *rangeSlices
	names        *nameSlices
	cid          *identSlices
	tid          ast.IdentValueNode
	sl           *valueSlices
	msgLitFlds   *messageFieldList
	msgLitFld    *ast.MessageFieldNode
	v            ast.ValueNode
	il           ast.IntValueNode
	str          []*ast.StringLiteralNode
	s            *ast.StringLiteralNode
	i            *ast.UintLiteralNode
	f            *ast.FloatLiteralNode
	id           *ast.IdentNode
	b            *ast.RuneNode
	bs           []*ast.RuneNode
	err          error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _NAME = 57349
const _SYNTAX = 57350
const _EDITION = 57351
const _IMPORT = 57352
const _WEAK = 57353
const _PUBLIC = 57354
const _PACKAGE = 57355
const _OPTION = 57356
const _TRUE = 57357
const _FALSE = 57358
const _INF = 57359
const _NAN = 57360
const _REPEATED = 57361
const _OPTIONAL = 57362
const _REQUIRED = 57363
const _DOUBLE = 57364
const _FLOAT = 57365
const _INT32 = 57366
const _INT64 = 57367
const _UINT32 = 57368
const _UINT64 = 57369
const _SINT32 = 57370
const _SINT64 = 57371
const _FIXED32 = 57372
const _FIXED64 = 57373
const _SFIXED32 = 57374
const _SFIXED64 = 57375
const _BOOL = 57376
const _STRING = 57377
const _BYTES = 57378
const _GROUP = 57379
const _ONEOF = 57380
const _MAP = 57381
const _EXTENSIONS = 57382
const _TO = 57383
const _MAX = 57384
const _RESERVED = 57385
const _ENUM = 57386
const _MESSAGE = 57387
const _EXTEND = 57388
const _SERVICE = 57389
const _RPC = 57390
const _STREAM = 57391
const _RETURNS = 57392
const _ERROR = 57393

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_NAME",
	"_SYNTAX",
	"_EDITION",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"'.'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int16{
	-1, 0,
	1, 6,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	-2, 0,
	-1, 3,
	1, 2,
	-2, 0,
	-1, 4,
	1, 3,
	-2, 0,
	-1, 24,
	1, 4,
	-2, 0,
	-1, 25,
	1, 5,
	-2, 0,
	-1, 100,
	56, 188,
	-2, 0,
	-1, 101,
	56, 177,
	-2, 0,
	-1, 102,
	56, 209,
	-2, 0,
	-1, 125,
	56, 189,
	-2, 0,
	-1, 186,
	56, 178,
	-2, 0,
	-1, 239,
	56, 210,
	-2, 0,
	-1, 290,
	56, 222,
	-2, 0,
	-1, 297,
	56, 65,
	62, 65,
	-2, 0,
	-1, 392,
	56, 223,
	-2, 0,
	-1, 425,
	56, 122,
	-2, 0,
	-1, 486,
	56, 123,
	-2, 0,
	-1, 637,
	56, 188,
	-2, 0,
	-1, 659,
	56, 188,
	-2, 0,
	-1, 672,
	56, 188,
	-2, 0,
	-1, 675,
	56, 233,
	-2, 0,
	-1, 679,
	56, 188,
	-2, 0,
	-1, 681,
	56, 234,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 1764

var protoAct = [...]int16{
	34, 290, 461, 10, 13, 12, 11, 682, 124, 421,
	85, 188, 86, 111, 553, 548, 410, 487, 110, 381,
	80, 83, 84, 113, 88, 481, 380, 361, 294, 459,
	393, 33, 296, 312, 132, 139, 240, 367, 366, 187,
	360, 29, 482, 126, 96, 634, 559, 81, 469, 633,
	473, 89, 90, 636, 93, 94, 472, 632, 96, 406,
	116, 566, 79, 558, 420, 672, 670, 471, 411, 565,
	649, 557, 422, 412, 639, 637, 581, 575, 423, 423,
	563, 423, 666, 654, 549, 423, 123, 292, 423, 423,
	382, 423, 423, 99, 382, 423, 372, 109, 115, 121,
	103, 116, 423, 116, 133, 130, 128, 129, 539, 411,
	96, 411, 404, 405, 112, 468, 648, 301, 556, 95,
	403, 655, 573, 417, 389, 292, 96, 545, 16, 133,
	130, 128, 129, 431, 5, 6, 17, 242, 244, 18,
	19, 359, 370, 363, 364, 369, 122, 292, 292, 430,
	383, 428, 427, 402, 383, 429, 448, 431, 567, 429,
	422, 401, 679, 371, 689, 685, 98, 446, 368, 310,
	21, 20, 22, 23, 97, 98, 680, 676, 16, 15,
	668, 292, 98, 665, 659, 365, 17, 568, 399, 18,
	19, 391, 384, 80, 373, 369, 309, 425, 104, 102,
	101, 100, 92, 92, 92, 92, 92, 292, 677, 663,
	660, 651, 647, 641, 570, 478, 398, 386, 368, 293,
	21, 20, 22, 23, 645, 644, 374, 546, 662, 15,
	475, 474, 379, 378, 455, 375, 426, 419, 376, 28,
	27, 583, 291, 483, 396, 452, 388, 424, 661, 580,
	32, 108, 107, 106, 105, 91, 192, 30, 31, 562,
	390, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 561, 242, 244, 385, 684, 387, 7,
	484, 308, 306, 547, 26, 305, 303, 536, 362, 192,
	397, 477, 453, 307, 92, 32, 4, 304, 301, 24,
	25, 674, 394, 408, 26, 26, 681, 395, 289, 392,
	14, 238, 415, 416, 239, 413, 189, 185, 186, 131,
	377, 195, 190, 145, 136, 485, 486, 418, 125, 143,
	400, 135, 490, 134, 241, 489, 127, 298, 297, 467,
	550, 585, 492, 245, 140, 586, 313, 494, 246, 149,
	193, 588, 315, 496, 248, 152, 433, 407, 409, 462,
	114, 300, 480, 9, 8, 3, 2, 1, 0, 0,
	0, 432, 0, 0, 0, 0, 0, 0, 0, 449,
	450, 451, 0, 0, 0, 0, 0, 0, 454, 0,
	456, 0, 0, 0, 0, 0, 447, 0, 458, 0,
	0, 0, 0, 0, 394, 0, 115, 115, 0, 0,
	0, 0, 301, 0, 0, 470, 0, 0, 476, 460,
	460, 0, 0, 457, 80, 0, 0, 0, 0, 488,
	0, 0, 538, 0, 0, 0, 464, 0, 0, 0,
	465, 0, 0, 0, 0, 0, 0, 115, 0, 541,
	479, 0, 0, 537, 0, 0, 0, 542, 0, 0,
	0, 0, 0, 112, 115, 540, 555, 0, 0, 0,
	0, 0, 544, 0, 0, 543, 0, 554, 0, 0,
	0, 0, 0, 0, 0, 560, 0, 564, 0, 0,
	488, 0, 0, 571, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 0, 0, 0, 574, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 578, 0, 579, 0, 576, 0, 0, 0,
	577, 0, 0, 0, 0, 0, 0, 582, 0, 0,
	0, 635, 0, 0, 0, 0, 0, 80, 115, 0,
	0, 638, 640, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 643, 0, 0, 0,
	650, 0, 642, 0, 0, 653, 0, 0, 0, 652,
	656, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 555, 0, 0, 0,
	0, 133, 130, 128, 129, 0, 658, 554, 657, 0,
	0, 0, 0, 0, 664, 0, 667, 0, 0, 0,
	0, 0, 0, 133, 130, 128, 129, 675, 669, 0,
	0, 671, 673, 0, 0, 0, 133, 130, 128, 129,
	0, 678, 687, 133, 130, 128, 129, 683, 686, 688,
	0, 0, 552, 683, 32, 120, 117, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 411, 119, 118, 0, 0, 0, 551,
	32, 120, 117, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 411,
	119, 118, 0, 0, 463, 32, 120, 117, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 411, 119, 118, 32, 120, 117,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 299, 0, 0, 119, 118, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 466, 0, 299, 0, 0, 0,
	302, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 0, 0, 0, 0, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 299, 0,
	0, 0, 302, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 32, 382, 302, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 383, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 82, 153, 154, 155, 156, 157, 158,
	159, 19, 160, 161, 162, 163, 148, 147, 146, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 0, 142, 151, 141, 179, 180,
	144, 21, 20, 22, 181, 182, 183, 184, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 150, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 589, 590, 591, 592, 593, 594, 595, 596,
	597, 598, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 584, 631, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 311, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	0, 0, 0, 0, 0, 243, 0, 0, 0, 314,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 148, 147, 146, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	0, 276, 277, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 247, 497, 498, 499, 500, 501, 502,
	503, 19, 504, 505, 506, 507, 0, 0, 0, 508,
	509, 510, 511, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 493, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 0, 0,
	0, 0, 0, 0, 0, 32, 362, 495, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 414, 0, 0, 0, 0, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 191, 0, 0, 0, 0, 196, 197, 198, 199,
	200, 201, 202, 192, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 194, 231, 232, 233, 234, 235, 236, 237,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78,
}

var protoPact = [...]int16{
	126, -1000, 176, 176, 176, 188, 187, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 246, 1713, 1187,
	1713, 1713, 1301, 1713, 176, 176, -1000, 291, 291, 202,
	291, 291, -1000, 66, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 122,
	-1000, -1000, 1301, 146, 145, 144, 50, 1713, 143, 201,
	200, -1000, -1000, 199, 198, -1000, 1713, 883, 1187, 19,
	1247, 1669, 1463, 50, 154, -1000, -1000, -1000, -1000, -1000,
	166, -1000, -1000, 290, -1000, -1000, 1004, -1000, 280, 276,
	-1000, -1000, -1000, -1000, 140, 1247, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1409,
	1713, 283, 1713, 1713, 1571, -1000, -1000, -1000, -1000, 82,
	1713, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 138, 1669, -1000, -1000, -1000,
	-1000, -1000, 1187, 186, 1128, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 136, 1463,
	-1000, -1000, -1000, 164, 1409, 1713, 64, 1713, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 135,
	242, 163, -1000, -1000, 132, -1000, -1000, 1066, 100, 59,
	5, -1000, 1620, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1713, 1713, 63, 1713, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 185,
	11, -1000, 206, 142, 184, 99, 98, 96, 290, -1000,
	1713, 50, 237, -1000, -1000, 115, 89, 95, 94, 72,
	-1000, 204, -1000, 287, -1000, -1000, -1000, 1713, 182, 1713,
	50, -1000, 242, -1000, -1000, -1000, -1000, 1713, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 756, 756, -1000, -1000, -1000,
	-1000, 942, 46, -2, -19, 179, 178, 1713, 50, 286,
	-1000, 162, 283, 1187, 238, 1517, 282, -1000, -1000, 291,
	-1000, 1713, -1000, 47, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 883, 34, 89, -1000,
	-1000, -1000, 85, -1000, 175, 278, -1000, -1000, 18, -1000,
	-1000, -1000, -1000, 690, -1000, 56, -1000, 2, -1000, -23,
	-1000, -1000, 1713, -1000, 268, 254, -1000, 27, -1000, -1000,
	0, -1000, 106, -1000, -1000, 131, 1517, -1000, -1000, -1000,
	-1000, 161, 1713, 1713, 62, 1713, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 24, 290, -1000, 1301,
	154, -1000, 154, -1000, -1000, -1000, 244, 23, 191, 1355,
	-12, -1000, -24, -1000, -1000, -1000, -1000, -1000, 48, -1000,
	-16, 20, 21, -1000, 160, -1000, 1187, 883, -1000, -1000,
	-1000, 173, 172, 1713, 50, -1000, 159, 54, -1000, -1000,
	17, -1000, 158, 18, 1301, 16, 61, 1713, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 821, -1000, -1000, -1000, 1247, 129, -1000,
	157, -1000, -1000, -1000, 243, 223, -1000, -1000, -1000, -1000,
	156, -1000, 128, 15, -1000, 1713, 50, -1000, 124, 1247,
	-1000, 13, 10, -1000, -1000, 154, -1000, -1000, -1000, 121,
	-1000, 155, 1247, 107, 120, 275, -1000, -1000, 109, 1247,
	154, 275, -1000, -1000, -1000, -1000, 108, -1000, -1000, -1000,
}

var protoPgo = [...]int16{
	0, 367, 366, 365, 279, 296, 364, 363, 3, 25,
	11, 362, 47, 361, 42, 9, 29, 18, 13, 16,
	2, 360, 359, 14, 358, 357, 19, 0, 356, 355,
	354, 353, 352, 351, 350, 35, 12, 349, 348, 347,
	346, 345, 10, 344, 343, 342, 33, 341, 340, 339,
	338, 32, 28, 337, 336, 335, 334, 333, 34, 332,
	331, 329, 6, 43, 328, 8, 17, 326, 325, 38,
	37, 324, 323, 322, 321, 27, 26, 40, 320, 319,
	5, 39, 318, 317, 316, 4, 36, 314, 311, 23,
	310, 30, 309, 308, 307, 7, 306, 301, 15, 1,
	242,
}

var protoR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 5, 5, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 100, 100,
	99, 99, 2, 3, 6, 6, 6, 7, 36, 36,
	37, 37, 38, 38, 39, 39, 40, 40, 41, 41,
	8, 10, 14, 14, 14, 14, 12, 17, 17, 18,
	18, 18, 21, 21, 21, 21, 21, 21, 21, 21,
	89, 89, 19, 19, 52, 51, 51, 50, 50, 50,
	50, 50, 50, 53, 53, 53, 13, 13, 13, 13,
	16, 16, 16, 25, 25, 20, 20, 20, 22, 22,
	22, 48, 48, 23, 23, 24, 24, 24, 49, 49,
	42, 42, 43, 43, 44, 44, 45, 45, 46, 46,
	47, 47, 35, 35, 35, 15, 11, 11, 9, 58,
	58, 57, 68, 68, 67, 67, 66, 66, 66, 66,
	66, 55, 55, 59, 59, 60, 60, 61, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	79, 79, 77, 77, 75, 75, 75, 78, 78, 76,
	76, 76, 26, 26, 71, 71, 73, 73, 72, 72,
	74, 74, 69, 69, 70, 70, 80, 83, 83, 82,
	82, 81, 81, 81, 81, 84, 84, 62, 65, 65,
	64, 64, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 54, 54, 54, 54, 85, 88,
	88, 87, 87, 86, 86, 86, 86, 56, 56, 56,
	56, 90, 93, 93, 92, 92, 91, 91, 91, 94,
	94, 98, 98, 97, 97, 96, 96, 95, 95, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27,
}

var protoR2 = [...]int8{
	0, 1, 1, 1, 2, 2, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 0, 4, 4, 3, 4, 4, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	5, 5, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 1, 2, 2,
	1, 2, 3, 2, 1, 1, 2, 1, 2, 2,
	2, 2, 1, 3, 2, 3, 1, 3, 5, 3,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 2,
	3, 1, 3, 1, 1, 3, 2, 3, 1, 3,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 3, 1, 3, 3, 8,
	9, 5, 0, 1, 2, 1, 1, 1, 1, 2,
	1, 5, 6, 7, 8, 5, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 1, 3, 1, 3, 3, 1, 3, 1,
	3, 3, 1, 2, 3, 1, 3, 1, 3, 3,
	3, 3, 1, 3, 1, 3, 5, 0, 1, 2,
	1, 1, 1, 1, 1, 4, 5, 5, 0, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 7, 5, 6, 5, 0,
	1, 2, 1, 1, 1, 2, 1, 6, 7, 5,
	6, 5, 1, 2, 2, 1, 1, 1, 1, 6,
	9, 4, 3, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var protoChk = [...]int16{
	-1000, -1, -2, -3, -5, 8, 9, -4, -6, -7,
	-8, -62, -80, -85, -90, 53, 2, 10, 13, 14,
	45, 44, 46, 47, -5, -5, -4, 52, 52, -89,
	11, 12, 4, -36, -27, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, -14,
	-27, -12, 66, -27, -27, -42, -36, 60, -27, -89,
	-89, 53, 4, -89, -89, 53, 60, 52, 60, -42,
	55, 55, 55, -36, 55, 53, 53, 53, 53, -27,
	-17, -18, -19, -89, -21, -27, 55, 6, 65, 64,
	5, -27, -12, 67, -65, -64, -63, -54, -80, -62,
	-85, -79, -58, -8, -57, -60, -71, 53, 2, -35,
	-43, 40, 38, -61, 43, -72, 21, 20, 19, -37,
	60, 39, -29, 7, 8, 9, 10, 11, 12, 13,
	15, 16, 17, 18, 22, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 41,
	42, 47, 48, 49, 50, -83, -82, -81, -10, -84,
	-73, 2, 14, -34, 43, -74, 7, 8, 9, 10,
	11, 12, 13, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 44, 45, 46, 47, 48, 49, 50, -88, -87,
	-86, -56, -58, 2, -35, -44, -38, 60, -30, 7,
	8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, -93,
	-99, -100, 53, 53, -52, 56, -51, -50, -53, 2,
	-13, -27, 68, 6, 17, 5, 6, 17, 5, 56,
	-63, 37, -46, -40, 60, -32, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, -27,
	-77, -75, 5, -27, -27, -77, -69, -70, -89, -27,
	60, -36, 63, 56, -81, -14, 52, -78, -69, -70,
	-76, -26, 5, 65, 56, -86, 53, -46, -27, 60,
	-36, 56, -92, -91, -10, -94, 2, 48, 53, 56,
	-51, 61, 53, 61, 53, 54, 54, -25, -20, -24,
	-19, 63, 68, -36, 2, -27, -27, 60, -36, 52,
	53, -15, 61, 68, 41, 55, 52, 53, 53, 61,
	53, 61, -27, -28, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 52, -26, 61, -99,
	-99, -99, 41, 5, -27, 52, -27, -91, -27, -16,
	-18, -20, -22, 68, -16, -52, 62, -49, 69, 2,
	-20, 69, 58, 69, 52, 52, -27, 5, 53, -75,
	-11, -9, -14, 5, 42, -68, -67, -66, -8, -55,
	-59, 2, -45, 37, -39, 60, -31, 7, 8, 9,
	10, 11, 12, 13, 15, 16, 17, 18, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 5, -89, -27, 61,
	-17, -99, -15, -76, -26, 42, 52, 5, -98, 66,
	-48, 69, 2, -23, -18, -20, 62, 69, 61, 69,
	-36, 5, 5, 53, -15, 69, 61, 52, 56, -66,
	53, -27, -27, 60, -36, 53, -15, -42, -99, -99,
	5, 53, -15, 50, 49, -47, -41, 60, -33, 7,
	8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 50, 69, 61, 69, -20, 69, 55, -15, 53,
	-15, 53, -9, -17, 52, 52, -27, 53, 62, 53,
	-15, 53, -98, -42, 67, 60, -36, -23, -65, 55,
	53, 5, 5, 53, -99, 55, 67, -27, 56, -65,
	53, -15, 55, -15, -97, -99, 56, 53, -65, 55,
	56, -96, -95, -10, 2, 56, -65, -99, -95, 56,
}

var protoDef = [...]int16{
	-2, -2, -2, -2, -2, 0, 0, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 0, 0, 0,
	0, 0, 0, 0, -2, -2, 7, 0, 0, 0,
	0, 0, 60, 0, 28, 479, 480, 481, 482, 483,
	484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
	494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 0,
	42, 44, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 24, 61, 0, 0, 27, 0, 0, 0, 0,
	-2, -2, -2, 101, 21, 22, 23, 25, 26, 29,
	0, 47, 48, 49, 50, 51, 0, 52, 0, 0,
	57, 43, 45, 46, 0, -2, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 0,
	0, 0, 0, 0, 0, 165, 112, 113, 114, 102,
	0, 265, 30, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 266,
	267, 268, 269, 270, 271, 0, -2, 180, 181, 182,
	183, 184, 0, 0, 0, 167, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 352, 353, 0, -2,
	212, 213, 214, 216, 0, 0, 104, 0, 32, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 0,
	-2, 20, 18, 40, 0, 63, 64, -2, 67, 72,
	0, 76, 0, 53, 56, 59, 54, 55, 58, 187,
	190, 0, 0, 108, 0, 36, 393, 394, 395, 396,
	397, 398, 399, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 423, 424, 425, 426,
	427, 428, 429, 430, 431, 432, 433, 434, 435, 0,
	0, 152, 154, 0, 0, 0, 0, 0, 172, 174,
	0, 103, 0, 176, 179, 0, 0, 21, 21, 21,
	157, 159, 162, 0, 208, 211, 215, 0, 0, 0,
	105, 221, -2, 225, 226, 227, 228, 0, 19, 62,
	66, 68, 69, 70, 71, 0, 0, 74, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	150, 0, 0, 0, 0, -2, 0, 164, 168, 0,
	169, 0, 31, 0, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 0, 21, 0, 166,
	170, 171, 0, 163, 0, 0, 33, 224, 0, 75,
	80, 81, 82, 0, 73, 0, 87, 0, 96, 0,
	98, 77, 0, 79, 0, 0, 37, 0, 151, 153,
	0, 116, 0, 155, 156, 0, -2, 125, 126, 127,
	128, 130, 0, 0, 106, 0, 34, 354, 355, 356,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 392, 0, 173, 175, 0,
	21, 185, 21, 158, 160, 161, 0, 0, 0, 0,
	0, 89, 0, 91, 93, 94, 86, 95, 0, 97,
	0, 0, 0, 206, 0, 115, 0, 0, 121, 124,
	129, 0, 0, 0, 107, 135, 0, 0, 41, 186,
	0, 219, 0, 0, 0, 0, 110, 0, 38, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 470, 471, 472, 473, 474, 475, 476,
	477, 478, 88, 0, 90, 99, 78, -2, 0, 204,
	0, 207, 117, 118, 0, 0, 35, 136, 137, 217,
	0, 220, 21, 0, 232, 0, 111, 92, 0, -2,
	205, 0, 0, 218, 229, 21, 231, 39, 119, 0,
	131, 0, -2, 0, 0, -2, 120, 132, 0, -2,
	21, -2, 236, 237, 238, 133, 0, 230, 235, 134,
}

var protoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 75, 74, 73, 71, 3,
	66, 67, 70, 64, 61, 65, 60, 58, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 54, 53,
	63, 52, 62, 59, 76, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 68, 57, 69, 72, 3, 79, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 3, 56, 78,
}

var protoTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
}

var protoTok3 = [...]int8{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(protoPact[state])
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && int(protoChk[int(protoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || int(protoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := int(protoExca[i])
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(protoTok1[0])
		goto out
	}
	if char < len(protoTok1) {
		token = int(protoTok1[char])
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = int(protoTok2[char-protoPrivate])
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = int(protoTok3[i+0])
		if token == char {
			token = int(protoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(protoTok2[1]) /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = int(protoPact[protostate])
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = int(protoAct[proton])
	if int(protoChk[proton]) == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = int(protoDef[protostate])
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && int(protoExca[xi+1]) == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = int(protoExca[xi+0])
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = int(protoExca[xi+1])
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = int(protoPact[protoS[protop].yys]) + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = int(protoAct[proton]) /* simulate a shift of "error" */
					if int(protoChk[protostate]) == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= int(protoR2[proton])
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = int(protoR1[proton])
	protog := int(protoPgo[proton])
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = int(protoAct[protog])
	} else {
		protostate = int(protoAct[protoj])
		if int(protoChk[protostate]) != -proton {
			protostate = int(protoAct[protog])
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, protoDollar[1].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, protoDollar[2].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 5:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, protoDollar[2].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 6:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 7:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].fileElement != nil {
				protoVAL.fileElements = append(protoDollar[1].fileElements, protoDollar[2].fileElement)
			} else {
				protoVAL.fileElements = protoDollar[1].fileElements
			}
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].fileElement != nil {
				protoVAL.fileElements = []ast.FileElement{protoDollar[1].fileElement}
			} else {
				protoVAL.fileElements = nil
			}
		}
	case 9:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].imprt
		}
	case 10:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].pkg
		}
	case 11:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].opt
		}
	case 12:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].msg
		}
	case 13:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].en
		}
	case 14:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].extend
		}
	case 15:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].svc
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 17:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = nil
		}
	case 18:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.bs = []*ast.RuneNode{protoDollar[1].b}
		}
	case 19:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.bs = append(protoDollar[1].bs, protoDollar[2].b)
		}
	case 20:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.bs = protoDollar[1].bs
		}
	case 21:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.bs = nil
		}
	case 22:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.syn = ast.NewSyntaxNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, toStringValueNode(protoDollar[3].str), protoDollar[4].b)
		}
	case 23:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ed = ast.NewEditionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, toStringValueNode(protoDollar[3].str), protoDollar[4].b)
		}
	case 24:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, nil, toStringValueNode(protoDollar[2].str), protoDollar[3].b)
		}
	case 25:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, protoDollar[2].id.ToKeyword(), toStringValueNode(protoDollar[3].str), protoDollar[4].b)
		}
	case 26:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), nil, toStringValueNode(protoDollar[3].str), protoDollar[4].b)
		}
	case 27:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.pkg = ast.NewPackageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b)
		}
	case 28:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 29:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 30:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 31:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 32:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 33:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 34:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 35:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 36:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 37:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 38:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 39:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 40:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[2].optNms.refs, protoDollar[2].optNms.dots)
			protoVAL.opt = ast.NewOptionNode(protoDollar[1].id.ToKeyword(), optName, protoDollar[3].b, protoDollar[4].v, protoDollar[5].b)
		}
	case 41:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[2].optNms.refs, protoDollar[2].optNms.dots)
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[5].bs)
			protoVAL.optN = newNodeWithEmptyDecls(ast.NewOptionNode(protoDollar[1].id.ToKeyword(), optName, protoDollar[3].b, protoDollar[4].v, semi), extra)
		}
	case 42:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			fieldReferenceNode := ast.NewFieldReferenceNode(protoDollar[1].id)
			protoVAL.optNms = &fieldRefSlices{refs: []*ast.FieldReferenceNode{fieldReferenceNode}}
		}
	case 43:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].optNms.refs = append(protoDollar[1].optNms.refs, ast.NewFieldReferenceNode(protoDollar[3].id))
			protoDollar[1].optNms.dots = append(protoDollar[1].optNms.dots, protoDollar[2].b)
			protoVAL.optNms = protoDollar[1].optNms
		}
	case 44:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optNms = &fieldRefSlices{refs: []*ast.FieldReferenceNode{protoDollar[1].ref}}
		}
	case 45:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].optNms.refs = append(protoDollar[1].optNms.refs, protoDollar[3].ref)
			protoDollar[1].optNms.dots = append(protoDollar[1].optNms.dots, protoDollar[2].b)
			protoVAL.optNms = protoDollar[1].optNms
		}
	case 46:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].tid, protoDollar[3].b)
		}
	case 49:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = toStringValueNode(protoDollar[1].str)
		}
	case 51:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id
		}
	case 52:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].f
		}
	case 53:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 54:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 55:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 56:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 57:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].i
		}
	case 58:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewPositiveUintLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 59:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].i.Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].i)
			} else {
				protoVAL.v = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
			}
		}
	case 60:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.str = []*ast.StringLiteralNode{protoDollar[1].s}
		}
	case 61:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.str = append(protoDollar[1].str, protoDollar[2].s)
		}
	case 62:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 63:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 66:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFlds != nil {
				protoDollar[1].msgLitFlds.next = protoDollar[2].msgLitFlds
				protoVAL.msgLitFlds = protoDollar[1].msgLitFlds
			} else {
				protoVAL.msgLitFlds = protoDollar[2].msgLitFlds
			}
		}
	case 67:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 68:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 69:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 70:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 71:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 72:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 73:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].b != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, protoDollar[3].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 74:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].v != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, nil, protoDollar[2].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 75:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.msgLitFld = nil
		}
	case 76:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 77:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b)
		}
	case 78:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.ref = ast.NewAnyTypeReferenceNode(protoDollar[1].b, protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b, protoDollar[4].cid.toIdentValueNode(nil), protoDollar[5].b)
		}
	case 79:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = nil
		}
	case 86:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 87:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 88:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[3].b)
			}
		}
	case 89:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 90:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 91:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 92:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 95:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[3].b)
			}
		}
	case 96:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 97:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 98:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 99:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 100:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 101:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 102:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 103:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 104:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 105:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 106:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 107:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 108:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 109:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 110:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 111:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 115:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, protoDollar[2].opts.options, protoDollar[2].opts.commas, protoDollar[3].b)
		}
	case 116:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{protoDollar[1].opt}}
		}
	case 117:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].opts.options = append(protoDollar[1].opts.options, protoDollar[3].opt)
			protoDollar[1].opts.commas = append(protoDollar[1].opts.commas, protoDollar[2].b)
			protoVAL.opts = protoDollar[1].opts
		}
	case 118:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[1].optNms.refs, protoDollar[1].optNms.dots)
			protoVAL.opt = ast.NewCompactOptionNode(optName, protoDollar[2].b, protoDollar[3].v)
		}
	case 119:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 120:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b, protoDollar[8].msgElements, protoDollar[9].b)
		}
	case 121:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.oo = ast.NewOneofNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].ooElements, protoDollar[5].b)
		}
	case 122:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.ooElements = nil
		}
	case 124:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].ooElement != nil {
				protoVAL.ooElements = append(protoDollar[1].ooElements, protoDollar[2].ooElement)
			} else {
				protoVAL.ooElements = protoDollar[1].ooElements
			}
		}
	case 125:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].ooElement != nil {
				protoVAL.ooElements = []ast.OneofElement{protoDollar[1].ooElement}
			} else {
				protoVAL.ooElements = nil
			}
		}
	case 126:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].opt
		}
	case 127:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].fld
		}
	case 128:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].grp
		}
	case 129:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 130:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 131:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 132:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 133:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b, protoDollar[6].msgElements, protoDollar[7].b)
		}
	case 134:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 135:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 136:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 137:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mapType = ast.NewMapTypeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].id, protoDollar[4].b, protoDollar[5].tid, protoDollar[6].b)
		}
	case 150:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, nil, protoDollar[3].b)
		}
	case 151:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[3].cmpctOpts, protoDollar[4].b)
		}
	case 152:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 153:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 154:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, nil, nil, nil)
		}
	case 155:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), protoDollar[3].i, nil)
		}
	case 156:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 157:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 158:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 159:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, nil, nil, nil)
		}
	case 160:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), protoDollar[3].il, nil)
		}
	case 161:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 162:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.il = protoDollar[1].i
		}
	case 163:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.il = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 164:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[3].b)
		}
	case 166:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[3].bs)
			protoVAL.resvdN = newNodeWithEmptyDecls(ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, semi), extra)
		}
	case 168:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.resvd = ast.NewReservedNamesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.names, protoDollar[2].names.commas, protoDollar[3].b)
		}
	case 169:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.resvd = ast.NewReservedIdentifiersNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.idents, protoDollar[2].names.commas, protoDollar[3].b)
		}
	case 170:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[3].bs)
			protoVAL.resvdN = newNodeWithEmptyDecls(ast.NewReservedNamesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.names, protoDollar[2].names.commas, semi), extra)
		}
	case 171:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[3].bs)
			protoVAL.resvdN = newNodeWithEmptyDecls(ast.NewReservedIdentifiersNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.idents, protoDollar[2].names.commas, semi), extra)
		}
	case 172:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{names: []ast.StringValueNode{toStringValueNode(protoDollar[1].str)}}
		}
	case 173:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.names = append(protoDollar[1].names.names, toStringValueNode(protoDollar[3].str))
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 174:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 175:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.idents = append(protoDollar[1].names.idents, protoDollar[3].id)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 176:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.en = ast.NewEnumNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].enElements, protoDollar[5].b)
		}
	case 177:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.enElements = nil
		}
	case 179:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.enElements = append(protoDollar[1].enElements, protoDollar[2].enElements...)
		}
	case 180:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = protoDollar[1].enElements
		}
	case 181:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = toEnumElements(protoDollar[1].optN)
		}
	case 182:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = toEnumElements(protoDollar[1].env)
		}
	case 183:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = toEnumElements(protoDollar[1].resvdN)
		}
	case 184:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElements = nil
		}
	case 185:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[4].bs)
			protoVAL.env = newNodeWithEmptyDecls(ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, nil, semi), extra)
		}
	case 186:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[5].bs)
			protoVAL.env = newNodeWithEmptyDecls(ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, protoDollar[4].cmpctOpts, semi), extra)
		}
	case 187:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msg = ast.NewMessageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].msgElements, protoDollar[5].b)
		}
	case 188:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.msgElements = nil
		}
	case 190:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].msgElement != nil {
				protoVAL.msgElements = append(protoDollar[1].msgElements, protoDollar[2].msgElement)
			} else {
				protoVAL.msgElements = protoDollar[1].msgElements
			}
		}
	case 191:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgElement != nil {
				protoVAL.msgElements = []ast.MessageElement{protoDollar[1].msgElement}
			} else {
				protoVAL.msgElements = nil
			}
		}
	case 192:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].fld
		}
	case 193:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].en
		}
	case 194:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].msg
		}
	case 195:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].extend
		}
	case 196:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].ext
		}
	case 197:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].grp
		}
	case 198:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].opt
		}
	case 199:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].oo
		}
	case 200:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].mapFld
		}
	case 201:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].resvd
		}
	case 202:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 203:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = nil
		}
	case 204:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 205:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 206:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 207:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 208:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.extend = ast.NewExtendNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].b, protoDollar[4].extElements, protoDollar[5].b)
		}
	case 209:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.extElements = nil
		}
	case 211:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].extElement != nil {
				protoVAL.extElements = append(protoDollar[1].extElements, protoDollar[2].extElement)
			} else {
				protoVAL.extElements = protoDollar[1].extElements
			}
		}
	case 212:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].extElement != nil {
				protoVAL.extElements = []ast.ExtendElement{protoDollar[1].extElement}
			} else {
				protoVAL.extElements = nil
			}
		}
	case 213:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = protoDollar[1].fld
		}
	case 214:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = protoDollar[1].grp
		}
	case 215:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 216:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 217:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 218:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 219:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 220:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 221:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.svc = ast.NewServiceNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].svcElements, protoDollar[5].b)
		}
	case 222:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElements = newServiceElements(protoDollar[1].bs, nil)
		}
	case 223:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.svcElements = newServiceElements(protoDollar[1].bs, protoDollar[2].svcElements)
		}
	case 224:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.svcElements = append(protoDollar[1].svcElements, protoDollar[2].svcElements...)
		}
	case 225:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElements = protoDollar[1].svcElements
		}
	case 226:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElements = toServiceElements(protoDollar[1].optN)
		}
	case 227:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElements = toServiceElements(protoDollar[1].mtd)
		}
	case 228:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElements = nil
		}
	case 229:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			semi, extra := protolex.(*protoLex).requireSemicolon(protoDollar[6].bs)
			protoVAL.mtd = newNodeWithEmptyDecls(ast.NewRPCNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType, semi), extra)
		}
	case 230:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.mtd = newNodeWithEmptyDecls(ast.NewRPCNodeWithBody(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType, protoDollar[6].b, protoDollar[7].mtdElements, protoDollar[8].b), protoDollar[9].bs)
		}
	case 231:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, protoDollar[2].id.ToKeyword(), protoDollar[3].tid, protoDollar[4].b)
		}
	case 232:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, nil, protoDollar[2].tid, protoDollar[3].b)
		}
	case 233:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElements = newMethodElements(protoDollar[1].bs, nil)
		}
	case 234:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.mtdElements = newMethodElements(protoDollar[1].bs, protoDollar[2].mtdElements)
		}
	case 235:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.mtdElements = append(protoDollar[1].mtdElements, protoDollar[2].mtdElements...)
		}
	case 236:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElements = protoDollar[1].mtdElements
		}
	case 237:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElements = toMethodElements(protoDollar[1].optN)
		}
	case 238:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElements = nil
		}
	}
	goto protostack /* stack new state and value */
}
