// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import (
	__yyfmt__ "fmt"
	"math"

	"github.com/bufbuild/protocompile/ast"
) //lint:file-ignore SA4006 generated parser has unused values

type protoSymType struct {
	yys       int
	file      *ast.FileNode
	syn       *ast.SyntaxNode
	fileDecl  ast.FileElement
	fileDecls []ast.FileElement
	pkg       *ast.PackageNode
	imprt     *ast.ImportNode
	msg       *ast.MessageNode
	msgDecl   ast.MessageElement
	msgDecls  []ast.MessageElement
	fld       *ast.FieldNode
	mapFld    *ast.MapFieldNode
	mapType   *ast.MapTypeNode
	grp       *ast.GroupNode
	oo        *ast.OneOfNode
	ooDecl    ast.OneOfElement
	ooDecls   []ast.OneOfElement
	ext       *ast.ExtensionRangeNode
	resvd     *ast.ReservedNode
	en        *ast.EnumNode
	enDecl    ast.EnumElement
	enDecls   []ast.EnumElement
	env       *ast.EnumValueNode
	extend    *ast.ExtendNode
	extDecl   ast.ExtendElement
	extDecls  []ast.ExtendElement
	svc       *ast.ServiceNode
	svcDecl   ast.ServiceElement
	svcDecls  []ast.ServiceElement
	mtd       *ast.RPCNode
	rpcType   *ast.RPCTypeNode
	rpcDecl   ast.RPCElement
	rpcDecls  []ast.RPCElement
	opt       *ast.OptionNode
	opts      *compactOptionList
	ref       *ast.FieldReferenceNode
	optNms    *fieldRefList
	cmpctOpts *ast.CompactOptionsNode
	rng       *ast.RangeNode
	rngs      *rangeList
	names     *nameList
	cid       *identList
	tid       ast.IdentValueNode
	sl        *valueList
	msgField  *ast.MessageFieldNode
	msgEntry  *messageFieldEntry
	msgLit    *messageFieldList
	v         ast.ValueNode
	il        ast.IntValueNode
	str       *stringList
	s         *ast.StringLiteralNode
	i         *ast.UintLiteralNode
	f         *ast.FloatLiteralNode
	id        *ast.IdentNode
	b         *ast.RuneNode
	err       error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _NAME = 57349
const _SYNTAX = 57350
const _IMPORT = 57351
const _WEAK = 57352
const _PUBLIC = 57353
const _PACKAGE = 57354
const _OPTION = 57355
const _TRUE = 57356
const _FALSE = 57357
const _INF = 57358
const _NAN = 57359
const _REPEATED = 57360
const _OPTIONAL = 57361
const _REQUIRED = 57362
const _DOUBLE = 57363
const _FLOAT = 57364
const _INT32 = 57365
const _INT64 = 57366
const _UINT32 = 57367
const _UINT64 = 57368
const _SINT32 = 57369
const _SINT64 = 57370
const _FIXED32 = 57371
const _FIXED64 = 57372
const _SFIXED32 = 57373
const _SFIXED64 = 57374
const _BOOL = 57375
const _STRING = 57376
const _BYTES = 57377
const _GROUP = 57378
const _ONEOF = 57379
const _MAP = 57380
const _EXTENSIONS = 57381
const _TO = 57382
const _MAX = 57383
const _RESERVED = 57384
const _ENUM = 57385
const _MESSAGE = 57386
const _EXTEND = 57387
const _SERVICE = 57388
const _RPC = 57389
const _STREAM = 57390
const _RETURNS = 57391
const _ERROR = 57392

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_NAME",
	"_SYNTAX",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"'.'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int16{
	-1, 0,
	1, 4,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	-2, 0,
	-1, 3,
	1, 2,
	-2, 0,
	-1, 22,
	1, 3,
	-2, 0,
	-1, 95,
	55, 185,
	-2, 0,
	-1, 96,
	55, 173,
	-2, 0,
	-1, 97,
	55, 202,
	-2, 0,
	-1, 99,
	55, 211,
	-2, 0,
	-1, 110,
	55, 54,
	-2, 0,
	-1, 290,
	55, 52,
	61, 52,
	-2, 0,
	-1, 355,
	61, 54,
	-2, 0,
	-1, 371,
	55, 123,
	-2, 0,
	-1, 405,
	61, 54,
	-2, 0,
	-1, 410,
	61, 54,
	-2, 0,
	-1, 498,
	61, 54,
	-2, 0,
	-1, 546,
	55, 185,
	-2, 0,
	-1, 550,
	55, 185,
	-2, 0,
	-1, 554,
	55, 185,
	-2, 0,
	-1, 572,
	55, 223,
	-2, 0,
	-1, 579,
	55, 185,
	-2, 0,
	-1, 582,
	55, 185,
	-2, 0,
	-1, 585,
	55, 185,
	-2, 0,
	-1, 606,
	55, 185,
	-2, 0,
	-1, 618,
	55, 185,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 2456

var protoAct = [...]int16{
	31, 118, 117, 125, 8, 106, 8, 8, 497, 495,
	592, 423, 367, 412, 400, 407, 81, 430, 77, 79,
	80, 82, 84, 328, 317, 107, 8, 326, 311, 409,
	105, 281, 139, 124, 228, 177, 408, 604, 30, 425,
	537, 26, 352, 110, 568, 606, 566, 564, 552, 536,
	85, 355, 368, 87, 88, 89, 353, 75, 368, 368,
	554, 368, 368, 368, 550, 548, 546, 544, 531, 524,
	514, 512, 501, 368, 482, 500, 414, 368, 597, 368,
	368, 329, 368, 368, 368, 401, 368, 573, 110, 368,
	535, 413, 366, 109, 77, 94, 410, 29, 329, 116,
	178, 104, 406, 282, 320, 98, 329, 368, 110, 575,
	563, 293, 347, 103, 347, 596, 410, 486, 347, 302,
	346, 576, 346, 543, 288, 505, 346, 541, 538, 185,
	515, 230, 502, 115, 347, 310, 347, 314, 315, 345,
	330, 481, 346, 504, 346, 392, 347, 351, 304, 306,
	308, 375, 369, 344, 346, 350, 523, 330, 285, 339,
	618, 321, 93, 319, 318, 330, 91, 316, 571, 17,
	572, 585, 14, 582, 595, 595, 579, 14, 4, 15,
	178, 285, 16, 17, 15, 17, 17, 16, 17, 371,
	99, 97, 17, 96, 95, 616, 610, 590, 589, 588,
	583, 580, 577, 286, 570, 562, 556, 527, 284, 185,
	318, 340, 323, 19, 18, 20, 21, 519, 19, 18,
	20, 21, 13, 422, 594, 594, 286, 13, 608, 391,
	374, 284, 373, 342, 333, 324, 303, 337, 287, 102,
	101, 100, 90, 86, 25, 560, 559, 516, 489, 488,
	334, 335, 336, 487, 420, 419, 418, 417, 416, 415,
	338, 230, 332, 398, 372, 365, 325, 92, 24, 491,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 427, 393, 282, 370, 587, 343, 300, 298,
	5, 293, 122, 11, 23, 11, 11, 586, 356, 299,
	29, 313, 530, 529, 348, 359, 360, 361, 362, 363,
	364, 357, 341, 23, 528, 11, 120, 10, 428, 10,
	10, 511, 354, 121, 9, 29, 9, 9, 510, 297,
	295, 27, 28, 509, 508, 395, 396, 397, 507, 10,
	296, 506, 490, 389, 479, 313, 9, 421, 394, 390,
	29, 3, 283, 109, 22, 280, 293, 12, 356, 356,
	227, 399, 179, 176, 123, 327, 312, 180, 128, 77,
	429, 137, 127, 433, 126, 431, 229, 432, 119, 290,
	291, 436, 404, 402, 236, 134, 438, 237, 140, 183,
	440, 239, 143, 376, 108, 292, 76, 591, 426, 424,
	480, 318, 7, 483, 109, 6, 293, 2, 1, 0,
	0, 293, 0, 0, 0, 0, 0, 485, 493, 0,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 431, 513, 0, 0, 520, 521, 0,
	0, 0, 0, 435, 0, 0, 0, 518, 441, 442,
	443, 444, 445, 446, 17, 447, 448, 449, 450, 0,
	0, 522, 451, 452, 453, 454, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 437, 466, 467,
	468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
	478, 0, 525, 434, 0, 0, 517, 0, 526, 293,
	439, 0, 0, 532, 0, 0, 533, 0, 356, 534,
	0, 0, 539, 0, 0, 0, 77, 109, 542, 545,
	547, 549, 551, 553, 555, 558, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 565, 567, 569, 0, 561, 0, 0, 574, 578,
	0, 0, 0, 581, 0, 0, 0, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 593, 0, 0, 0,
	302, 0, 599, 302, 0, 601, 302, 0, 603, 0,
	0, 0, 0, 0, 0, 593, 0, 109, 109, 605,
	607, 302, 609, 302, 0, 302, 611, 612, 0, 617,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 620, 302, 496, 0, 29, 114, 111, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 498, 113, 112, 0, 0, 0, 494,
	29, 114, 111, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 405, 113,
	112, 0, 0, 403, 29, 114, 111, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 498, 113, 112, 29, 114, 111, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 540, 0, 0, 113, 112, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 503, 0, 0, 0, 294, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 499, 0, 0, 0, 294, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 0, 294, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 0, 0, 0, 294,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	294, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	78, 144, 145, 146, 147, 148, 149, 17, 150, 151,
	152, 153, 133, 132, 131, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 136, 142, 135, 170, 171, 138, 19, 18, 20,
	172, 173, 174, 175, 0, 0, 129, 0, 0, 621,
	130, 0, 0, 141, 0, 144, 145, 146, 147, 148,
	149, 17, 150, 151, 152, 153, 133, 132, 131, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 136, 142, 135, 170, 171,
	138, 19, 18, 20, 172, 173, 174, 175, 0, 0,
	129, 0, 0, 619, 130, 0, 0, 141, 0, 144,
	145, 146, 147, 148, 149, 17, 150, 151, 152, 153,
	133, 132, 131, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 136,
	142, 135, 170, 171, 138, 19, 18, 20, 172, 173,
	174, 175, 0, 0, 129, 0, 0, 615, 130, 0,
	0, 141, 0, 144, 145, 146, 147, 148, 149, 17,
	150, 151, 152, 153, 133, 132, 131, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 136, 142, 135, 170, 171, 138, 19,
	18, 20, 172, 173, 174, 175, 0, 0, 129, 0,
	0, 614, 130, 0, 0, 141, 0, 144, 145, 146,
	147, 148, 149, 17, 150, 151, 152, 153, 133, 132,
	131, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 136, 142, 135,
	170, 171, 138, 19, 18, 20, 172, 173, 174, 175,
	0, 0, 129, 0, 0, 613, 130, 0, 0, 141,
	0, 144, 145, 146, 147, 148, 149, 17, 150, 151,
	152, 153, 133, 132, 131, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 136, 142, 135, 170, 171, 138, 19, 18, 20,
	172, 173, 174, 175, 0, 0, 129, 0, 0, 602,
	130, 0, 0, 141, 0, 144, 145, 146, 147, 148,
	149, 17, 150, 151, 152, 153, 133, 132, 131, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 136, 142, 135, 170, 171,
	138, 19, 18, 20, 172, 173, 174, 175, 0, 0,
	129, 0, 0, 600, 130, 0, 0, 141, 0, 144,
	145, 146, 147, 148, 149, 17, 150, 151, 152, 153,
	133, 132, 131, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 136,
	142, 135, 170, 171, 138, 19, 18, 20, 172, 173,
	174, 175, 0, 0, 129, 0, 0, 598, 232, 0,
	0, 141, 0, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 235, 234, 233, 251, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 231, 0,
	0, 331, 130, 0, 0, 238, 0, 144, 145, 146,
	147, 148, 149, 17, 150, 151, 152, 153, 133, 132,
	131, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 136, 142, 135,
	170, 171, 138, 19, 18, 20, 172, 173, 174, 175,
	0, 0, 129, 0, 0, 301, 130, 0, 0, 141,
	0, 144, 145, 146, 147, 148, 149, 17, 150, 151,
	152, 153, 133, 132, 131, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 136, 142, 135, 170, 171, 138, 19, 18, 20,
	172, 173, 174, 175, 0, 0, 129, 0, 0, 232,
	0, 0, 0, 141, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 235, 234, 233, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 231,
	0, 0, 358, 0, 0, 0, 238, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 492, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 309, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 307, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 305, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 0, 0, 0, 0, 0,
	435, 0, 0, 0, 83, 441, 442, 443, 444, 445,
	446, 17, 447, 448, 449, 450, 0, 0, 0, 451,
	452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 463, 464, 465, 437, 466, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 476, 477, 478, 0, 0,
	434, 0, 0, 182, 0, 0, 0, 439, 186, 187,
	188, 189, 190, 191, 17, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 184, 220, 221, 222, 223, 224, 225,
	226, 0, 182, 181, 0, 0, 322, 186, 187, 188,
	189, 190, 191, 17, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 184, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 181, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74,
}

var protoPact = [...]int16{
	170, -1000, 175, 175, 217, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 192, 321, 2406, 1235, 2406, 2406,
	1993, 2406, 175, -1000, 346, -1000, 191, 346, 346, 346,
	190, 107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 216, 103, -1000, 1993, 140,
	139, 137, -1000, 2406, 136, 189, -1000, 188, 187, -1000,
	-1000, 2406, 811, 1235, 33, 1834, 2360, 1887, -1000, 179,
	-1000, -1000, -1000, -1000, 186, -1000, -1000, -1000, -1000, -1000,
	1174, -1000, 324, 283, -1000, -1000, -1000, 1780, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	184, 2205, 2152, 2099, 2406, 340, 2406, 2406, 296, -1000,
	-1000, 2406, 42, 102, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2311, -1000, -1000, -1000,
	-1000, -1000, 183, 215, 93, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1726, -1000, -1000,
	-1000, -1000, 182, 2205, 2152, 2099, 2406, -1000, 2406, 100,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	156, -1000, -1000, -1000, -1000, 181, 2406, -1000, 98, 84,
	1113, 95, -11, -1000, 1940, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2406, 2406, 2406, 2406, 2406, 2406,
	214, 40, 92, 245, 135, 213, 180, 178, 91, -1000,
	247, 2406, -1000, -1000, -1000, 101, 177, 85, 243, -1000,
	343, -1000, -1000, -1000, 2406, 2406, 2406, 212, -1000, 2406,
	-1000, -1000, -1000, 20, -1000, -1000, -1000, -1000, -1000, 94,
	-1000, -1000, 686, 34, -1000, 1052, -1000, 23, 8, 208,
	207, 206, 205, 204, 203, 342, -1000, 171, 1235, 340,
	277, 2258, 339, -1000, -1000, 346, 81, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	22, -1000, 101, 76, -1000, 202, 198, 197, 337, -1000,
	220, 2046, -1000, 621, -1000, 991, -1000, 7, 4, 72,
	930, 82, 64, -1000, -1000, 336, 333, 329, 328, 323,
	316, 19, -1000, 2, 70, 196, -1000, -1000, -1000, 441,
	-1000, -1000, -1000, -1000, -1000, 165, 2406, 2406, -1000, 2406,
	97, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17,
	-1000, 1993, -1000, 155, -1000, -1000, -1000, 309, 298, 297,
	16, 20, 1993, 24, -1000, -19, -28, 68, 869, 66,
	-1000, -1000, 54, 62, -1000, -1000, 15, 12, 13, 10,
	-4, 6, -1000, 154, -1000, 1235, 811, -1000, -1000, -1000,
	195, 194, -1000, 2406, -1000, 153, 49, -1000, -5, -6,
	-8, -1000, 152, 116, 21, -1000, -1000, -1000, 750, 48,
	60, -1000, -1000, -1000, -1000, 150, 1834, 122, -1000, 149,
	1834, 119, -1000, 148, 1834, 117, -1000, -1000, -1000, 292,
	281, -1000, -1000, -1000, -1000, 147, -1000, 146, -1000, 145,
	-1000, -1000, 172, -1000, -1000, 55, 18, -1000, 1672, 1834,
	-1000, 1618, 1834, -1000, 1564, 1834, -15, -9, -1000, -1000,
	-1000, 173, -1000, -1000, -1000, 144, 750, 750, -1000, 1510,
	-1000, 1456, -1000, 1402, -1000, 143, 1834, 106, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1348, 1834, -1000,
	1294, -1000,
}

var protoPgo = [...]int16{
	0, 408, 407, 290, 351, 405, 402, 3, 399, 11,
	10, 397, 396, 395, 39, 12, 8, 30, 5, 29,
	394, 23, 0, 393, 392, 391, 390, 389, 21, 388,
	387, 386, 16, 385, 384, 381, 9, 15, 380, 379,
	13, 378, 377, 376, 374, 33, 373, 372, 371, 323,
	1, 2, 17, 370, 24, 368, 367, 32, 366, 365,
	28, 27, 364, 316, 35, 363, 362, 292, 34, 360,
	25, 357, 31, 355, 352, 14,
}

var protoR1 = [...]int8{
	0, 1, 1, 1, 1, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 5, 5,
	5, 6, 28, 28, 29, 29, 30, 30, 31, 31,
	7, 14, 14, 12, 12, 16, 16, 17, 17, 17,
	20, 20, 20, 20, 20, 20, 20, 20, 70, 70,
	18, 18, 40, 40, 40, 39, 39, 39, 39, 39,
	39, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 13, 13, 13, 37, 37, 19, 19, 19,
	36, 36, 36, 36, 36, 36, 32, 32, 33, 33,
	34, 34, 35, 35, 41, 41, 41, 41, 41, 41,
	41, 41, 43, 43, 43, 43, 43, 43, 43, 43,
	15, 9, 9, 8, 45, 45, 45, 45, 45, 45,
	44, 53, 53, 53, 52, 52, 52, 52, 52, 52,
	42, 42, 46, 46, 47, 47, 48, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 62,
	62, 60, 60, 58, 58, 58, 61, 61, 59, 59,
	59, 21, 21, 55, 55, 56, 56, 57, 54, 54,
	63, 65, 65, 65, 64, 64, 64, 64, 64, 64,
	66, 66, 49, 51, 51, 51, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 67,
	69, 69, 69, 68, 68, 68, 68, 68, 71, 73,
	73, 73, 72, 72, 72, 72, 72, 74, 74, 75,
	75, 11, 11, 11, 10, 10, 10, 10, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22,
}

var protoR2 = [...]int8{
	0, 1, 1, 2, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 4, 3, 4,
	4, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 1, 2, 2, 1, 2,
	3, 3, 1, 2, 0, 1, 2, 2, 2, 2,
	1, 3, 3, 4, 4, 5, 5, 4, 3, 2,
	5, 4, 1, 3, 3, 1, 3, 1, 3, 3,
	1, 3, 3, 5, 3, 5, 1, 2, 1, 2,
	1, 2, 1, 2, 6, 6, 6, 7, 7, 7,
	5, 6, 6, 6, 6, 7, 7, 7, 5, 6,
	3, 1, 3, 3, 8, 8, 8, 9, 9, 9,
	5, 2, 1, 0, 1, 1, 1, 1, 2, 1,
	5, 6, 7, 8, 5, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 1, 3, 1, 3, 3, 1, 3, 1, 3,
	3, 1, 2, 3, 1, 3, 1, 3, 1, 3,
	5, 2, 1, 0, 1, 1, 1, 1, 2, 1,
	4, 5, 5, 2, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 5,
	2, 1, 0, 1, 1, 1, 2, 1, 5, 2,
	1, 0, 1, 1, 1, 2, 1, 6, 8, 4,
	3, 2, 1, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var protoChk = [...]int16{
	-1000, -1, -2, -4, 8, -3, -5, -6, -7, -49,
	-63, -67, -71, 52, 2, 9, 12, 13, 44, 43,
	45, 46, -4, -3, 51, 52, -70, 10, 11, 4,
	-28, -22, 7, 8, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, -14, -12, -22, 65, -22,
	-22, -32, -28, 59, -22, -70, 52, -70, -70, -70,
	52, 59, 51, 59, -32, 54, 54, 54, -28, 54,
	52, 52, 52, -28, -16, -17, -18, -70, -20, -22,
	54, 6, 64, 63, 5, -14, 66, -51, -50, -41,
	-63, -49, -67, -62, -45, -7, -44, -47, -55, 52,
	2, 20, 19, 18, -33, 39, 37, -48, 42, -57,
	-29, 59, 38, -24, 7, 8, 9, 10, 11, 12,
	14, 15, 16, 17, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	40, 41, 46, 47, 48, 49, -65, -64, -7, -66,
	-56, 52, 2, -27, 42, -57, 7, 8, 9, 10,
	11, 12, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	43, 44, 45, 46, 47, 48, 49, -69, -68, -43,
	-45, 52, 2, 20, 19, 18, -34, -30, 59, -25,
	7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
	17, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	-73, -72, -7, -74, 52, 2, 47, 52, -40, 2,
	-39, -38, -13, -22, 67, 6, 16, 5, 6, 16,
	5, 55, -50, 52, -32, 36, -32, 36, -32, 36,
	-22, -60, -58, 5, -22, -22, -60, -54, -70, -28,
	62, 59, 55, -64, 52, 51, -61, -59, -21, 5,
	64, 55, -68, 52, -32, -32, -32, -22, -28, 59,
	55, -72, 52, -22, 55, 55, 60, 52, -40, 2,
	60, 52, 53, 67, -19, 62, -18, -32, 2, -22,
	-22, -22, -22, -22, -22, 51, 52, -15, 67, 60,
	40, 54, 51, 52, 52, 60, -23, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, -28,
	-21, 52, 60, 40, 5, -22, -22, -22, 51, -28,
	-75, 65, -17, 67, -19, 62, 68, -37, 2, -19,
	62, 2, -40, 68, 68, 51, 51, 51, 51, 51,
	51, 5, 52, -9, -8, -14, -60, 5, 41, -53,
	-52, -7, -42, -46, 52, 2, -35, 36, -31, 59,
	-26, 7, 8, 9, 10, 11, 12, 14, 15, 16,
	17, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 5,
	-54, 60, 52, -15, -61, -21, 41, 51, 51, 51,
	5, 49, 48, -32, 68, -36, 2, -16, 62, 2,
	68, 68, 60, 2, 61, 61, 5, 5, 5, 5,
	5, 5, 52, -15, 68, 60, 51, 55, -52, 52,
	-22, -22, -28, 59, 52, -15, -32, 52, 5, 5,
	5, 52, -15, -75, -32, 66, 68, 68, 60, -40,
	2, 61, -37, 61, 52, -15, 54, -15, 52, -15,
	54, -15, 52, -15, 54, -15, 52, -9, -16, 51,
	51, -28, 52, 61, 52, -15, 52, -15, 52, -15,
	52, 52, 54, 66, -36, 61, 61, 52, -51, 54,
	52, -51, 54, 52, -51, 54, 5, 5, 52, 52,
	52, -11, -10, -7, 52, 2, 60, 60, 55, -51,
	55, -51, 55, -51, 52, -15, 54, -15, 55, -10,
	52, -36, -36, 55, 55, 55, 52, -51, 54, 55,
	-51, 55,
}

var protoDef = [...]int16{
	-2, -2, -2, -2, 0, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 16, 0, 0, 0, 0, 0,
	0, 0, -2, 5, 0, 15, 0, 0, 0, 48,
	0, 22, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 422, 423, 0, 31, 33, 0, 0,
	0, 0, 86, 0, 0, 0, 18, 0, 0, 49,
	21, 0, 0, 0, 0, -2, -2, -2, 87, -2,
	17, 19, 20, 23, 0, 35, 36, 37, 38, 39,
	-2, 40, 0, 0, 45, 32, 34, 0, 184, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	88, 0, 254, 24, 228, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	255, 256, 257, 258, 259, 260, 0, 172, 174, 175,
	176, 177, 179, 0, 0, 166, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 0, 201, 203,
	204, 205, 207, 0, 0, 0, 0, 90, 0, 26,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
	281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
	0, 210, 212, 213, 214, 216, 0, 30, 0, 60,
	-2, 55, 0, 72, 0, 41, 44, 47, 42, 43,
	46, 182, 183, 197, 0, 410, 0, 410, 0, 410,
	0, 0, 151, 153, 0, 0, 0, 0, 168, 89,
	0, 0, 170, 171, 178, 0, 0, 156, 158, 161,
	0, 199, 200, 206, 0, 0, 0, 0, 91, 0,
	208, 209, 215, 0, 50, 51, 58, 59, 53, 60,
	56, 57, 0, 0, 69, -2, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, -2, 0, 163, 167, 0, 0, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 146, 147, 148, 25,
	0, 165, 0, 0, 162, 0, 0, 0, 0, 27,
	0, 0, 61, 0, 68, -2, 62, 0, 0, 75,
	-2, 60, 0, 73, 74, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 111, 0, 152, 154, 155, 0,
	122, 124, 125, 126, 127, 129, 0, 367, 92, 0,
	28, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 366, 368, 369, 370, 371,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 0,
	169, 0, 180, 0, 157, 159, 160, 0, 0, 0,
	0, 0, 422, 0, 63, 0, 0, 80, -2, 60,
	64, 67, 0, 60, 71, 78, 0, 0, 0, 0,
	0, 0, 100, 0, 110, 0, 0, 120, 121, 128,
	0, 0, 93, 0, 134, 0, 0, 181, 0, 0,
	0, 108, 0, 0, 0, 220, 65, 66, 0, 0,
	60, 70, 76, 79, 94, 0, -2, 0, 95, 0,
	-2, 0, 96, 0, -2, 0, 101, 112, 113, 0,
	0, 29, 135, 136, 102, 0, 103, 0, 104, 0,
	109, 217, -2, 219, 81, 82, 84, 97, 0, -2,
	98, 0, -2, 99, 0, -2, 0, 0, 105, 106,
	107, 0, 222, 224, 225, 227, 0, 0, 114, 0,
	115, 0, 116, 0, 130, 0, -2, 0, 218, 221,
	226, 83, 85, 117, 118, 119, 131, 0, -2, 132,
	0, 133,
}

var protoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 74, 73, 72, 70, 3,
	65, 66, 69, 63, 60, 64, 59, 57, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 53, 52,
	62, 51, 61, 58, 75, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 67, 56, 68, 71, 3, 78, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 54, 3, 55, 77,
}

var protoTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50,
}

var protoTok3 = [...]int8{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(protoPact[state])
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && int(protoChk[int(protoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || int(protoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := int(protoExca[i])
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(protoTok1[0])
		goto out
	}
	if char < len(protoTok1) {
		token = int(protoTok1[char])
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = int(protoTok2[char-protoPrivate])
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = int(protoTok3[i+0])
		if token == char {
			token = int(protoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(protoTok2[1]) /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = int(protoPact[protostate])
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = int(protoAct[proton])
	if int(protoChk[proton]) == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = int(protoDef[protostate])
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && int(protoExca[xi+1]) == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = int(protoExca[xi+0])
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = int(protoExca[xi+1])
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = int(protoPact[protoS[protop].yys]) + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = int(protoAct[proton]) /* simulate a shift of "error" */
					if int(protoChk[protostate]) == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= int(protoR2[proton])
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = int(protoR1[proton])
	protog := int(protoPgo[proton])
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = int(protoAct[protog])
	} else {
		protostate = int(protoAct[protoj])
		if int(protoChk[protostate]) != -proton {
			protostate = int(protoAct[protog])
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, protoDollar[1].fileDecls, lex.eof)
			lex.res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, protoDollar[2].fileDecls, lex.eof)
			lex.res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
		}
	case 5:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].fileDecl != nil {
				protoVAL.fileDecls = append(protoDollar[1].fileDecls, protoDollar[2].fileDecl)
			} else {
				protoVAL.fileDecls = protoDollar[1].fileDecls
			}
		}
	case 6:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].fileDecl != nil {
				protoVAL.fileDecls = []ast.FileElement{protoDollar[1].fileDecl}
			} else {
				protoVAL.fileDecls = nil
			}
		}
	case 7:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileDecl = protoDollar[1].imprt
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileDecl = protoDollar[1].pkg
		}
	case 9:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileDecl = protoDollar[1].opt
		}
	case 10:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileDecl = protoDollar[1].msg
		}
	case 11:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileDecl = protoDollar[1].en
		}
	case 12:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileDecl = protoDollar[1].extend
		}
	case 13:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileDecl = protoDollar[1].svc
		}
	case 14:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileDecl = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 15:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.fileDecl = nil
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileDecl = nil
		}
	case 17:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.syn = ast.NewSyntaxNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].str.toStringValueNode(), protoDollar[4].b)
		}
	case 18:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, nil, protoDollar[2].str.toStringValueNode(), protoDollar[3].b)
		}
	case 19:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, protoDollar[2].id.ToKeyword(), protoDollar[3].str.toStringValueNode(), protoDollar[4].b)
		}
	case 20:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), nil, protoDollar[3].str.toStringValueNode(), protoDollar[4].b)
		}
	case 21:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.pkg = ast.NewPackageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b)
		}
	case 22:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, nil, nil}
		}
	case 23:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, protoDollar[2].b, protoDollar[3].cid}
		}
	case 24:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, nil, nil}
		}
	case 25:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, protoDollar[2].b, protoDollar[3].cid}
		}
	case 26:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, nil, nil}
		}
	case 27:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, protoDollar[2].b, protoDollar[3].cid}
		}
	case 28:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, nil, nil}
		}
	case 29:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, protoDollar[2].b, protoDollar[3].cid}
		}
	case 30:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			refs, dots := protoDollar[2].optNms.toNodes()
			optName := ast.NewOptionNameNode(refs, dots)
			protoVAL.opt = ast.NewOptionNode(protoDollar[1].id.ToKeyword(), optName, protoDollar[3].b, protoDollar[4].v, protoDollar[5].b)
		}
	case 31:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optNms = &fieldRefList{protoDollar[1].ref, nil, nil}
		}
	case 32:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.optNms = &fieldRefList{protoDollar[1].ref, protoDollar[2].b, protoDollar[3].optNms}
		}
	case 33:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 34:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].tid, protoDollar[3].b)
		}
	case 37:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].str.toStringValueNode()
		}
	case 39:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].id.Val == "true" || protoDollar[1].id.Val == "false" {
				protoVAL.v = ast.NewBoolLiteralNode(protoDollar[1].id.ToKeyword())
			} else if protoDollar[1].id.Val == "inf" || protoDollar[1].id.Val == "nan" {
				protoVAL.v = ast.NewSpecialFloatLiteralNode(protoDollar[1].id.ToKeyword())
			} else {
				protoVAL.v = protoDollar[1].id
			}
		}
	case 40:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].f
		}
	case 41:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 42:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 43:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 44:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 45:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].i
		}
	case 46:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewPositiveUintLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 47:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].i.Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].i)
			} else {
				protoVAL.v = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
			}
		}
	case 48:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.str = &stringList{protoDollar[1].s, nil}
		}
	case 49:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.str = &stringList{protoDollar[1].s, protoDollar[2].str}
		}
	case 50:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			fields, delims := protoDollar[2].msgLit.toNodes()
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delims, protoDollar[3].b)
		}
	case 51:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = nil
		}
	case 52:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgEntry != nil {
				protoVAL.msgLit = &messageFieldList{protoDollar[1].msgEntry, nil}
			} else {
				protoVAL.msgLit = nil
			}
		}
	case 53:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgEntry != nil {
				protoVAL.msgLit = &messageFieldList{protoDollar[1].msgEntry, protoDollar[2].msgLit}
			} else {
				protoVAL.msgLit = protoDollar[2].msgLit
			}
		}
	case 54:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.msgLit = nil
		}
	case 55:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgField != nil {
				protoVAL.msgEntry = &messageFieldEntry{protoDollar[1].msgField, nil}
			} else {
				protoVAL.msgEntry = nil
			}
		}
	case 56:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgField != nil {
				protoVAL.msgEntry = &messageFieldEntry{protoDollar[1].msgField, protoDollar[2].b}
			} else {
				protoVAL.msgEntry = nil
			}
		}
	case 57:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgField != nil {
				protoVAL.msgEntry = &messageFieldEntry{protoDollar[1].msgField, protoDollar[2].b}
			} else {
				protoVAL.msgEntry = nil
			}
		}
	case 58:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgEntry = nil
		}
	case 59:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgEntry = nil
		}
	case 60:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgEntry = nil
		}
	case 61:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil {
				protoVAL.msgField = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, protoDollar[3].v)
			} else {
				protoVAL.msgField = nil
			}
		}
	case 62:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil {
				val := ast.NewArrayLiteralNode(protoDollar[2].b, nil, nil, protoDollar[3].b)
				protoVAL.msgField = ast.NewMessageFieldNode(protoDollar[1].ref, nil, val)
			} else {
				protoVAL.msgField = nil
			}
		}
	case 63:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[1].ref != nil {
				val := ast.NewArrayLiteralNode(protoDollar[3].b, nil, nil, protoDollar[4].b)
				protoVAL.msgField = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, val)
			} else {
				protoVAL.msgField = nil
			}
		}
	case 64:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[1].ref != nil {
				vals, commas := protoDollar[3].sl.toNodes()
				val := ast.NewArrayLiteralNode(protoDollar[2].b, vals, commas, protoDollar[4].b)
				protoVAL.msgField = ast.NewMessageFieldNode(protoDollar[1].ref, nil, val)
			} else {
				protoVAL.msgField = nil
			}
		}
	case 65:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[1].ref != nil {
				vals, commas := protoDollar[4].sl.toNodes()
				val := ast.NewArrayLiteralNode(protoDollar[3].b, vals, commas, protoDollar[5].b)
				protoVAL.msgField = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, val)
			} else {
				protoVAL.msgField = nil
			}
		}
	case 66:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msgField = nil
		}
	case 67:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.msgField = nil
		}
	case 68:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[3].v != nil {
				protoVAL.msgField = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, protoDollar[3].v)
			} else {
				protoVAL.msgField = nil
			}
		}
	case 69:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].v != nil {
				protoVAL.msgField = ast.NewMessageFieldNode(protoDollar[1].ref, nil, protoDollar[2].v)
			} else {
				protoVAL.msgField = nil
			}
		}
	case 70:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msgField = nil
		}
	case 71:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.msgField = nil
		}
	case 72:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 73:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].tid, protoDollar[3].b)
		}
	case 74:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = nil
		}
	case 75:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].v == nil {
				protoVAL.sl = nil
			} else {
				protoVAL.sl = &valueList{protoDollar[1].v, nil, nil}
			}
		}
	case 76:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].v == nil {
				protoVAL.sl = nil
			} else {
				protoVAL.sl = &valueList{protoDollar[1].v, protoDollar[2].b, protoDollar[3].sl}
			}
		}
	case 77:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].v
		}
	case 78:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			fields, delims := protoDollar[2].msgLit.toNodes()
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delims, protoDollar[3].b)
		}
	case 79:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = nil
		}
	case 80:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueList{protoDollar[1].v, nil, nil}
		}
	case 81:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.sl = &valueList{protoDollar[1].v, protoDollar[2].b, protoDollar[3].sl}
		}
	case 82:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			fields, delims := protoDollar[2].msgLit.toNodes()
			msg := ast.NewMessageLiteralNode(protoDollar[1].b, fields, delims, protoDollar[3].b)
			protoVAL.sl = &valueList{msg, nil, nil}
		}
	case 83:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			fields, delims := protoDollar[2].msgLit.toNodes()
			msg := ast.NewMessageLiteralNode(protoDollar[1].b, fields, delims, protoDollar[3].b)
			protoVAL.sl = &valueList{msg, protoDollar[4].b, protoDollar[5].sl}
		}
	case 84:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.sl = nil
		}
	case 85:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.sl = protoDollar[5].sl
		}
	case 86:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 87:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 88:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 89:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 90:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 91:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 92:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 93:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 94:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 95:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 96:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 97:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 98:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 99:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 100:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 101:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 102:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 103:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 104:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 105:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 106:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 107:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 108:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 109:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 110:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			opts, commas := protoDollar[2].opts.toNodes()
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, opts, commas, protoDollar[3].b)
		}
	case 111:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opts = &compactOptionList{protoDollar[1].opt, nil, nil}
		}
	case 112:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.opts = &compactOptionList{protoDollar[1].opt, protoDollar[2].b, protoDollar[3].opts}
		}
	case 113:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			refs, dots := protoDollar[1].optNms.toNodes()
			optName := ast.NewOptionNameNode(refs, dots)
			protoVAL.opt = ast.NewCompactOptionNode(optName, protoDollar[2].b, protoDollar[3].v)
		}
	case 114:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgDecls, protoDollar[8].b)
		}
	case 115:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgDecls, protoDollar[8].b)
		}
	case 116:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgDecls, protoDollar[8].b)
		}
	case 117:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b, protoDollar[8].msgDecls, protoDollar[9].b)
		}
	case 118:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b, protoDollar[8].msgDecls, protoDollar[9].b)
		}
	case 119:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b, protoDollar[8].msgDecls, protoDollar[9].b)
		}
	case 120:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.oo = ast.NewOneOfNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].ooDecls, protoDollar[5].b)
		}
	case 121:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].ooDecl != nil {
				protoVAL.ooDecls = append(protoDollar[1].ooDecls, protoDollar[2].ooDecl)
			} else {
				protoVAL.ooDecls = protoDollar[1].ooDecls
			}
		}
	case 122:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].ooDecl != nil {
				protoVAL.ooDecls = []ast.OneOfElement{protoDollar[1].ooDecl}
			} else {
				protoVAL.ooDecls = nil
			}
		}
	case 123:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.ooDecls = nil
		}
	case 124:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooDecl = protoDollar[1].opt
		}
	case 125:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooDecl = protoDollar[1].fld
		}
	case 126:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooDecl = protoDollar[1].grp
		}
	case 127:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooDecl = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 128:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.ooDecl = nil
		}
	case 129:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooDecl = nil
		}
	case 130:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 131:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 132:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b, protoDollar[6].msgDecls, protoDollar[7].b)
		}
	case 133:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b, protoDollar[7].msgDecls, protoDollar[8].b)
		}
	case 134:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 135:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 136:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mapType = ast.NewMapTypeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].id, protoDollar[4].b, protoDollar[5].tid, protoDollar[6].b)
		}
	case 149:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			ranges, commas := protoDollar[2].rngs.toNodes()
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), ranges, commas, nil, protoDollar[3].b)
		}
	case 150:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			ranges, commas := protoDollar[2].rngs.toNodes()
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), ranges, commas, protoDollar[3].cmpctOpts, protoDollar[4].b)
		}
	case 151:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeList{protoDollar[1].rng, nil, nil}
		}
	case 152:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rngs = &rangeList{protoDollar[1].rng, protoDollar[2].b, protoDollar[3].rngs}
		}
	case 153:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, nil, nil, nil)
		}
	case 154:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), protoDollar[3].i, nil)
		}
	case 155:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 156:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeList{protoDollar[1].rng, nil, nil}
		}
	case 157:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rngs = &rangeList{protoDollar[1].rng, protoDollar[2].b, protoDollar[3].rngs}
		}
	case 158:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, nil, nil, nil)
		}
	case 159:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), protoDollar[3].il, nil)
		}
	case 160:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 161:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.il = protoDollar[1].i
		}
	case 162:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.il = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 163:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			ranges, commas := protoDollar[2].rngs.toNodes()
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), ranges, commas, protoDollar[3].b)
		}
	case 165:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			ranges, commas := protoDollar[2].rngs.toNodes()
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), ranges, commas, protoDollar[3].b)
		}
	case 167:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			names, commas := protoDollar[2].names.toNodes()
			protoVAL.resvd = ast.NewReservedNamesNode(protoDollar[1].id.ToKeyword(), names, commas, protoDollar[3].b)
		}
	case 168:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameList{protoDollar[1].str.toStringValueNode(), nil, nil}
		}
	case 169:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.names = &nameList{protoDollar[1].str.toStringValueNode(), protoDollar[2].b, protoDollar[3].names}
		}
	case 170:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.en = ast.NewEnumNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].enDecls, protoDollar[5].b)
		}
	case 171:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].enDecl != nil {
				protoVAL.enDecls = append(protoDollar[1].enDecls, protoDollar[2].enDecl)
			} else {
				protoVAL.enDecls = protoDollar[1].enDecls
			}
		}
	case 172:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].enDecl != nil {
				protoVAL.enDecls = []ast.EnumElement{protoDollar[1].enDecl}
			} else {
				protoVAL.enDecls = nil
			}
		}
	case 173:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.enDecls = nil
		}
	case 174:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enDecl = protoDollar[1].opt
		}
	case 175:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enDecl = protoDollar[1].env
		}
	case 176:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enDecl = protoDollar[1].resvd
		}
	case 177:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enDecl = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 178:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.enDecl = nil
		}
	case 179:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enDecl = nil
		}
	case 180:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, nil, protoDollar[4].b)
		}
	case 181:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, protoDollar[4].cmpctOpts, protoDollar[5].b)
		}
	case 182:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msg = ast.NewMessageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].msgDecls, protoDollar[5].b)
		}
	case 183:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].msgDecl != nil {
				protoVAL.msgDecls = append(protoDollar[1].msgDecls, protoDollar[2].msgDecl)
			} else {
				protoVAL.msgDecls = protoDollar[1].msgDecls
			}
		}
	case 184:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgDecl != nil {
				protoVAL.msgDecls = []ast.MessageElement{protoDollar[1].msgDecl}
			} else {
				protoVAL.msgDecls = nil
			}
		}
	case 185:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.msgDecls = nil
		}
	case 186:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = protoDollar[1].fld
		}
	case 187:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = protoDollar[1].en
		}
	case 188:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = protoDollar[1].msg
		}
	case 189:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = protoDollar[1].extend
		}
	case 190:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = protoDollar[1].ext
		}
	case 191:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = protoDollar[1].grp
		}
	case 192:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = protoDollar[1].opt
		}
	case 193:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = protoDollar[1].oo
		}
	case 194:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = protoDollar[1].mapFld
		}
	case 195:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = protoDollar[1].resvd
		}
	case 196:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 197:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgDecl = nil
		}
	case 198:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgDecl = nil
		}
	case 199:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.extend = ast.NewExtendNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].b, protoDollar[4].extDecls, protoDollar[5].b)
		}
	case 200:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].extDecl != nil {
				protoVAL.extDecls = append(protoDollar[1].extDecls, protoDollar[2].extDecl)
			} else {
				protoVAL.extDecls = protoDollar[1].extDecls
			}
		}
	case 201:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].extDecl != nil {
				protoVAL.extDecls = []ast.ExtendElement{protoDollar[1].extDecl}
			} else {
				protoVAL.extDecls = nil
			}
		}
	case 202:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.extDecls = nil
		}
	case 203:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extDecl = protoDollar[1].fld
		}
	case 204:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extDecl = protoDollar[1].grp
		}
	case 205:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extDecl = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 206:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.extDecl = nil
		}
	case 207:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extDecl = nil
		}
	case 208:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.svc = ast.NewServiceNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].svcDecls, protoDollar[5].b)
		}
	case 209:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].svcDecl != nil {
				protoVAL.svcDecls = append(protoDollar[1].svcDecls, protoDollar[2].svcDecl)
			} else {
				protoVAL.svcDecls = protoDollar[1].svcDecls
			}
		}
	case 210:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].svcDecl != nil {
				protoVAL.svcDecls = []ast.ServiceElement{protoDollar[1].svcDecl}
			} else {
				protoVAL.svcDecls = nil
			}
		}
	case 211:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.svcDecls = nil
		}
	case 212:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcDecl = protoDollar[1].opt
		}
	case 213:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcDecl = protoDollar[1].mtd
		}
	case 214:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcDecl = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 215:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.svcDecl = nil
		}
	case 216:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcDecl = nil
		}
	case 217:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].rpcType, protoDollar[4].id.ToKeyword(), protoDollar[5].rpcType, protoDollar[6].b)
		}
	case 218:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNodeWithBody(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].rpcType, protoDollar[4].id.ToKeyword(), protoDollar[5].rpcType, protoDollar[6].b, protoDollar[7].rpcDecls, protoDollar[8].b)
		}
	case 219:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.rpcType = ast.NewRPCTypeNode(protoDollar[1].b, protoDollar[2].id.ToKeyword(), protoDollar[3].tid, protoDollar[4].b)
		}
	case 220:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rpcType = ast.NewRPCTypeNode(protoDollar[1].b, nil, protoDollar[2].tid, protoDollar[3].b)
		}
	case 221:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].rpcDecl != nil {
				protoVAL.rpcDecls = append(protoDollar[1].rpcDecls, protoDollar[2].rpcDecl)
			} else {
				protoVAL.rpcDecls = protoDollar[1].rpcDecls
			}
		}
	case 222:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].rpcDecl != nil {
				protoVAL.rpcDecls = []ast.RPCElement{protoDollar[1].rpcDecl}
			} else {
				protoVAL.rpcDecls = nil
			}
		}
	case 223:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.rpcDecls = nil
		}
	case 224:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rpcDecl = protoDollar[1].opt
		}
	case 225:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rpcDecl = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 226:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.rpcDecl = nil
		}
	case 227:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rpcDecl = nil
		}
	}
	goto protostack /* stack new state and value */
}
