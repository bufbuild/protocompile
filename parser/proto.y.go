// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

//lint:file-ignore SA4006 generated parser has unused values

import (
	"math"

	"github.com/bufbuild/protocompile/ast"
)

type protoSymType struct {
	yys            int
	file           *ast.FileNode
	syn            *ast.SyntaxNode
	fileElement    ast.FileElement
	fileElements   []ast.FileElement
	pkg            *ast.PackageNode
	imprt          *ast.ImportNode
	msg            *ast.MessageNode
	msgElement     ast.MessageElement
	msgElements    []ast.MessageElement
	fld            *ast.FieldNode
	mapFld         *ast.MapFieldNode
	mapType        *ast.MapTypeNode
	grp            *ast.GroupNode
	oo             *ast.OneOfNode
	ooElement      ast.OneOfElement
	ooElements     []ast.OneOfElement
	ext            *ast.ExtensionRangeNode
	resvd          *ast.ReservedNode
	en             *ast.EnumNode
	enElement      ast.EnumElement
	enElements     []ast.EnumElement
	env            *ast.EnumValueNode
	extend         *ast.ExtendNode
	extElement     ast.ExtendElement
	extElements    []ast.ExtendElement
	svc            *ast.ServiceNode
	svcElement     ast.ServiceElement
	svcElements    []ast.ServiceElement
	mtd            *ast.RPCNode
	rpcType        *ast.RPCTypeNode
	rpcElement     ast.RPCElement
	rpcElements    []ast.RPCElement
	opt            *ast.OptionNode
	opts           *compactOptionList
	ref            *ast.FieldReferenceNode
	optNms         *fieldRefList
	cmpctOpts      *ast.CompactOptionsNode
	rng            *ast.RangeNode
	rngs           *rangeList
	names          *nameList
	cid            *identList
	tid            ast.IdentValueNode
	sl             *valueList
	msgLitFlds     *messageFieldList
	msgLitFld      *ast.MessageFieldNode
	msgLitFldEntry *messageFieldEntry
	v              ast.ValueNode
	il             ast.IntValueNode
	str            *stringList
	s              *ast.StringLiteralNode
	i              *ast.UintLiteralNode
	f              *ast.FloatLiteralNode
	id             *ast.IdentNode
	b              *ast.RuneNode
	err            error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _NAME = 57349
const _SYNTAX = 57350
const _IMPORT = 57351
const _WEAK = 57352
const _PUBLIC = 57353
const _PACKAGE = 57354
const _OPTION = 57355
const _TRUE = 57356
const _FALSE = 57357
const _INF = 57358
const _NAN = 57359
const _REPEATED = 57360
const _OPTIONAL = 57361
const _REQUIRED = 57362
const _DOUBLE = 57363
const _FLOAT = 57364
const _INT32 = 57365
const _INT64 = 57366
const _UINT32 = 57367
const _UINT64 = 57368
const _SINT32 = 57369
const _SINT64 = 57370
const _FIXED32 = 57371
const _FIXED64 = 57372
const _SFIXED32 = 57373
const _SFIXED64 = 57374
const _BOOL = 57375
const _STRING = 57376
const _BYTES = 57377
const _GROUP = 57378
const _ONEOF = 57379
const _MAP = 57380
const _EXTENSIONS = 57381
const _TO = 57382
const _MAX = 57383
const _RESERVED = 57384
const _ENUM = 57385
const _MESSAGE = 57386
const _EXTEND = 57387
const _SERVICE = 57388
const _RPC = 57389
const _STREAM = 57390
const _RETURNS = 57391
const _ERROR = 57392

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_NAME",
	"_SYNTAX",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"'.'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int16{
	-1, 0,
	1, 4,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	-2, 0,
	-1, 3,
	1, 2,
	-2, 0,
	-1, 22,
	1, 3,
	-2, 0,
	-1, 96,
	55, 172,
	-2, 0,
	-1, 97,
	55, 160,
	-2, 0,
	-1, 98,
	55, 193,
	-2, 0,
	-1, 100,
	55, 205,
	-2, 0,
	-1, 292,
	55, 55,
	61, 55,
	-2, 0,
	-1, 366,
	55, 111,
	-2, 0,
	-1, 524,
	55, 172,
	-2, 0,
	-1, 540,
	55, 217,
	-2, 0,
	-1, 544,
	55, 172,
	-2, 0,
	-1, 558,
	55, 172,
	-2, 0,
	-1, 566,
	55, 172,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 1883

var protoAct = [...]int16{
	120, 119, 127, 8, 415, 8, 8, 362, 550, 106,
	483, 31, 397, 105, 404, 82, 353, 393, 326, 81,
	422, 315, 324, 108, 309, 8, 288, 395, 291, 76,
	79, 80, 30, 84, 281, 126, 133, 231, 139, 26,
	180, 523, 520, 519, 499, 492, 491, 410, 85, 403,
	406, 87, 88, 89, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 417, 95, 99,
	181, 541, 111, 282, 110, 76, 76, 104, 402, 107,
	354, 409, 349, 111, 296, 75, 405, 558, 556, 524,
	304, 354, 408, 295, 536, 526, 355, 514, 509, 497,
	363, 327, 363, 363, 233, 235, 188, 473, 327, 363,
	363, 361, 363, 363, 363, 518, 308, 118, 312, 313,
	29, 327, 363, 307, 318, 394, 363, 343, 344, 535,
	317, 111, 316, 314, 489, 342, 490, 477, 521, 354,
	343, 344, 348, 341, 500, 343, 344, 493, 342, 472,
	347, 387, 181, 342, 370, 364, 508, 335, 14, 319,
	328, 116, 117, 14, 4, 15, 285, 328, 16, 17,
	15, 94, 93, 16, 17, 340, 91, 17, 553, 566,
	328, 316, 539, 553, 540, 285, 544, 366, 188, 17,
	321, 100, 98, 97, 17, 96, 17, 564, 562, 19,
	18, 20, 21, 548, 19, 18, 20, 21, 13, 545,
	538, 286, 534, 13, 528, 512, 284, 504, 333, 336,
	414, 386, 369, 368, 334, 332, 338, 331, 552, 322,
	286, 560, 305, 552, 287, 284, 233, 235, 330, 103,
	102, 101, 90, 86, 25, 532, 531, 501, 478, 412,
	411, 391, 367, 282, 360, 323, 92, 24, 480, 388,
	365, 124, 11, 5, 11, 11, 547, 23, 339, 546,
	419, 513, 302, 300, 295, 29, 311, 351, 496, 299,
	297, 495, 356, 301, 11, 337, 23, 479, 358, 359,
	298, 345, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 470, 384, 420, 122, 10, 29,
	10, 10, 385, 311, 390, 27, 28, 413, 389, 123,
	9, 392, 9, 9, 396, 29, 110, 283, 280, 396,
	10, 110, 3, 12, 230, 22, 295, 182, 407, 423,
	179, 125, 9, 325, 310, 76, 183, 400, 130, 421,
	137, 401, 129, 425, 128, 232, 424, 121, 292, 418,
	293, 427, 471, 474, 316, 236, 134, 429, 237, 143,
	186, 431, 239, 146, 371, 350, 352, 476, 486, 487,
	475, 110, 488, 398, 482, 109, 294, 77, 549, 416,
	7, 498, 6, 2, 423, 494, 1, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 0, 503, 0, 0, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 515, 0, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 516, 0,
	0, 517, 0, 525, 527, 529, 407, 0, 522, 0,
	0, 0, 76, 110, 0, 530, 0, 0, 107, 0,
	0, 537, 0, 0, 533, 0, 543, 0, 0, 0,
	0, 487, 542, 110, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 551, 304, 0, 555, 0, 0, 0,
	0, 0, 551, 0, 557, 559, 304, 0, 561, 0,
	565, 0, 0, 0, 0, 0, 304, 0, 568, 304,
	485, 0, 29, 115, 112, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	354, 114, 113, 0, 0, 0, 484, 29, 115, 112,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 354, 114, 113, 0, 0,
	399, 29, 115, 112, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 354,
	114, 113, 29, 115, 112, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 290, 0,
	0, 114, 113, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 296, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 296, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 78, 147, 148, 149, 150, 151, 152,
	17, 153, 154, 155, 156, 142, 141, 140, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 136, 145, 135, 173, 174, 138,
	19, 18, 20, 175, 176, 177, 178, 0, 0, 131,
	0, 0, 569, 132, 0, 0, 144, 0, 147, 148,
	149, 150, 151, 152, 17, 153, 154, 155, 156, 142,
	141, 140, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 136, 145,
	135, 173, 174, 138, 19, 18, 20, 175, 176, 177,
	178, 0, 0, 131, 0, 0, 567, 132, 0, 0,
	144, 0, 147, 148, 149, 150, 151, 152, 17, 153,
	154, 155, 156, 142, 141, 140, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 136, 145, 135, 173, 174, 138, 19, 18,
	20, 175, 176, 177, 178, 0, 0, 131, 0, 0,
	563, 132, 0, 0, 144, 0, 147, 148, 149, 150,
	151, 152, 17, 153, 154, 155, 156, 142, 141, 140,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 136, 145, 135, 173,
	174, 138, 19, 18, 20, 175, 176, 177, 178, 0,
	0, 131, 0, 0, 554, 132, 0, 0, 144, 0,
	147, 148, 149, 150, 151, 152, 17, 153, 154, 155,
	156, 142, 141, 140, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	136, 145, 135, 173, 174, 138, 19, 18, 20, 175,
	176, 177, 178, 0, 0, 131, 0, 0, 303, 132,
	0, 0, 144, 0, 147, 148, 149, 150, 151, 152,
	17, 153, 154, 155, 156, 142, 141, 140, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 136, 145, 135, 173, 174, 138,
	19, 18, 20, 175, 176, 177, 178, 0, 0, 131,
	0, 0, 234, 0, 0, 0, 144, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 142, 141,
	140, 251, 252, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 0, 0, 329, 234, 0, 0, 238,
	0, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 142, 141, 140, 251, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 238, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 481, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 306,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 426, 0,
	0, 0, 83, 432, 433, 434, 435, 436, 437, 17,
	438, 439, 440, 441, 0, 0, 0, 442, 443, 444,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 428, 457, 458, 459, 460, 461, 462, 463,
	464, 465, 466, 467, 468, 469, 0, 0, 0, 0,
	0, 502, 426, 0, 0, 430, 0, 432, 433, 434,
	435, 436, 437, 17, 438, 439, 440, 441, 0, 0,
	0, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 428, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 430,
	189, 190, 191, 192, 193, 194, 17, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 222, 187, 223, 224, 225, 226,
	227, 228, 229, 0, 185, 184, 0, 0, 320, 189,
	190, 191, 192, 193, 194, 17, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 187, 223, 224, 225, 226, 227,
	228, 229, 357, 0, 184, 0, 0, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74,
}

var protoPact = [...]int16{
	186, -1000, 191, 191, 236, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 222, 335, 1833, 938, 1833, 1833,
	1427, 1833, 191, -1000, 351, -1000, 221, 351, 351, 351,
	220, 147, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 235, 143, 142, 1427, 171,
	169, 168, -1000, 1833, 167, 219, -1000, 218, 217, -1000,
	-1000, 1833, 758, 938, 938, 81, 1267, 1742, 1374, -1000,
	213, -1000, -1000, -1000, -1000, 212, -1000, -1000, -1000, -1000,
	-1000, 816, -1000, 304, 297, -1000, -1000, -1000, -1000, 1213,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 210, 1533, 1833, 338, 1833, 1833, 301, -1000,
	-1000, -1000, -1000, -1000, 1833, 92, 130, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1693,
	-1000, -1000, -1000, -1000, -1000, 207, 234, 146, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1320, -1000, -1000, -1000, 205, 1533, 1833, -1000, 1833, 128,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	194, -1000, -1000, -1000, -1000, 204, 1833, -1000, 150, -1000,
	118, -1000, 877, 120, 59, -1000, 1790, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1833, 1833, 233, 89,
	125, 250, 163, 231, 201, 200, 124, -1000, 299, 1833,
	-1000, -1000, -1000, 133, 199, 121, 249, -1000, 343, -1000,
	-1000, -1000, 1833, 230, -1000, 1833, -1000, -1000, -1000, 90,
	-1000, -1000, -1000, -1000, 633, -1000, 123, -1000, -1000, 633,
	-1000, -1000, -1000, -1000, 47, 48, 54, -21, 229, 228,
	342, -1000, 198, 938, 338, 295, 1640, 329, -1000, -1000,
	351, 119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 85, -1000, 133, 126, -1000,
	227, 312, -1000, 239, 1480, -1000, -1000, -1000, -1000, 568,
	-1000, 103, -1000, 105, -22, -1000, -23, 117, -1000, 1833,
	-1000, 306, 303, 77, -1000, -24, 114, 226, -1000, -1000,
	-1000, 1586, -1000, -1000, -1000, -1000, 195, 1833, 1833, -1000,
	1833, 127, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	76, -1000, 1427, -1000, 193, -1000, -1000, -1000, 296, 75,
	90, 1427, 79, -25, -1000, -26, 108, -1000, -1000, -1000,
	-1000, -1000, -1000, 107, -27, 65, 73, -1000, 192, -1000,
	938, 758, -1000, -1000, -1000, 225, 224, -1000, 1833, -1000,
	190, 98, -1000, 72, -1000, 188, 160, 35, -1000, -1000,
	-1000, 697, -1000, -1000, 1267, 162, -1000, 187, -1000, -1000,
	-1000, 294, 291, -1000, -1000, -1000, -1000, 181, -1000, -1000,
	211, -1000, -1000, 1159, 1267, -1000, 66, 63, -1000, 206,
	-1000, -1000, -1000, 176, -1000, 1105, -1000, 175, 1267, 155,
	-1000, -1000, -1000, -1000, -1000, 1051, 1267, -1000, 997, -1000,
}

var protoPgo = [...]int16{
	0, 426, 423, 293, 362, 422, 420, 2, 419, 4,
	8, 418, 417, 416, 97, 7, 27, 13, 9, 16,
	12, 415, 413, 408, 406, 405, 18, 11, 404, 403,
	402, 401, 400, 36, 15, 399, 398, 397, 19, 396,
	395, 391, 10, 14, 28, 26, 390, 388, 387, 386,
	385, 384, 35, 383, 382, 380, 349, 0, 1, 20,
	379, 21, 378, 376, 38, 374, 373, 24, 22, 371,
	337, 40, 370, 367, 291, 37, 364, 23, 363, 34,
	358, 357, 17,
}

var protoR1 = [...]int8{
	0, 1, 1, 1, 1, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 5, 5,
	5, 6, 34, 34, 35, 35, 36, 36, 37, 37,
	7, 14, 14, 14, 14, 12, 17, 17, 18, 18,
	18, 21, 21, 21, 21, 21, 21, 21, 21, 77,
	77, 19, 19, 19, 45, 44, 44, 47, 47, 47,
	47, 47, 47, 46, 46, 46, 13, 13, 13, 13,
	16, 16, 16, 25, 25, 20, 20, 20, 20, 22,
	22, 22, 42, 42, 23, 23, 24, 24, 24, 43,
	43, 38, 38, 39, 39, 40, 40, 41, 41, 33,
	33, 33, 15, 9, 9, 8, 52, 52, 51, 60,
	60, 60, 59, 59, 59, 59, 59, 49, 49, 53,
	53, 54, 54, 55, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 69, 69, 67, 67,
	65, 65, 65, 68, 68, 66, 66, 66, 26, 26,
	62, 62, 63, 63, 64, 61, 61, 70, 72, 72,
	72, 71, 71, 71, 71, 71, 71, 73, 73, 56,
	58, 58, 58, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 48, 48, 48, 48,
	74, 76, 76, 76, 75, 75, 75, 75, 50, 50,
	50, 50, 78, 80, 80, 80, 79, 79, 79, 79,
	79, 81, 81, 82, 82, 11, 11, 11, 10, 10,
	10, 10, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27,
}

var protoR2 = [...]int8{
	0, 1, 1, 2, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 4, 3, 4,
	4, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	5, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 1, 2, 2, 1,
	2, 3, 2, 3, 1, 1, 2, 1, 2, 2,
	2, 2, 1, 3, 2, 3, 1, 3, 5, 3,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 3,
	2, 3, 3, 1, 1, 1, 3, 2, 3, 3,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 3, 1, 3, 3, 8, 9, 5, 2,
	1, 0, 1, 1, 1, 2, 1, 5, 6, 7,
	8, 5, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 1, 3,
	1, 3, 3, 1, 3, 1, 3, 3, 1, 2,
	3, 1, 3, 1, 3, 1, 3, 5, 2, 1,
	0, 1, 1, 1, 1, 2, 1, 4, 5, 5,
	2, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 6, 7, 5, 6,
	5, 2, 1, 0, 1, 1, 2, 1, 6, 7,
	5, 6, 5, 2, 1, 0, 1, 1, 1, 2,
	1, 6, 8, 4, 3, 2, 1, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var protoChk = [...]int16{
	-1000, -1, -2, -4, 8, -3, -5, -6, -7, -56,
	-70, -74, -78, 52, 2, 9, 12, 13, 44, 43,
	45, 46, -4, -3, 51, 52, -77, 10, 11, 4,
	-34, -27, 7, 8, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, -14, -27, -12, 65, -27,
	-27, -38, -34, 59, -27, -77, 52, -77, -77, -77,
	52, 59, 51, 59, 59, -38, 54, 54, 54, -34,
	54, 52, 52, 52, -34, -17, -18, -19, -77, -21,
	-27, 54, 6, 64, 63, 5, -14, -14, 66, -58,
	-57, -48, -70, -56, -74, -69, -52, -7, -51, -54,
	-62, 52, 2, -33, -39, 39, 37, -55, 42, -64,
	20, 19, 18, -35, 59, 38, -29, 7, 8, 9,
	10, 11, 12, 14, 15, 16, 17, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 40, 41, 46, 47, 48, 49, -72,
	-71, -7, -73, -63, 52, 2, -32, 42, -64, 7,
	8, 9, 10, 11, 12, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 43, 44, 45, 46, 47, 48, 49,
	-76, -75, -50, -52, 2, -33, -40, -36, 59, -30,
	7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
	17, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	-80, -79, -7, -81, 52, 2, 47, 52, -45, 55,
	2, -44, -47, -46, -13, -27, 67, 6, 16, 5,
	6, 16, 5, 55, -57, 52, 36, -38, -27, -67,
	-65, 5, -27, -27, -67, -61, -77, -34, 62, 59,
	55, -71, 52, 51, -68, -66, -26, 5, 64, 55,
	-75, 52, -38, -27, -34, 59, 55, -79, 52, -27,
	55, 55, 60, 52, 53, -44, 2, 60, 52, 53,
	-25, -20, -24, -19, 62, 67, -34, 2, -27, -27,
	51, 52, -15, 67, 60, 40, 54, 51, 52, 52,
	60, -28, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, -34, -26, 52, 60, 40, 5,
	-27, 51, -34, -82, 65, -16, -18, -20, -22, 67,
	-16, -45, 61, 2, -43, 68, 2, -20, 68, 57,
	68, 51, 51, 5, 52, -9, -8, -14, -67, 5,
	41, -60, -59, -7, -49, -53, 2, -41, 36, -37,
	59, -31, 7, 8, 9, 10, 11, 12, 14, 15,
	16, 17, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	5, -61, 60, 52, -15, -68, -26, 41, 51, 5,
	49, 48, -38, -42, 68, 2, -23, -18, -20, 61,
	61, 68, 68, 60, -34, 5, 5, 52, -15, 68,
	60, 51, 55, -59, 52, -27, -27, -34, 59, 52,
	-15, -38, 52, 5, 52, -15, -82, -38, 66, 68,
	68, 60, -43, 68, 54, -15, 52, -15, 52, -9,
	-17, 51, 51, -34, 52, 61, 52, -15, 52, 52,
	54, 66, -42, -58, 54, 52, 5, 5, 52, -11,
	-10, -7, 52, 2, 55, -58, 52, -15, 54, -15,
	55, -10, 52, 55, 52, -58, 54, 55, -58, 55,
}

var protoDef = [...]int16{
	-2, -2, -2, -2, 0, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 16, 0, 0, 0, 0, 0,
	0, 0, -2, 5, 0, 15, 0, 0, 0, 49,
	0, 22, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	413, 414, 415, 416, 417, 0, 31, 33, 0, 0,
	0, 0, 91, 0, 0, 0, 18, 0, 0, 50,
	21, 0, 0, 0, 0, 0, -2, -2, -2, 92,
	-2, 17, 19, 20, 23, 0, 36, 37, 38, 39,
	40, 0, 41, 0, 0, 46, 32, 34, 35, 0,
	171, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 185, 0, 0, 0, 0, 0, 0, 151,
	99, 100, 101, 93, 0, 248, 24, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 249, 250, 251, 252, 253, 254, 0,
	159, 161, 162, 163, 164, 166, 0, 0, 153, 295,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	306, 307, 308, 309, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
	0, 192, 194, 195, 197, 0, 0, 95, 0, 26,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 204, 206, 207, 208, 210, 0, 30, 0, 52,
	62, 54, -2, 57, 0, 66, 0, 42, 45, 48,
	43, 44, 47, 169, 170, 184, 404, 0, 0, 0,
	138, 140, 0, 0, 0, 0, 155, 94, 0, 0,
	157, 158, 165, 0, 0, 143, 145, 148, 0, 190,
	191, 196, 0, 0, 96, 0, 202, 203, 209, 0,
	51, 53, 60, 61, 0, 56, 62, 58, 59, 0,
	64, 73, 74, 75, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, -2, 0, 150, 154,
	0, 0, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 25, 0, 152, 0, 0, 149,
	0, 0, 27, 0, 0, 65, 70, 71, 72, 0,
	63, 0, 77, 62, 0, 87, 0, 90, 67, 0,
	69, 0, 0, 0, 137, 0, 103, 0, 139, 141,
	142, 0, 110, 112, 113, 114, 116, 0, 361, 97,
	0, 28, 336, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 360, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	0, 156, 0, 167, 0, 144, 146, 147, 0, 0,
	0, 416, 0, 0, 80, 0, 83, 84, 85, 76,
	78, 86, 88, 0, 0, 0, 0, 188, 0, 102,
	0, 0, 108, 109, 115, 0, 0, 98, 0, 121,
	0, 0, 168, 0, 200, 0, 0, 0, 214, 79,
	81, 0, 89, 68, -2, 0, 186, 0, 189, 104,
	105, 0, 0, 29, 122, 123, 198, 0, 201, 211,
	-2, 213, 82, 0, -2, 187, 0, 0, 199, 0,
	216, 218, 219, 221, 106, 0, 117, 0, -2, 0,
	212, 215, 220, 107, 118, 0, -2, 119, 0, 120,
}

var protoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 74, 73, 72, 70, 3,
	65, 66, 69, 63, 60, 64, 59, 57, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 53, 52,
	62, 51, 61, 58, 75, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 67, 56, 68, 71, 3, 78, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 54, 3, 55, 77,
}

var protoTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50,
}

var protoTok3 = [...]int8{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(protoPact[state])
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && int(protoChk[int(protoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || int(protoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := int(protoExca[i])
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(protoTok1[0])
		goto out
	}
	if char < len(protoTok1) {
		token = int(protoTok1[char])
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = int(protoTok2[char-protoPrivate])
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = int(protoTok3[i+0])
		if token == char {
			token = int(protoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(protoTok2[1]) /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = int(protoPact[protostate])
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = int(protoAct[proton])
	if int(protoChk[proton]) == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = int(protoDef[protostate])
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && int(protoExca[xi+1]) == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = int(protoExca[xi+0])
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = int(protoExca[xi+1])
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = int(protoPact[protoS[protop].yys]) + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = int(protoAct[proton]) /* simulate a shift of "error" */
					if int(protoChk[protostate]) == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= int(protoR2[proton])
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = int(protoR1[proton])
	protog := int(protoPgo[proton])
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = int(protoAct[protog])
	} else {
		protostate = int(protoAct[protoj])
		if int(protoChk[protostate]) != -proton {
			protostate = int(protoAct[protog])
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, protoDollar[1].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, protoDollar[2].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 5:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].fileElement != nil {
				protoVAL.fileElements = append(protoDollar[1].fileElements, protoDollar[2].fileElement)
			} else {
				protoVAL.fileElements = protoDollar[1].fileElements
			}
		}
	case 6:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].fileElement != nil {
				protoVAL.fileElements = []ast.FileElement{protoDollar[1].fileElement}
			} else {
				protoVAL.fileElements = nil
			}
		}
	case 7:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].imprt
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].pkg
		}
	case 9:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].opt
		}
	case 10:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].msg
		}
	case 11:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].en
		}
	case 12:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].extend
		}
	case 13:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].svc
		}
	case 14:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 15:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.fileElement = nil
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = nil
		}
	case 17:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.syn = ast.NewSyntaxNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].str.toStringValueNode(), protoDollar[4].b)
		}
	case 18:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, nil, protoDollar[2].str.toStringValueNode(), protoDollar[3].b)
		}
	case 19:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, protoDollar[2].id.ToKeyword(), protoDollar[3].str.toStringValueNode(), protoDollar[4].b)
		}
	case 20:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), nil, protoDollar[3].str.toStringValueNode(), protoDollar[4].b)
		}
	case 21:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.pkg = ast.NewPackageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b)
		}
	case 22:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, nil, nil}
		}
	case 23:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, protoDollar[2].b, protoDollar[3].cid}
		}
	case 24:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, nil, nil}
		}
	case 25:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, protoDollar[2].b, protoDollar[3].cid}
		}
	case 26:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, nil, nil}
		}
	case 27:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, protoDollar[2].b, protoDollar[3].cid}
		}
	case 28:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, nil, nil}
		}
	case 29:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.cid = &identList{protoDollar[1].id, protoDollar[2].b, protoDollar[3].cid}
		}
	case 30:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			refs, dots := protoDollar[2].optNms.toNodes()
			optName := ast.NewOptionNameNode(refs, dots)
			protoVAL.opt = ast.NewOptionNode(protoDollar[1].id.ToKeyword(), optName, protoDollar[3].b, protoDollar[4].v, protoDollar[5].b)
		}
	case 31:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			fieldReferenceNode := ast.NewFieldReferenceNode(protoDollar[1].id)
			protoVAL.optNms = &fieldRefList{fieldReferenceNode, nil, nil}
		}
	case 32:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			fieldReferenceNode := ast.NewFieldReferenceNode(protoDollar[1].id)
			protoVAL.optNms = &fieldRefList{fieldReferenceNode, protoDollar[2].b, protoDollar[3].optNms}
		}
	case 33:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optNms = &fieldRefList{protoDollar[1].ref, nil, nil}
		}
	case 34:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.optNms = &fieldRefList{protoDollar[1].ref, protoDollar[2].b, protoDollar[3].optNms}
		}
	case 35:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].tid, protoDollar[3].b)
		}
	case 38:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].str.toStringValueNode()
		}
	case 40:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id
		}
	case 41:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].f
		}
	case 42:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 43:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 44:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 45:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 46:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].i
		}
	case 47:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewPositiveUintLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 48:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].i.Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].i)
			} else {
				protoVAL.v = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
			}
		}
	case 49:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.str = &stringList{protoDollar[1].s, nil}
		}
	case 50:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.str = &stringList{protoDollar[1].s, protoDollar[2].str}
		}
	case 51:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			fields, delims := protoDollar[2].msgLitFlds.toNodes()
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delims, protoDollar[3].b)
		}
	case 52:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 53:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = nil
		}
	case 55:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgLitFldEntry != nil {
				protoVAL.msgLitFlds = &messageFieldList{protoDollar[1].msgLitFldEntry, nil}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 56:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFldEntry != nil {
				protoVAL.msgLitFlds = &messageFieldList{protoDollar[1].msgLitFldEntry, protoDollar[2].msgLitFlds}
			} else {
				protoVAL.msgLitFlds = protoDollar[2].msgLitFlds
			}
		}
	case 57:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFldEntry = &messageFieldEntry{protoDollar[1].msgLitFld, nil}
			} else {
				protoVAL.msgLitFldEntry = nil
			}
		}
	case 58:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFldEntry = &messageFieldEntry{protoDollar[1].msgLitFld, protoDollar[2].b}
			} else {
				protoVAL.msgLitFldEntry = nil
			}
		}
	case 59:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFldEntry = &messageFieldEntry{protoDollar[1].msgLitFld, protoDollar[2].b}
			} else {
				protoVAL.msgLitFldEntry = nil
			}
		}
	case 60:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFldEntry = nil
		}
	case 61:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFldEntry = nil
		}
	case 62:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgLitFldEntry = nil
		}
	case 63:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, protoDollar[3].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 64:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].ref != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, nil, protoDollar[2].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 65:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.msgLitFld = nil
		}
	case 66:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 67:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b)
		}
	case 68:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.ref = ast.NewAnyTypeReferenceNode(protoDollar[1].b, protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b, protoDollar[4].cid.toIdentValueNode(nil), protoDollar[5].b)
		}
	case 69:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = nil
		}
	case 76:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			fields, delims := protoDollar[2].msgLitFlds.toNodes()
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delims, protoDollar[3].b)
		}
	case 77:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 78:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = nil
		}
	case 79:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			vals, commas := protoDollar[2].sl.toNodes()
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, vals, commas, protoDollar[3].b)
		}
	case 80:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 81:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = nil
		}
	case 82:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.sl = &valueList{protoDollar[1].v, protoDollar[2].b, protoDollar[3].sl}
		}
	case 83:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueList{protoDollar[1].v, nil, nil}
		}
	case 86:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].sl != nil {
				vals, commas := protoDollar[2].sl.toNodes()
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, vals, commas, protoDollar[3].b)
			} else {

			}
		}
	case 87:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[1].b)
		}
	case 88:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = nil
		}
	case 89:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.sl = &valueList{protoDollar[1].v, protoDollar[2].b, protoDollar[3].sl}
		}
	case 90:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueList{protoDollar[1].v, nil, nil}
		}
	case 91:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 92:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 93:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 94:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 95:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 96:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 97:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 98:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 102:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			opts, commas := protoDollar[2].opts.toNodes()
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, opts, commas, protoDollar[3].b)
		}
	case 103:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opts = &compactOptionList{protoDollar[1].opt, nil, nil}
		}
	case 104:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.opts = &compactOptionList{protoDollar[1].opt, protoDollar[2].b, protoDollar[3].opts}
		}
	case 105:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			refs, dots := protoDollar[1].optNms.toNodes()
			optName := ast.NewOptionNameNode(refs, dots)
			protoVAL.opt = ast.NewCompactOptionNode(optName, protoDollar[2].b, protoDollar[3].v)
		}
	case 106:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 107:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b, protoDollar[8].msgElements, protoDollar[9].b)
		}
	case 108:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.oo = ast.NewOneOfNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].ooElements, protoDollar[5].b)
		}
	case 109:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].ooElement != nil {
				protoVAL.ooElements = append(protoDollar[1].ooElements, protoDollar[2].ooElement)
			} else {
				protoVAL.ooElements = protoDollar[1].ooElements
			}
		}
	case 110:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].ooElement != nil {
				protoVAL.ooElements = []ast.OneOfElement{protoDollar[1].ooElement}
			} else {
				protoVAL.ooElements = nil
			}
		}
	case 111:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.ooElements = nil
		}
	case 112:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].opt
		}
	case 113:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].fld
		}
	case 114:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].grp
		}
	case 115:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 116:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 117:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 118:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 119:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b, protoDollar[6].msgElements, protoDollar[7].b)
		}
	case 120:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 121:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 122:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 123:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mapType = ast.NewMapTypeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].id, protoDollar[4].b, protoDollar[5].tid, protoDollar[6].b)
		}
	case 136:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			ranges, commas := protoDollar[2].rngs.toNodes()
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), ranges, commas, nil, protoDollar[3].b)
		}
	case 137:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			ranges, commas := protoDollar[2].rngs.toNodes()
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), ranges, commas, protoDollar[3].cmpctOpts, protoDollar[4].b)
		}
	case 138:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeList{protoDollar[1].rng, nil, nil}
		}
	case 139:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rngs = &rangeList{protoDollar[1].rng, protoDollar[2].b, protoDollar[3].rngs}
		}
	case 140:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, nil, nil, nil)
		}
	case 141:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), protoDollar[3].i, nil)
		}
	case 142:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 143:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeList{protoDollar[1].rng, nil, nil}
		}
	case 144:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rngs = &rangeList{protoDollar[1].rng, protoDollar[2].b, protoDollar[3].rngs}
		}
	case 145:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, nil, nil, nil)
		}
	case 146:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), protoDollar[3].il, nil)
		}
	case 147:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 148:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.il = protoDollar[1].i
		}
	case 149:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.il = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 150:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			ranges, commas := protoDollar[2].rngs.toNodes()
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), ranges, commas, protoDollar[3].b)
		}
	case 152:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			ranges, commas := protoDollar[2].rngs.toNodes()
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), ranges, commas, protoDollar[3].b)
		}
	case 154:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			names, commas := protoDollar[2].names.toNodes()
			protoVAL.resvd = ast.NewReservedNamesNode(protoDollar[1].id.ToKeyword(), names, commas, protoDollar[3].b)
		}
	case 155:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameList{protoDollar[1].str.toStringValueNode(), nil, nil}
		}
	case 156:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.names = &nameList{protoDollar[1].str.toStringValueNode(), protoDollar[2].b, protoDollar[3].names}
		}
	case 157:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.en = ast.NewEnumNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].enElements, protoDollar[5].b)
		}
	case 158:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].enElement != nil {
				protoVAL.enElements = append(protoDollar[1].enElements, protoDollar[2].enElement)
			} else {
				protoVAL.enElements = protoDollar[1].enElements
			}
		}
	case 159:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].enElement != nil {
				protoVAL.enElements = []ast.EnumElement{protoDollar[1].enElement}
			} else {
				protoVAL.enElements = nil
			}
		}
	case 160:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.enElements = nil
		}
	case 161:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = protoDollar[1].opt
		}
	case 162:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = protoDollar[1].env
		}
	case 163:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = protoDollar[1].resvd
		}
	case 164:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 165:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.enElement = nil
		}
	case 166:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = nil
		}
	case 167:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, nil, protoDollar[4].b)
		}
	case 168:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, protoDollar[4].cmpctOpts, protoDollar[5].b)
		}
	case 169:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msg = ast.NewMessageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].msgElements, protoDollar[5].b)
		}
	case 170:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].msgElement != nil {
				protoVAL.msgElements = append(protoDollar[1].msgElements, protoDollar[2].msgElement)
			} else {
				protoVAL.msgElements = protoDollar[1].msgElements
			}
		}
	case 171:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgElement != nil {
				protoVAL.msgElements = []ast.MessageElement{protoDollar[1].msgElement}
			} else {
				protoVAL.msgElements = nil
			}
		}
	case 172:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.msgElements = nil
		}
	case 173:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].fld
		}
	case 174:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].en
		}
	case 175:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].msg
		}
	case 176:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].extend
		}
	case 177:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].ext
		}
	case 178:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].grp
		}
	case 179:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].opt
		}
	case 180:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].oo
		}
	case 181:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].mapFld
		}
	case 182:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].resvd
		}
	case 183:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 184:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgElement = nil
		}
	case 185:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = nil
		}
	case 186:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 187:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 188:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 189:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 190:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.extend = ast.NewExtendNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].b, protoDollar[4].extElements, protoDollar[5].b)
		}
	case 191:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].extElement != nil {
				protoVAL.extElements = append(protoDollar[1].extElements, protoDollar[2].extElement)
			} else {
				protoVAL.extElements = protoDollar[1].extElements
			}
		}
	case 192:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].extElement != nil {
				protoVAL.extElements = []ast.ExtendElement{protoDollar[1].extElement}
			} else {
				protoVAL.extElements = nil
			}
		}
	case 193:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.extElements = nil
		}
	case 194:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = protoDollar[1].fld
		}
	case 195:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = protoDollar[1].grp
		}
	case 196:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 197:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 198:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 199:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 200:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 201:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 202:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.svc = ast.NewServiceNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].svcElements, protoDollar[5].b)
		}
	case 203:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].svcElement != nil {
				protoVAL.svcElements = append(protoDollar[1].svcElements, protoDollar[2].svcElement)
			} else {
				protoVAL.svcElements = protoDollar[1].svcElements
			}
		}
	case 204:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].svcElement != nil {
				protoVAL.svcElements = []ast.ServiceElement{protoDollar[1].svcElement}
			} else {
				protoVAL.svcElements = nil
			}
		}
	case 205:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.svcElements = nil
		}
	case 206:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = protoDollar[1].opt
		}
	case 207:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = protoDollar[1].mtd
		}
	case 208:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 209:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.svcElement = nil
		}
	case 210:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = nil
		}
	case 211:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].rpcType, protoDollar[4].id.ToKeyword(), protoDollar[5].rpcType, protoDollar[6].b)
		}
	case 212:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNodeWithBody(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].rpcType, protoDollar[4].id.ToKeyword(), protoDollar[5].rpcType, protoDollar[6].b, protoDollar[7].rpcElements, protoDollar[8].b)
		}
	case 213:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.rpcType = ast.NewRPCTypeNode(protoDollar[1].b, protoDollar[2].id.ToKeyword(), protoDollar[3].tid, protoDollar[4].b)
		}
	case 214:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rpcType = ast.NewRPCTypeNode(protoDollar[1].b, nil, protoDollar[2].tid, protoDollar[3].b)
		}
	case 215:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].rpcElement != nil {
				protoVAL.rpcElements = append(protoDollar[1].rpcElements, protoDollar[2].rpcElement)
			} else {
				protoVAL.rpcElements = protoDollar[1].rpcElements
			}
		}
	case 216:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].rpcElement != nil {
				protoVAL.rpcElements = []ast.RPCElement{protoDollar[1].rpcElement}
			} else {
				protoVAL.rpcElements = nil
			}
		}
	case 217:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.rpcElements = nil
		}
	case 218:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rpcElement = protoDollar[1].opt
		}
	case 219:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rpcElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 220:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.rpcElement = nil
		}
	case 221:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rpcElement = nil
		}
	}
	goto protostack /* stack new state and value */
}
