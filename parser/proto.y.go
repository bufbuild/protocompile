// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//lint:file-ignore SA4006 generated parser has unused values

import (
	"math"

	"github.com/bufbuild/protocompile/ast"
)

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _NAME = 57349
const _SYNTAX = 57350
const _IMPORT = 57351
const _WEAK = 57352
const _PUBLIC = 57353
const _PACKAGE = 57354
const _OPTION = 57355
const _TRUE = 57356
const _FALSE = 57357
const _INF = 57358
const _NAN = 57359
const _REPEATED = 57360
const _OPTIONAL = 57361
const _REQUIRED = 57362
const _DOUBLE = 57363
const _FLOAT = 57364
const _INT32 = 57365
const _INT64 = 57366
const _UINT32 = 57367
const _UINT64 = 57368
const _SINT32 = 57369
const _SINT64 = 57370
const _FIXED32 = 57371
const _FIXED64 = 57372
const _SFIXED32 = 57373
const _SFIXED64 = 57374
const _BOOL = 57375
const _STRING = 57376
const _BYTES = 57377
const _GROUP = 57378
const _ONEOF = 57379
const _MAP = 57380
const _EXTENSIONS = 57381
const _TO = 57382
const _MAX = 57383
const _RESERVED = 57384
const _ENUM = 57385
const _MESSAGE = 57386
const _EXTEND = 57387
const _SERVICE = 57388
const _RPC = 57389
const _STREAM = 57390
const _RETURNS = 57391
const _ERROR = 57392

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_NAME",
	"_SYNTAX",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"'.'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int{
	-1, 0,
	1, 4,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	-2, 0,
	-1, 3,
	1, 2,
	-2, 0,
	-1, 22,
	1, 3,
	-2, 0,
	-1, 95,
	55, 171,
	-2, 0,
	-1, 96,
	55, 159,
	-2, 0,
	-1, 97,
	55, 192,
	-2, 0,
	-1, 99,
	55, 204,
	-2, 0,
	-1, 291,
	55, 55,
	61, 55,
	-2, 0,
	-1, 365,
	55, 110,
	-2, 0,
	-1, 523,
	55, 171,
	-2, 0,
	-1, 539,
	55, 216,
	-2, 0,
	-1, 543,
	55, 171,
	-2, 0,
	-1, 557,
	55, 171,
	-2, 0,
	-1, 565,
	55, 171,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 1879

var protoAct = [...]int{
	119, 118, 126, 8, 396, 8, 8, 361, 549, 105,
	485, 31, 104, 352, 392, 416, 421, 81, 325, 324,
	107, 309, 287, 82, 394, 8, 280, 125, 290, 76,
	79, 80, 132, 84, 230, 138, 26, 179, 308, 77,
	30, 520, 492, 409, 540, 85, 517, 117, 88, 89,
	29, 114, 111, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 94, 405, 393, 180,
	110, 318, 281, 103, 109, 115, 106, 98, 353, 113,
	112, 91, 408, 398, 91, 348, 110, 534, 519, 303,
	522, 326, 294, 407, 353, 232, 518, 499, 491, 354,
	234, 360, 187, 116, 326, 498, 490, 555, 557, 362,
	535, 525, 29, 326, 513, 307, 363, 311, 312, 110,
	306, 363, 363, 523, 508, 363, 363, 353, 315, 363,
	496, 488, 472, 404, 342, 343, 363, 317, 91, 363,
	476, 110, 341, 489, 471, 363, 313, 363, 506, 353,
	327, 180, 342, 343, 386, 340, 342, 343, 368, 367,
	341, 347, 385, 327, 341, 500, 369, 362, 14, 346,
	284, 333, 327, 93, 4, 15, 90, 315, 16, 17,
	92, 17, 316, 91, 187, 538, 320, 539, 93, 552,
	339, 565, 543, 365, 14, 284, 552, 99, 97, 96,
	17, 15, 95, 87, 16, 17, 17, 17, 87, 19,
	18, 20, 21, 87, 87, 285, 563, 332, 13, 561,
	283, 547, 331, 335, 544, 537, 533, 232, 527, 511,
	503, 334, 234, 413, 329, 19, 18, 20, 21, 551,
	285, 337, 559, 330, 13, 283, 551, 321, 304, 286,
	25, 102, 281, 531, 530, 418, 101, 477, 411, 410,
	479, 100, 86, 390, 366, 359, 322, 338, 350, 24,
	387, 364, 546, 294, 123, 11, 336, 11, 11, 29,
	310, 282, 301, 299, 298, 296, 545, 357, 358, 355,
	344, 419, 512, 300, 417, 297, 495, 11, 370, 372,
	373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 75, 389, 494, 391, 121, 10, 5, 10,
	10, 478, 23, 395, 469, 109, 310, 412, 395, 406,
	109, 388, 87, 122, 9, 294, 9, 9, 422, 10,
	29, 23, 29, 399, 3, 76, 400, 22, 27, 28,
	279, 12, 229, 181, 414, 178, 9, 124, 323, 182,
	470, 129, 473, 314, 420, 136, 128, 424, 127, 231,
	423, 120, 292, 487, 291, 474, 475, 403, 486, 482,
	109, 481, 426, 235, 133, 428, 236, 142, 185, 430,
	497, 238, 145, 422, 371, 349, 351, 397, 108, 293,
	548, 415, 493, 7, 6, 2, 1, 502, 504, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 509, 0, 0,
	0, 0, 0, 0, 0, 0, 514, 0, 0, 510,
	0, 0, 0, 0, 515, 0, 521, 0, 516, 0,
	0, 0, 524, 526, 0, 0, 0, 0, 0, 0,
	0, 76, 109, 529, 106, 528, 0, 0, 532, 0,
	536, 0, 0, 0, 487, 542, 0, 0, 0, 486,
	541, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 550, 303, 0, 554, 0, 0, 0, 0,
	0, 550, 0, 556, 558, 303, 0, 560, 0, 564,
	0, 0, 0, 0, 0, 303, 0, 567, 303, 484,
	0, 29, 114, 111, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 353,
	113, 112, 0, 0, 0, 483, 29, 114, 111, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 353, 113, 112, 29, 114, 111,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 402, 0, 0, 113, 112, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 401, 0, 289, 0, 0, 0, 295, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 0, 0, 0, 0, 0, 288, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 295,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 78,
	146, 147, 148, 149, 150, 151, 17, 152, 153, 154,
	155, 141, 140, 139, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	135, 144, 134, 172, 173, 137, 19, 18, 20, 174,
	175, 176, 177, 0, 0, 130, 0, 0, 568, 131,
	0, 0, 143, 0, 146, 147, 148, 149, 150, 151,
	17, 152, 153, 154, 155, 141, 140, 139, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 135, 144, 134, 172, 173, 137,
	19, 18, 20, 174, 175, 176, 177, 0, 0, 130,
	0, 0, 566, 131, 0, 0, 143, 0, 146, 147,
	148, 149, 150, 151, 17, 152, 153, 154, 155, 141,
	140, 139, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 135, 144,
	134, 172, 173, 137, 19, 18, 20, 174, 175, 176,
	177, 0, 0, 130, 0, 0, 562, 131, 0, 0,
	143, 0, 146, 147, 148, 149, 150, 151, 17, 152,
	153, 154, 155, 141, 140, 139, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 135, 144, 134, 172, 173, 137, 19, 18,
	20, 174, 175, 176, 177, 0, 0, 130, 0, 0,
	553, 131, 0, 0, 143, 0, 146, 147, 148, 149,
	150, 151, 17, 152, 153, 154, 155, 141, 140, 139,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 171, 135, 144, 134, 172,
	173, 137, 19, 18, 20, 174, 175, 176, 177, 0,
	0, 130, 0, 0, 302, 131, 0, 0, 143, 0,
	146, 147, 148, 149, 150, 151, 17, 152, 153, 154,
	155, 141, 140, 139, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	135, 144, 134, 172, 173, 137, 19, 18, 20, 174,
	175, 176, 177, 0, 0, 130, 0, 0, 233, 0,
	0, 0, 143, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 141, 140, 139, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 0,
	0, 328, 233, 0, 0, 237, 0, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 141, 140,
	139, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 480, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 305, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 0,
	0, 0, 0, 0, 425, 0, 0, 0, 83, 431,
	432, 433, 434, 435, 436, 17, 437, 438, 439, 440,
	0, 0, 0, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 427, 456,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 0, 0, 0, 0, 0, 501, 425, 0,
	0, 429, 0, 431, 432, 433, 434, 435, 436, 17,
	437, 438, 439, 440, 0, 0, 0, 441, 442, 443,
	444, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 427, 456, 457, 458, 459, 460, 461, 462,
	463, 464, 465, 466, 467, 468, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 429, 188, 189, 190, 191,
	192, 193, 17, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	221, 186, 222, 223, 224, 225, 226, 227, 228, 0,
	184, 183, 0, 0, 319, 188, 189, 190, 191, 192,
	193, 17, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	186, 222, 223, 224, 225, 226, 227, 228, 356, 0,
	183, 0, 0, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74,
}

var protoPact = [...]int{
	196, -1000, 222, 222, 248, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 228, 368, 1829, 934, 1829, 1829,
	1423, 1829, 222, -1000, 366, -1000, 240, 366, 366, -1000,
	154, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 159, -1000, -1000, 1423, 178,
	175, 174, 109, 1829, 173, 239, -1000, -1000, 234, 229,
	-1000, 1829, 693, 934, -19, 1263, 1738, 1370, 109, 223,
	-1000, -1000, -1000, -1000, 227, -1000, -1000, 358, -1000, -1000,
	812, -1000, 309, 307, -1000, -1000, -1000, -1000, 1209, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 226, 1529, 1829, 351, 1829, 1829, 305, -1000, -1000,
	-1000, -1000, 153, 1829, 39, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1689, -1000,
	-1000, -1000, -1000, -1000, 225, 245, 138, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1316,
	-1000, -1000, -1000, 221, 1529, 1829, 142, 1829, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 198,
	-1000, -1000, -1000, -1000, 219, 1829, -1000, 165, -1000, 130,
	-1000, 873, 139, 62, -1000, 1786, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1829, 1829, 244, 79, -1000,
	261, 169, 243, 137, 136, 358, 1829, 109, 306, -1000,
	-1000, -1000, 116, 132, -1000, 260, -1000, 356, -1000, -1000,
	-1000, 1829, 242, 1829, 109, -1000, -1000, -1000, 33, -1000,
	-1000, -1000, -1000, 46, -1000, 134, -1000, -1000, 46, -1000,
	-1000, -1000, -1000, 751, 95, 55, -25, 238, 237, 352,
	-1000, 211, 351, 934, 280, 1636, 349, -1000, -1000, 366,
	-1000, 114, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 110, 116, -1000, 129, -1000, 236,
	346, -1000, 241, 1476, -1000, -1000, -1000, -1000, 567, -1000,
	100, -1000, 112, 68, -1000, -26, -1000, -1000, 1829, -1000,
	339, 321, 108, -1000, -1000, 67, -1000, 144, -1000, -1000,
	1582, -1000, -1000, -1000, -1000, 208, 1829, 1829, 119, 1829,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 102,
	358, 1423, -1000, 207, -1000, -1000, -1000, 317, 92, 33,
	1423, -20, 58, -1000, -27, -1000, -1000, -1000, -1000, -1000,
	-1000, 117, -1000, 52, 99, 89, -1000, 206, -1000, 934,
	693, -1000, -1000, -1000, 233, 232, 1829, 109, -1000, 204,
	56, -1000, 88, -1000, 203, 163, -22, -1000, -1000, 632,
	-1000, -1000, -1000, 1263, 168, -1000, 202, -1000, -1000, -1000,
	311, 297, -1000, -1000, -1000, -1000, 199, -1000, -1000, 224,
	-1000, -1000, 1155, 1263, -1000, 85, 84, -1000, 217, -1000,
	-1000, -1000, 197, -1000, 1101, -1000, 194, 1263, 167, -1000,
	-1000, -1000, -1000, -1000, 1047, 1263, -1000, 993, -1000,
}

var protoPgo = [...]int{
	0, 436, 435, 348, 374, 434, 433, 2, 15, 431,
	8, 430, 39, 429, 324, 7, 24, 12, 9, 13,
	4, 428, 427, 10, 426, 425, 18, 11, 424, 422,
	421, 419, 418, 32, 23, 417, 416, 415, 17, 414,
	413, 412, 409, 407, 404, 28, 22, 402, 401, 400,
	399, 398, 27, 397, 396, 395, 363, 0, 1, 16,
	394, 393, 391, 389, 35, 21, 19, 38, 388, 387,
	346, 37, 385, 383, 304, 34, 382, 20, 381, 26,
	380, 311, 14,
}

type protoSymType struct {
	union any
	yys   int
}

func (st *protoSymType) bUnion() *ast.RuneNode {
	v, _ := st.union.(*ast.RuneNode)
	return v
}

func (st *protoSymType) cidUnion() *identSlices {
	v, _ := st.union.(*identSlices)
	return v
}

func (st *protoSymType) cmpctOptsUnion() *ast.CompactOptionsNode {
	v, _ := st.union.(*ast.CompactOptionsNode)
	return v
}

func (st *protoSymType) enUnion() *ast.EnumNode {
	v, _ := st.union.(*ast.EnumNode)
	return v
}

func (st *protoSymType) enElementUnion() ast.EnumElement {
	v, _ := st.union.(ast.EnumElement)
	return v
}

func (st *protoSymType) enElementsUnion() []ast.EnumElement {
	v, _ := st.union.([]ast.EnumElement)
	return v
}

func (st *protoSymType) envUnion() *ast.EnumValueNode {
	v, _ := st.union.(*ast.EnumValueNode)
	return v
}

func (st *protoSymType) errUnion() error {
	v, _ := st.union.(error)
	return v
}

func (st *protoSymType) extUnion() *ast.ExtensionRangeNode {
	v, _ := st.union.(*ast.ExtensionRangeNode)
	return v
}

func (st *protoSymType) extElementUnion() ast.ExtendElement {
	v, _ := st.union.(ast.ExtendElement)
	return v
}

func (st *protoSymType) extElementsUnion() []ast.ExtendElement {
	v, _ := st.union.([]ast.ExtendElement)
	return v
}

func (st *protoSymType) extendUnion() *ast.ExtendNode {
	v, _ := st.union.(*ast.ExtendNode)
	return v
}

func (st *protoSymType) fUnion() *ast.FloatLiteralNode {
	v, _ := st.union.(*ast.FloatLiteralNode)
	return v
}

func (st *protoSymType) fileUnion() *ast.FileNode {
	v, _ := st.union.(*ast.FileNode)
	return v
}

func (st *protoSymType) fileElementUnion() ast.FileElement {
	v, _ := st.union.(ast.FileElement)
	return v
}

func (st *protoSymType) fileElementsUnion() []ast.FileElement {
	v, _ := st.union.([]ast.FileElement)
	return v
}

func (st *protoSymType) fldUnion() *ast.FieldNode {
	v, _ := st.union.(*ast.FieldNode)
	return v
}

func (st *protoSymType) grpUnion() *ast.GroupNode {
	v, _ := st.union.(*ast.GroupNode)
	return v
}

func (st *protoSymType) iUnion() *ast.UintLiteralNode {
	v, _ := st.union.(*ast.UintLiteralNode)
	return v
}

func (st *protoSymType) idUnion() *ast.IdentNode {
	v, _ := st.union.(*ast.IdentNode)
	return v
}

func (st *protoSymType) ilUnion() ast.IntValueNode {
	v, _ := st.union.(ast.IntValueNode)
	return v
}

func (st *protoSymType) imprtUnion() *ast.ImportNode {
	v, _ := st.union.(*ast.ImportNode)
	return v
}

func (st *protoSymType) mapFldUnion() *ast.MapFieldNode {
	v, _ := st.union.(*ast.MapFieldNode)
	return v
}

func (st *protoSymType) mapTypeUnion() *ast.MapTypeNode {
	v, _ := st.union.(*ast.MapTypeNode)
	return v
}

func (st *protoSymType) msgUnion() *ast.MessageNode {
	v, _ := st.union.(*ast.MessageNode)
	return v
}

func (st *protoSymType) msgElementUnion() ast.MessageElement {
	v, _ := st.union.(ast.MessageElement)
	return v
}

func (st *protoSymType) msgElementsUnion() []ast.MessageElement {
	v, _ := st.union.([]ast.MessageElement)
	return v
}

func (st *protoSymType) msgLitFldUnion() *ast.MessageFieldNode {
	v, _ := st.union.(*ast.MessageFieldNode)
	return v
}

func (st *protoSymType) msgLitFldsUnion() *messageFieldList {
	v, _ := st.union.(*messageFieldList)
	return v
}

func (st *protoSymType) mtdUnion() *ast.RPCNode {
	v, _ := st.union.(*ast.RPCNode)
	return v
}

func (st *protoSymType) namesUnion() *nameSlices {
	v, _ := st.union.(*nameSlices)
	return v
}

func (st *protoSymType) ooUnion() *ast.OneOfNode {
	v, _ := st.union.(*ast.OneOfNode)
	return v
}

func (st *protoSymType) ooElementUnion() ast.OneOfElement {
	v, _ := st.union.(ast.OneOfElement)
	return v
}

func (st *protoSymType) ooElementsUnion() []ast.OneOfElement {
	v, _ := st.union.([]ast.OneOfElement)
	return v
}

func (st *protoSymType) optUnion() *ast.OptionNode {
	v, _ := st.union.(*ast.OptionNode)
	return v
}

func (st *protoSymType) optNmsUnion() *fieldRefSlices {
	v, _ := st.union.(*fieldRefSlices)
	return v
}

func (st *protoSymType) optsUnion() *compactOptionSlices {
	v, _ := st.union.(*compactOptionSlices)
	return v
}

func (st *protoSymType) pkgUnion() *ast.PackageNode {
	v, _ := st.union.(*ast.PackageNode)
	return v
}

func (st *protoSymType) refUnion() *ast.FieldReferenceNode {
	v, _ := st.union.(*ast.FieldReferenceNode)
	return v
}

func (st *protoSymType) resvdUnion() *ast.ReservedNode {
	v, _ := st.union.(*ast.ReservedNode)
	return v
}

func (st *protoSymType) rngUnion() *ast.RangeNode {
	v, _ := st.union.(*ast.RangeNode)
	return v
}

func (st *protoSymType) rngsUnion() *rangeSlices {
	v, _ := st.union.(*rangeSlices)
	return v
}

func (st *protoSymType) rpcElementUnion() ast.RPCElement {
	v, _ := st.union.(ast.RPCElement)
	return v
}

func (st *protoSymType) rpcElementsUnion() []ast.RPCElement {
	v, _ := st.union.([]ast.RPCElement)
	return v
}

func (st *protoSymType) rpcTypeUnion() *ast.RPCTypeNode {
	v, _ := st.union.(*ast.RPCTypeNode)
	return v
}

func (st *protoSymType) sUnion() *ast.StringLiteralNode {
	v, _ := st.union.(*ast.StringLiteralNode)
	return v
}

func (st *protoSymType) slUnion() *valueSlices {
	v, _ := st.union.(*valueSlices)
	return v
}

func (st *protoSymType) strUnion() []*ast.StringLiteralNode {
	v, _ := st.union.([]*ast.StringLiteralNode)
	return v
}

func (st *protoSymType) svcUnion() *ast.ServiceNode {
	v, _ := st.union.(*ast.ServiceNode)
	return v
}

func (st *protoSymType) svcElementUnion() ast.ServiceElement {
	v, _ := st.union.(ast.ServiceElement)
	return v
}

func (st *protoSymType) svcElementsUnion() []ast.ServiceElement {
	v, _ := st.union.([]ast.ServiceElement)
	return v
}

func (st *protoSymType) synUnion() *ast.SyntaxNode {
	v, _ := st.union.(*ast.SyntaxNode)
	return v
}

func (st *protoSymType) tidUnion() ast.IdentValueNode {
	v, _ := st.union.(ast.IdentValueNode)
	return v
}

func (st *protoSymType) vUnion() ast.ValueNode {
	v, _ := st.union.(ast.ValueNode)
	return v
}

var protoR1 = [...]int{
	0, 1, 1, 1, 1, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 5, 5,
	5, 6, 34, 34, 35, 35, 36, 36, 37, 37,
	7, 14, 14, 14, 14, 12, 17, 17, 18, 18,
	18, 21, 21, 21, 21, 21, 21, 21, 21, 77,
	77, 19, 19, 19, 46, 45, 45, 44, 44, 44,
	44, 44, 47, 47, 47, 13, 13, 13, 13, 16,
	16, 16, 25, 25, 20, 20, 20, 20, 22, 22,
	22, 42, 42, 23, 23, 24, 24, 24, 43, 43,
	38, 38, 39, 39, 40, 40, 41, 41, 33, 33,
	33, 15, 9, 9, 8, 52, 52, 51, 60, 60,
	60, 59, 59, 59, 59, 59, 49, 49, 53, 53,
	54, 54, 55, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 69, 69, 67, 67, 65,
	65, 65, 68, 68, 66, 66, 66, 26, 26, 62,
	62, 63, 63, 64, 61, 61, 70, 72, 72, 72,
	71, 71, 71, 71, 71, 71, 73, 73, 56, 58,
	58, 58, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 48, 48, 48, 48, 74,
	76, 76, 76, 75, 75, 75, 75, 50, 50, 50,
	50, 78, 80, 80, 80, 79, 79, 79, 79, 79,
	81, 81, 82, 82, 11, 11, 11, 10, 10, 10,
	10, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27,
}

var protoR2 = [...]int{
	0, 1, 1, 2, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 4, 3, 4,
	4, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	5, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 1, 2, 2, 1,
	2, 3, 2, 3, 1, 1, 2, 1, 2, 2,
	2, 2, 3, 2, 3, 1, 3, 5, 3, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 3, 2,
	3, 1, 3, 1, 1, 3, 2, 3, 1, 3,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 3, 1, 3, 3, 8, 9, 5, 2, 1,
	0, 1, 1, 1, 2, 1, 5, 6, 7, 8,
	5, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 1, 3, 1,
	3, 3, 1, 3, 1, 3, 3, 1, 2, 3,
	1, 3, 1, 3, 1, 3, 5, 2, 1, 0,
	1, 1, 1, 1, 2, 1, 4, 5, 5, 2,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 6, 7, 5, 6, 5,
	2, 1, 0, 1, 1, 2, 1, 6, 7, 5,
	6, 5, 2, 1, 0, 1, 1, 1, 2, 1,
	6, 8, 4, 3, 2, 1, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var protoChk = [...]int{
	-1000, -1, -2, -4, 8, -3, -5, -6, -7, -56,
	-70, -74, -78, 52, 2, 9, 12, 13, 44, 43,
	45, 46, -4, -3, 51, 52, -77, 10, 11, 4,
	-34, -27, 7, 8, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, -14, -27, -12, 65, -27,
	-27, -38, -34, 59, -27, -77, 52, 4, -77, -77,
	52, 59, 51, 59, -38, 54, 54, 54, -34, 54,
	52, 52, 52, -27, -17, -18, -19, -77, -21, -27,
	54, 6, 64, 63, 5, -27, -12, 66, -58, -57,
	-48, -70, -56, -74, -69, -52, -7, -51, -54, -62,
	52, 2, -33, -39, 39, 37, -55, 42, -64, 20,
	19, 18, -35, 59, 38, -29, 7, 8, 9, 10,
	11, 12, 14, 15, 16, 17, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 40, 41, 46, 47, 48, 49, -72, -71,
	-7, -73, -63, 52, 2, -32, 42, -64, 7, 8,
	9, 10, 11, 12, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 43, 44, 45, 46, 47, 48, 49, -76,
	-75, -50, -52, 2, -33, -40, -36, 59, -30, 7,
	8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, -80,
	-79, -7, -81, 52, 2, 47, 52, -46, 55, 2,
	-45, -44, -47, -13, -27, 67, 6, 16, 5, 6,
	16, 5, 55, -57, 52, 36, -38, -27, -67, -65,
	5, -27, -27, -67, -61, -77, 59, -34, 62, 55,
	-71, 52, 51, -68, -66, -26, 5, 64, 55, -75,
	52, -38, -27, 59, -34, 55, -79, 52, -27, 55,
	55, 60, 52, 53, -45, 2, 60, 52, 53, -25,
	-20, -24, -19, 62, 67, -34, 2, -27, -27, 51,
	52, -15, 60, 67, 40, 54, 51, 52, 52, 60,
	-27, -28, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, -26, 60, 52, 40, 5, -27,
	51, -27, -82, 65, -16, -18, -20, -22, 67, -16,
	-46, 61, 2, -43, 68, 2, -20, 68, 57, 68,
	51, 51, 5, 52, -65, -9, -8, -14, 5, 41,
	-60, -59, -7, -49, -53, 2, -41, 36, -37, 59,
	-31, 7, 8, 9, 10, 11, 12, 14, 15, 16,
	17, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 5,
	-77, 60, 52, -15, -66, -26, 41, 51, 5, 49,
	48, -38, -42, 68, 2, -23, -18, -20, 61, 61,
	68, 60, 68, -34, 5, 5, 52, -15, 68, 60,
	51, 55, -59, 52, -27, -27, 59, -34, 52, -15,
	-38, 52, 5, 52, -15, -82, -38, 66, 68, 60,
	68, -20, 68, 54, -15, 52, -15, 52, -8, -17,
	51, 51, -27, 52, 61, 52, -15, 52, 52, 54,
	66, -23, -58, 54, 52, 5, 5, 52, -11, -10,
	-7, 52, 2, 55, -58, 52, -15, 54, -15, 55,
	-10, 52, 55, 52, -58, 54, 55, -58, 55,
}

var protoDef = [...]int{
	-2, -2, -2, -2, 0, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 16, 0, 0, 0, 0, 0,
	0, 0, -2, 5, 0, 15, 0, 0, 0, 49,
	0, 22, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
	392, 393, 394, 395, 396, 397, 398, 399, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	412, 413, 414, 415, 416, 0, 31, 33, 0, 0,
	0, 0, 90, 0, 0, 0, 18, 50, 0, 0,
	21, 0, 0, 0, 0, -2, -2, -2, 91, -2,
	17, 19, 20, 23, 0, 36, 37, 38, 39, 40,
	0, 41, 0, 0, 46, 32, 34, 35, 0, 170,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 184, 0, 0, 0, 0, 0, 0, 150, 98,
	99, 100, 92, 0, 247, 24, 221, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 248, 249, 250, 251, 252, 253, 0, 158,
	160, 161, 162, 163, 165, 0, 0, 152, 294, 295,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	306, 307, 308, 309, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 333, 334, 0,
	191, 193, 194, 196, 0, 0, 94, 0, 26, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 0,
	203, 205, 206, 207, 209, 0, 30, 0, 52, 0,
	54, -2, 57, 0, 65, 0, 42, 45, 48, 43,
	44, 47, 168, 169, 183, 403, 0, 0, 0, 137,
	139, 0, 0, 0, 0, 154, 0, 93, 0, 156,
	157, 164, 0, 0, 142, 144, 147, 0, 189, 190,
	195, 0, 0, 0, 95, 201, 202, 208, 0, 51,
	53, 60, 61, 0, 56, 0, 58, 59, 0, 63,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, -2, 0, 149, 153, 0,
	25, 0, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 0, 0, 151, 0, 148, 0,
	0, 27, 0, 0, 64, 69, 70, 71, 0, 62,
	0, 76, 0, 0, 86, 0, 88, 66, 0, 68,
	0, 0, 0, 136, 138, 0, 102, 0, 140, 141,
	0, 109, 111, 112, 113, 115, 0, 360, 96, 0,
	28, 335, 336, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 0,
	155, 0, 166, 0, 143, 145, 146, 0, 0, 0,
	415, 0, 0, 79, 0, 81, 83, 84, 75, 77,
	85, 0, 87, 0, 0, 0, 187, 0, 101, 0,
	0, 107, 108, 114, 0, 0, 0, 97, 120, 0,
	0, 167, 0, 199, 0, 0, 0, 213, 78, 0,
	80, 89, 67, -2, 0, 185, 0, 188, 103, 104,
	0, 0, 29, 121, 122, 197, 0, 200, 210, -2,
	212, 82, 0, -2, 186, 0, 0, 198, 0, 215,
	217, 218, 220, 105, 0, 116, 0, -2, 0, 211,
	214, 219, 106, 117, 0, -2, 118, 0, 119,
}

var protoTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 74, 73, 72, 70, 3,
	65, 66, 69, 63, 60, 64, 59, 57, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 53, 52,
	62, 51, 61, 58, 75, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 67, 56, 68, 71, 3, 78, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 54, 3, 55, 77,
}

var protoTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50,
}

var protoTok3 = [...]int{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

func protoIaddr(v any) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := protoPact[state]
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && protoChk[protoAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || protoExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := protoExca[i]
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = protoTok1[0]
		goto out
	}
	if char < len(protoTok1) {
		token = protoTok1[char]
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = protoTok2[char-protoPrivate]
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = protoTok3[i+0]
		if token == char {
			token = protoTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = protoTok2[1] /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = protoPact[protostate]
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = protoAct[proton]
	if protoChk[proton] == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = protoDef[protostate]
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && protoExca[xi+1] == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = protoExca[xi+0]
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = protoExca[xi+1]
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = protoPact[protoS[protop].yys] + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = protoAct[proton] /* simulate a shift of "error" */
					if protoChk[protostate] == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= protoR2[proton]
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = protoR1[proton]
	protog := protoPgo[proton]
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = protoAct[protog]
	} else {
		protostate = protoAct[protoj]
		if protoChk[protostate] != -proton {
			protostate = protoAct[protog]
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *ast.FileNode
		{
			lex := protolex.(*protoLex)
			protoLOCAL = ast.NewFileNode(lex.info, protoDollar[1].synUnion(), nil, lex.eof)
			lex.res = protoLOCAL
		}
		protoVAL.union = protoLOCAL
	case 2:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *ast.FileNode
		{
			lex := protolex.(*protoLex)
			protoLOCAL = ast.NewFileNode(lex.info, nil, protoDollar[1].fileElementsUnion(), lex.eof)
			lex.res = protoLOCAL
		}
		protoVAL.union = protoLOCAL
	case 3:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL *ast.FileNode
		{
			lex := protolex.(*protoLex)
			protoLOCAL = ast.NewFileNode(lex.info, protoDollar[1].synUnion(), protoDollar[2].fileElementsUnion(), lex.eof)
			lex.res = protoLOCAL
		}
		protoVAL.union = protoLOCAL
	case 4:
		protoDollar = protoS[protopt-0 : protopt+1]
		var protoLOCAL *ast.FileNode
		{
			lex := protolex.(*protoLex)
			protoLOCAL = ast.NewFileNode(lex.info, nil, nil, lex.eof)
			lex.res = protoLOCAL
		}
		protoVAL.union = protoLOCAL
	case 5:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL []ast.FileElement
		{
			if protoDollar[2].fileElementUnion() != nil {
				protoLOCAL = append(protoDollar[1].fileElementsUnion(), protoDollar[2].fileElementUnion())
			} else {
				protoLOCAL = protoDollar[1].fileElementsUnion()
			}
		}
		protoVAL.union = protoLOCAL
	case 6:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL []ast.FileElement
		{
			if protoDollar[1].fileElementUnion() != nil {
				protoLOCAL = []ast.FileElement{protoDollar[1].fileElementUnion()}
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 7:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.FileElement
		{
			protoLOCAL = protoDollar[1].imprtUnion()
		}
		protoVAL.union = protoLOCAL
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.FileElement
		{
			protoLOCAL = protoDollar[1].pkgUnion()
		}
		protoVAL.union = protoLOCAL
	case 9:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.FileElement
		{
			protoLOCAL = protoDollar[1].optUnion()
		}
		protoVAL.union = protoLOCAL
	case 10:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.FileElement
		{
			protoLOCAL = protoDollar[1].msgUnion()
		}
		protoVAL.union = protoLOCAL
	case 11:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.FileElement
		{
			protoLOCAL = protoDollar[1].enUnion()
		}
		protoVAL.union = protoLOCAL
	case 12:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.FileElement
		{
			protoLOCAL = protoDollar[1].extendUnion()
		}
		protoVAL.union = protoLOCAL
	case 13:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.FileElement
		{
			protoLOCAL = protoDollar[1].svcUnion()
		}
		protoVAL.union = protoLOCAL
	case 14:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.FileElement
		{
			protoLOCAL = ast.NewEmptyDeclNode(protoDollar[1].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 15:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.FileElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.FileElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 17:
		protoDollar = protoS[protopt-4 : protopt+1]
		var protoLOCAL *ast.SyntaxNode
		{
			protoLOCAL = ast.NewSyntaxNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].bUnion(), toStringValueNode(protoDollar[3].strUnion()), protoDollar[4].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 18:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.ImportNode
		{
			protoLOCAL = ast.NewImportNode(protoDollar[1].idUnion().ToKeyword(), nil, nil, toStringValueNode(protoDollar[2].strUnion()), protoDollar[3].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 19:
		protoDollar = protoS[protopt-4 : protopt+1]
		var protoLOCAL *ast.ImportNode
		{
			protoLOCAL = ast.NewImportNode(protoDollar[1].idUnion().ToKeyword(), nil, protoDollar[2].idUnion().ToKeyword(), toStringValueNode(protoDollar[3].strUnion()), protoDollar[4].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 20:
		protoDollar = protoS[protopt-4 : protopt+1]
		var protoLOCAL *ast.ImportNode
		{
			protoLOCAL = ast.NewImportNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion().ToKeyword(), nil, toStringValueNode(protoDollar[3].strUnion()), protoDollar[4].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 21:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.PackageNode
		{
			protoLOCAL = ast.NewPackageNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].cidUnion().toIdentValueNode(nil), protoDollar[3].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 22:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *identSlices
		{
			protoLOCAL = &identSlices{idents: []*ast.IdentNode{protoDollar[1].idUnion()}}
		}
		protoVAL.union = protoLOCAL
	case 23:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *identSlices
		{
			protoDollar[1].cidUnion().idents = append(protoDollar[1].cidUnion().idents, protoDollar[3].idUnion())
			protoDollar[1].cidUnion().dots = append(protoDollar[1].cidUnion().dots, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].cidUnion()
		}
		protoVAL.union = protoLOCAL
	case 24:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *identSlices
		{
			protoLOCAL = &identSlices{idents: []*ast.IdentNode{protoDollar[1].idUnion()}}
		}
		protoVAL.union = protoLOCAL
	case 25:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *identSlices
		{
			protoDollar[1].cidUnion().idents = append(protoDollar[1].cidUnion().idents, protoDollar[3].idUnion())
			protoDollar[1].cidUnion().dots = append(protoDollar[1].cidUnion().dots, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].cidUnion()
		}
		protoVAL.union = protoLOCAL
	case 26:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *identSlices
		{
			protoLOCAL = &identSlices{idents: []*ast.IdentNode{protoDollar[1].idUnion()}}
		}
		protoVAL.union = protoLOCAL
	case 27:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *identSlices
		{
			protoDollar[1].cidUnion().idents = append(protoDollar[1].cidUnion().idents, protoDollar[3].idUnion())
			protoDollar[1].cidUnion().dots = append(protoDollar[1].cidUnion().dots, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].cidUnion()
		}
		protoVAL.union = protoLOCAL
	case 28:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *identSlices
		{
			protoLOCAL = &identSlices{idents: []*ast.IdentNode{protoDollar[1].idUnion()}}
		}
		protoVAL.union = protoLOCAL
	case 29:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *identSlices
		{
			protoDollar[1].cidUnion().idents = append(protoDollar[1].cidUnion().idents, protoDollar[3].idUnion())
			protoDollar[1].cidUnion().dots = append(protoDollar[1].cidUnion().dots, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].cidUnion()
		}
		protoVAL.union = protoLOCAL
	case 30:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.OptionNode
		{
			optName := ast.NewOptionNameNode(protoDollar[2].optNmsUnion().refs, protoDollar[2].optNmsUnion().dots)
			protoLOCAL = ast.NewOptionNode(protoDollar[1].idUnion().ToKeyword(), optName, protoDollar[3].bUnion(), protoDollar[4].vUnion(), protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 31:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *fieldRefSlices
		{
			fieldReferenceNode := ast.NewFieldReferenceNode(protoDollar[1].idUnion())
			protoLOCAL = &fieldRefSlices{refs: []*ast.FieldReferenceNode{fieldReferenceNode}}
		}
		protoVAL.union = protoLOCAL
	case 32:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *fieldRefSlices
		{
			protoDollar[1].optNmsUnion().refs = append(protoDollar[1].optNmsUnion().refs, ast.NewFieldReferenceNode(protoDollar[3].idUnion()))
			protoDollar[1].optNmsUnion().dots = append(protoDollar[1].optNmsUnion().dots, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].optNmsUnion()
		}
		protoVAL.union = protoLOCAL
	case 33:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *fieldRefSlices
		{
			protoLOCAL = &fieldRefSlices{refs: []*ast.FieldReferenceNode{protoDollar[1].refUnion()}}
		}
		protoVAL.union = protoLOCAL
	case 34:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *fieldRefSlices
		{
			protoDollar[1].optNmsUnion().refs = append(protoDollar[1].optNmsUnion().refs, protoDollar[3].refUnion())
			protoDollar[1].optNmsUnion().dots = append(protoDollar[1].optNmsUnion().dots, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].optNmsUnion()
		}
		protoVAL.union = protoLOCAL
	case 35:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.FieldReferenceNode
		{
			protoLOCAL = ast.NewExtensionFieldReferenceNode(protoDollar[1].bUnion(), protoDollar[2].tidUnion(), protoDollar[3].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 38:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = toStringValueNode(protoDollar[1].strUnion())
		}
		protoVAL.union = protoLOCAL
	case 40:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = protoDollar[1].idUnion()
		}
		protoVAL.union = protoLOCAL
	case 41:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = protoDollar[1].fUnion()
		}
		protoVAL.union = protoLOCAL
	case 42:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = ast.NewSignedFloatLiteralNode(protoDollar[1].bUnion(), protoDollar[2].fUnion())
		}
		protoVAL.union = protoLOCAL
	case 43:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = ast.NewSignedFloatLiteralNode(protoDollar[1].bUnion(), protoDollar[2].fUnion())
		}
		protoVAL.union = protoLOCAL
	case 44:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].idUnion().ToKeyword())
			protoLOCAL = ast.NewSignedFloatLiteralNode(protoDollar[1].bUnion(), f)
		}
		protoVAL.union = protoLOCAL
	case 45:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].idUnion().ToKeyword())
			protoLOCAL = ast.NewSignedFloatLiteralNode(protoDollar[1].bUnion(), f)
		}
		protoVAL.union = protoLOCAL
	case 46:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = protoDollar[1].iUnion()
		}
		protoVAL.union = protoLOCAL
	case 47:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = ast.NewPositiveUintLiteralNode(protoDollar[1].bUnion(), protoDollar[2].iUnion())
		}
		protoVAL.union = protoLOCAL
	case 48:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			if protoDollar[2].iUnion().Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoLOCAL = ast.NewSignedFloatLiteralNode(protoDollar[1].bUnion(), protoDollar[2].iUnion())
			} else {
				protoLOCAL = ast.NewNegativeIntLiteralNode(protoDollar[1].bUnion(), protoDollar[2].iUnion())
			}
		}
		protoVAL.union = protoLOCAL
	case 49:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL []*ast.StringLiteralNode
		{
			protoLOCAL = []*ast.StringLiteralNode{protoDollar[1].sUnion()}
		}
		protoVAL.union = protoLOCAL
	case 50:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL []*ast.StringLiteralNode
		{
			protoLOCAL = append(protoDollar[1].strUnion(), protoDollar[2].sUnion())
		}
		protoVAL.union = protoLOCAL
	case 51:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			if protoDollar[2].msgLitFldsUnion() == nil {
				protoLOCAL = ast.NewMessageLiteralNode(protoDollar[1].bUnion(), nil, nil, protoDollar[3].bUnion())
			} else {
				fields, delimiters := protoDollar[2].msgLitFldsUnion().toNodes()
				protoLOCAL = ast.NewMessageLiteralNode(protoDollar[1].bUnion(), fields, delimiters, protoDollar[3].bUnion())
			}
		}
		protoVAL.union = protoLOCAL
	case 52:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = ast.NewMessageLiteralNode(protoDollar[1].bUnion(), nil, nil, protoDollar[2].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 53:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 56:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL *messageFieldList
		{
			if protoDollar[1].msgLitFldsUnion() != nil {
				protoDollar[1].msgLitFldsUnion().next = protoDollar[2].msgLitFldsUnion()
				protoLOCAL = protoDollar[1].msgLitFldsUnion()
			} else {
				protoLOCAL = protoDollar[2].msgLitFldsUnion()
			}
		}
		protoVAL.union = protoLOCAL
	case 57:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *messageFieldList
		{
			if protoDollar[1].msgLitFldUnion() != nil {
				protoLOCAL = &messageFieldList{field: protoDollar[1].msgLitFldUnion()}
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 58:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL *messageFieldList
		{
			if protoDollar[1].msgLitFldUnion() != nil {
				protoLOCAL = &messageFieldList{field: protoDollar[1].msgLitFldUnion(), delimiter: protoDollar[2].bUnion()}
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 59:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL *messageFieldList
		{
			if protoDollar[1].msgLitFldUnion() != nil {
				protoLOCAL = &messageFieldList{field: protoDollar[1].msgLitFldUnion(), delimiter: protoDollar[2].bUnion()}
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 60:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL *messageFieldList
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 61:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL *messageFieldList
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 62:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.MessageFieldNode
		{
			if protoDollar[1].refUnion() != nil {
				protoLOCAL = ast.NewMessageFieldNode(protoDollar[1].refUnion(), protoDollar[2].bUnion(), protoDollar[3].vUnion())
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 63:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL *ast.MessageFieldNode
		{
			if protoDollar[1].refUnion() != nil {
				protoLOCAL = ast.NewMessageFieldNode(protoDollar[1].refUnion(), nil, protoDollar[2].vUnion())
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 64:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.MessageFieldNode
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 65:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *ast.FieldReferenceNode
		{
			protoLOCAL = ast.NewFieldReferenceNode(protoDollar[1].idUnion())
		}
		protoVAL.union = protoLOCAL
	case 66:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.FieldReferenceNode
		{
			protoLOCAL = ast.NewExtensionFieldReferenceNode(protoDollar[1].bUnion(), protoDollar[2].cidUnion().toIdentValueNode(nil), protoDollar[3].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 67:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.FieldReferenceNode
		{
			protoLOCAL = ast.NewAnyTypeReferenceNode(protoDollar[1].bUnion(), protoDollar[2].cidUnion().toIdentValueNode(nil), protoDollar[3].bUnion(), protoDollar[4].cidUnion().toIdentValueNode(nil), protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 68:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.FieldReferenceNode
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 75:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			if protoDollar[2].msgLitFldsUnion() == nil {
				protoLOCAL = ast.NewMessageLiteralNode(protoDollar[1].bUnion(), nil, nil, protoDollar[3].bUnion())
			} else {
				fields, delimiters := protoDollar[2].msgLitFldsUnion().toNodes()
				protoLOCAL = ast.NewMessageLiteralNode(protoDollar[1].bUnion(), fields, delimiters, protoDollar[3].bUnion())
			}
		}
		protoVAL.union = protoLOCAL
	case 76:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = ast.NewMessageLiteralNode(protoDollar[1].bUnion(), nil, nil, protoDollar[2].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 77:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 78:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			if protoDollar[2].slUnion() == nil {
				protoLOCAL = ast.NewArrayLiteralNode(protoDollar[1].bUnion(), nil, nil, protoDollar[3].bUnion())
			} else {
				protoLOCAL = ast.NewArrayLiteralNode(protoDollar[1].bUnion(), protoDollar[2].slUnion().vals, protoDollar[2].slUnion().commas, protoDollar[3].bUnion())
			}
		}
		protoVAL.union = protoLOCAL
	case 79:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = ast.NewArrayLiteralNode(protoDollar[1].bUnion(), nil, nil, protoDollar[2].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 80:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 81:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *valueSlices
		{
			protoLOCAL = &valueSlices{vals: []ast.ValueNode{protoDollar[1].vUnion()}}
		}
		protoVAL.union = protoLOCAL
	case 82:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *valueSlices
		{
			protoDollar[1].slUnion().vals = append(protoDollar[1].slUnion().vals, protoDollar[3].vUnion())
			protoDollar[1].slUnion().commas = append(protoDollar[1].slUnion().commas, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].slUnion()
		}
		protoVAL.union = protoLOCAL
	case 85:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			if protoDollar[2].slUnion() == nil {
				protoLOCAL = ast.NewArrayLiteralNode(protoDollar[1].bUnion(), nil, nil, protoDollar[3].bUnion())
			} else {
				protoLOCAL = ast.NewArrayLiteralNode(protoDollar[1].bUnion(), protoDollar[2].slUnion().vals, protoDollar[2].slUnion().commas, protoDollar[3].bUnion())
			}
		}
		protoVAL.union = protoLOCAL
	case 86:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = ast.NewArrayLiteralNode(protoDollar[1].bUnion(), nil, nil, protoDollar[2].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 87:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL ast.ValueNode
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 88:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *valueSlices
		{
			protoLOCAL = &valueSlices{vals: []ast.ValueNode{protoDollar[1].vUnion()}}
		}
		protoVAL.union = protoLOCAL
	case 89:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *valueSlices
		{
			protoDollar[1].slUnion().vals = append(protoDollar[1].slUnion().vals, protoDollar[3].vUnion())
			protoDollar[1].slUnion().commas = append(protoDollar[1].slUnion().commas, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].slUnion()
		}
		protoVAL.union = protoLOCAL
	case 90:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.IdentValueNode
		{
			protoLOCAL = protoDollar[1].cidUnion().toIdentValueNode(nil)
		}
		protoVAL.union = protoLOCAL
	case 91:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.IdentValueNode
		{
			protoLOCAL = protoDollar[2].cidUnion().toIdentValueNode(protoDollar[1].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 92:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.IdentValueNode
		{
			protoLOCAL = protoDollar[1].cidUnion().toIdentValueNode(nil)
		}
		protoVAL.union = protoLOCAL
	case 93:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.IdentValueNode
		{
			protoLOCAL = protoDollar[2].cidUnion().toIdentValueNode(protoDollar[1].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 94:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.IdentValueNode
		{
			protoLOCAL = protoDollar[1].cidUnion().toIdentValueNode(nil)
		}
		protoVAL.union = protoLOCAL
	case 95:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.IdentValueNode
		{
			protoLOCAL = protoDollar[2].cidUnion().toIdentValueNode(protoDollar[1].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 96:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.IdentValueNode
		{
			protoLOCAL = protoDollar[1].cidUnion().toIdentValueNode(nil)
		}
		protoVAL.union = protoLOCAL
	case 97:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.IdentValueNode
		{
			protoLOCAL = protoDollar[2].cidUnion().toIdentValueNode(protoDollar[1].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 101:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.CompactOptionsNode
		{
			protoLOCAL = ast.NewCompactOptionsNode(protoDollar[1].bUnion(), protoDollar[2].optsUnion().options, protoDollar[2].optsUnion().commas, protoDollar[3].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 102:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *compactOptionSlices
		{
			protoLOCAL = &compactOptionSlices{options: []*ast.OptionNode{protoDollar[1].optUnion()}}
		}
		protoVAL.union = protoLOCAL
	case 103:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *compactOptionSlices
		{
			protoDollar[1].optsUnion().options = append(protoDollar[1].optsUnion().options, protoDollar[3].optUnion())
			protoDollar[1].optsUnion().commas = append(protoDollar[1].optsUnion().commas, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].optsUnion()
		}
		protoVAL.union = protoLOCAL
	case 104:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.OptionNode
		{
			optName := ast.NewOptionNameNode(protoDollar[1].optNmsUnion().refs, protoDollar[1].optNmsUnion().dots)
			protoLOCAL = ast.NewCompactOptionNode(optName, protoDollar[2].bUnion(), protoDollar[3].vUnion())
		}
		protoVAL.union = protoLOCAL
	case 105:
		protoDollar = protoS[protopt-8 : protopt+1]
		var protoLOCAL *ast.GroupNode
		{
			protoLOCAL = ast.NewGroupNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion().ToKeyword(), protoDollar[3].idUnion(), protoDollar[4].bUnion(), protoDollar[5].iUnion(), nil, protoDollar[6].bUnion(), protoDollar[7].msgElementsUnion(), protoDollar[8].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 106:
		protoDollar = protoS[protopt-9 : protopt+1]
		var protoLOCAL *ast.GroupNode
		{
			protoLOCAL = ast.NewGroupNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion().ToKeyword(), protoDollar[3].idUnion(), protoDollar[4].bUnion(), protoDollar[5].iUnion(), protoDollar[6].cmpctOptsUnion(), protoDollar[7].bUnion(), protoDollar[8].msgElementsUnion(), protoDollar[9].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 107:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.OneOfNode
		{
			protoLOCAL = ast.NewOneOfNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].ooElementsUnion(), protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 108:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL []ast.OneOfElement
		{
			if protoDollar[2].ooElementUnion() != nil {
				protoLOCAL = append(protoDollar[1].ooElementsUnion(), protoDollar[2].ooElementUnion())
			} else {
				protoLOCAL = protoDollar[1].ooElementsUnion()
			}
		}
		protoVAL.union = protoLOCAL
	case 109:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL []ast.OneOfElement
		{
			if protoDollar[1].ooElementUnion() != nil {
				protoLOCAL = []ast.OneOfElement{protoDollar[1].ooElementUnion()}
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 110:
		protoDollar = protoS[protopt-0 : protopt+1]
		var protoLOCAL []ast.OneOfElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 111:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.OneOfElement
		{
			protoLOCAL = protoDollar[1].optUnion()
		}
		protoVAL.union = protoLOCAL
	case 112:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.OneOfElement
		{
			protoLOCAL = protoDollar[1].fldUnion()
		}
		protoVAL.union = protoLOCAL
	case 113:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.OneOfElement
		{
			protoLOCAL = protoDollar[1].grpUnion()
		}
		protoVAL.union = protoLOCAL
	case 114:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.OneOfElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 115:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.OneOfElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 116:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.FieldNode
		{
			protoLOCAL = ast.NewFieldNode(nil, protoDollar[1].tidUnion(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].iUnion(), nil, protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 117:
		protoDollar = protoS[protopt-6 : protopt+1]
		var protoLOCAL *ast.FieldNode
		{
			protoLOCAL = ast.NewFieldNode(nil, protoDollar[1].tidUnion(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].iUnion(), protoDollar[5].cmpctOptsUnion(), protoDollar[6].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 118:
		protoDollar = protoS[protopt-7 : protopt+1]
		var protoLOCAL *ast.GroupNode
		{
			protoLOCAL = ast.NewGroupNode(nil, protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].iUnion(), nil, protoDollar[5].bUnion(), protoDollar[6].msgElementsUnion(), protoDollar[7].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 119:
		protoDollar = protoS[protopt-8 : protopt+1]
		var protoLOCAL *ast.GroupNode
		{
			protoLOCAL = ast.NewGroupNode(nil, protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].iUnion(), protoDollar[5].cmpctOptsUnion(), protoDollar[6].bUnion(), protoDollar[7].msgElementsUnion(), protoDollar[8].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 120:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.MapFieldNode
		{
			protoLOCAL = ast.NewMapFieldNode(protoDollar[1].mapTypeUnion(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].iUnion(), nil, protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 121:
		protoDollar = protoS[protopt-6 : protopt+1]
		var protoLOCAL *ast.MapFieldNode
		{
			protoLOCAL = ast.NewMapFieldNode(protoDollar[1].mapTypeUnion(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].iUnion(), protoDollar[5].cmpctOptsUnion(), protoDollar[6].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 122:
		protoDollar = protoS[protopt-6 : protopt+1]
		var protoLOCAL *ast.MapTypeNode
		{
			protoLOCAL = ast.NewMapTypeNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].bUnion(), protoDollar[3].idUnion(), protoDollar[4].bUnion(), protoDollar[5].tidUnion(), protoDollar[6].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 135:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.ExtensionRangeNode
		{
			protoLOCAL = ast.NewExtensionRangeNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].rngsUnion().ranges, protoDollar[2].rngsUnion().commas, nil, protoDollar[3].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 136:
		protoDollar = protoS[protopt-4 : protopt+1]
		var protoLOCAL *ast.ExtensionRangeNode
		{
			protoLOCAL = ast.NewExtensionRangeNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].rngsUnion().ranges, protoDollar[2].rngsUnion().commas, protoDollar[3].cmpctOptsUnion(), protoDollar[4].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 137:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *rangeSlices
		{
			protoLOCAL = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rngUnion()}}
		}
		protoVAL.union = protoLOCAL
	case 138:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *rangeSlices
		{
			protoDollar[1].rngsUnion().ranges = append(protoDollar[1].rngsUnion().ranges, protoDollar[3].rngUnion())
			protoDollar[1].rngsUnion().commas = append(protoDollar[1].rngsUnion().commas, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].rngsUnion()
		}
		protoVAL.union = protoLOCAL
	case 139:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *ast.RangeNode
		{
			protoLOCAL = ast.NewRangeNode(protoDollar[1].iUnion(), nil, nil, nil)
		}
		protoVAL.union = protoLOCAL
	case 140:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.RangeNode
		{
			protoLOCAL = ast.NewRangeNode(protoDollar[1].iUnion(), protoDollar[2].idUnion().ToKeyword(), protoDollar[3].iUnion(), nil)
		}
		protoVAL.union = protoLOCAL
	case 141:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.RangeNode
		{
			protoLOCAL = ast.NewRangeNode(protoDollar[1].iUnion(), protoDollar[2].idUnion().ToKeyword(), nil, protoDollar[3].idUnion().ToKeyword())
		}
		protoVAL.union = protoLOCAL
	case 142:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *rangeSlices
		{
			protoLOCAL = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rngUnion()}}
		}
		protoVAL.union = protoLOCAL
	case 143:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *rangeSlices
		{
			protoDollar[1].rngsUnion().ranges = append(protoDollar[1].rngsUnion().ranges, protoDollar[3].rngUnion())
			protoDollar[1].rngsUnion().commas = append(protoDollar[1].rngsUnion().commas, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].rngsUnion()
		}
		protoVAL.union = protoLOCAL
	case 144:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *ast.RangeNode
		{
			protoLOCAL = ast.NewRangeNode(protoDollar[1].ilUnion(), nil, nil, nil)
		}
		protoVAL.union = protoLOCAL
	case 145:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.RangeNode
		{
			protoLOCAL = ast.NewRangeNode(protoDollar[1].ilUnion(), protoDollar[2].idUnion().ToKeyword(), protoDollar[3].ilUnion(), nil)
		}
		protoVAL.union = protoLOCAL
	case 146:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.RangeNode
		{
			protoLOCAL = ast.NewRangeNode(protoDollar[1].ilUnion(), protoDollar[2].idUnion().ToKeyword(), nil, protoDollar[3].idUnion().ToKeyword())
		}
		protoVAL.union = protoLOCAL
	case 147:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.IntValueNode
		{
			protoLOCAL = protoDollar[1].iUnion()
		}
		protoVAL.union = protoLOCAL
	case 148:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.IntValueNode
		{
			protoLOCAL = ast.NewNegativeIntLiteralNode(protoDollar[1].bUnion(), protoDollar[2].iUnion())
		}
		protoVAL.union = protoLOCAL
	case 149:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.ReservedNode
		{
			protoLOCAL = ast.NewReservedRangesNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].rngsUnion().ranges, protoDollar[2].rngsUnion().commas, protoDollar[3].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 151:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.ReservedNode
		{
			protoLOCAL = ast.NewReservedRangesNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].rngsUnion().ranges, protoDollar[2].rngsUnion().commas, protoDollar[3].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 153:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.ReservedNode
		{
			protoLOCAL = ast.NewReservedNamesNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].namesUnion().names, protoDollar[2].namesUnion().commas, protoDollar[3].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 154:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL *nameSlices
		{
			protoLOCAL = &nameSlices{names: []ast.StringValueNode{toStringValueNode(protoDollar[1].strUnion())}}
		}
		protoVAL.union = protoLOCAL
	case 155:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *nameSlices
		{
			protoDollar[1].namesUnion().names = append(protoDollar[1].namesUnion().names, toStringValueNode(protoDollar[3].strUnion()))
			protoDollar[1].namesUnion().commas = append(protoDollar[1].namesUnion().commas, protoDollar[2].bUnion())
			protoLOCAL = protoDollar[1].namesUnion()
		}
		protoVAL.union = protoLOCAL
	case 156:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.EnumNode
		{
			protoLOCAL = ast.NewEnumNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].enElementsUnion(), protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 157:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL []ast.EnumElement
		{
			if protoDollar[2].enElementUnion() != nil {
				protoLOCAL = append(protoDollar[1].enElementsUnion(), protoDollar[2].enElementUnion())
			} else {
				protoLOCAL = protoDollar[1].enElementsUnion()
			}
		}
		protoVAL.union = protoLOCAL
	case 158:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL []ast.EnumElement
		{
			if protoDollar[1].enElementUnion() != nil {
				protoLOCAL = []ast.EnumElement{protoDollar[1].enElementUnion()}
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 159:
		protoDollar = protoS[protopt-0 : protopt+1]
		var protoLOCAL []ast.EnumElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 160:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.EnumElement
		{
			protoLOCAL = protoDollar[1].optUnion()
		}
		protoVAL.union = protoLOCAL
	case 161:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.EnumElement
		{
			protoLOCAL = protoDollar[1].envUnion()
		}
		protoVAL.union = protoLOCAL
	case 162:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.EnumElement
		{
			protoLOCAL = protoDollar[1].resvdUnion()
		}
		protoVAL.union = protoLOCAL
	case 163:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.EnumElement
		{
			protoLOCAL = ast.NewEmptyDeclNode(protoDollar[1].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 164:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.EnumElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 165:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.EnumElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 166:
		protoDollar = protoS[protopt-4 : protopt+1]
		var protoLOCAL *ast.EnumValueNode
		{
			protoLOCAL = ast.NewEnumValueNode(protoDollar[1].idUnion(), protoDollar[2].bUnion(), protoDollar[3].ilUnion(), nil, protoDollar[4].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 167:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.EnumValueNode
		{
			protoLOCAL = ast.NewEnumValueNode(protoDollar[1].idUnion(), protoDollar[2].bUnion(), protoDollar[3].ilUnion(), protoDollar[4].cmpctOptsUnion(), protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 168:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.MessageNode
		{
			protoLOCAL = ast.NewMessageNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].msgElementsUnion(), protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 169:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL []ast.MessageElement
		{
			if protoDollar[2].msgElementUnion() != nil {
				protoLOCAL = append(protoDollar[1].msgElementsUnion(), protoDollar[2].msgElementUnion())
			} else {
				protoLOCAL = protoDollar[1].msgElementsUnion()
			}
		}
		protoVAL.union = protoLOCAL
	case 170:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL []ast.MessageElement
		{
			if protoDollar[1].msgElementUnion() != nil {
				protoLOCAL = []ast.MessageElement{protoDollar[1].msgElementUnion()}
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 171:
		protoDollar = protoS[protopt-0 : protopt+1]
		var protoLOCAL []ast.MessageElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 172:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = protoDollar[1].fldUnion()
		}
		protoVAL.union = protoLOCAL
	case 173:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = protoDollar[1].enUnion()
		}
		protoVAL.union = protoLOCAL
	case 174:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = protoDollar[1].msgUnion()
		}
		protoVAL.union = protoLOCAL
	case 175:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = protoDollar[1].extendUnion()
		}
		protoVAL.union = protoLOCAL
	case 176:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = protoDollar[1].extUnion()
		}
		protoVAL.union = protoLOCAL
	case 177:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = protoDollar[1].grpUnion()
		}
		protoVAL.union = protoLOCAL
	case 178:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = protoDollar[1].optUnion()
		}
		protoVAL.union = protoLOCAL
	case 179:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = protoDollar[1].ooUnion()
		}
		protoVAL.union = protoLOCAL
	case 180:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = protoDollar[1].mapFldUnion()
		}
		protoVAL.union = protoLOCAL
	case 181:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = protoDollar[1].resvdUnion()
		}
		protoVAL.union = protoLOCAL
	case 182:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = ast.NewEmptyDeclNode(protoDollar[1].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 183:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 184:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.MessageElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 185:
		protoDollar = protoS[protopt-6 : protopt+1]
		var protoLOCAL *ast.FieldNode
		{
			protoLOCAL = ast.NewFieldNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].tidUnion(), protoDollar[3].idUnion(), protoDollar[4].bUnion(), protoDollar[5].iUnion(), nil, protoDollar[6].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 186:
		protoDollar = protoS[protopt-7 : protopt+1]
		var protoLOCAL *ast.FieldNode
		{
			protoLOCAL = ast.NewFieldNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].tidUnion(), protoDollar[3].idUnion(), protoDollar[4].bUnion(), protoDollar[5].iUnion(), protoDollar[6].cmpctOptsUnion(), protoDollar[7].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 187:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.FieldNode
		{
			protoLOCAL = ast.NewFieldNode(nil, protoDollar[1].tidUnion(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].iUnion(), nil, protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 188:
		protoDollar = protoS[protopt-6 : protopt+1]
		var protoLOCAL *ast.FieldNode
		{
			protoLOCAL = ast.NewFieldNode(nil, protoDollar[1].tidUnion(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].iUnion(), protoDollar[5].cmpctOptsUnion(), protoDollar[6].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 189:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.ExtendNode
		{
			protoLOCAL = ast.NewExtendNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].tidUnion(), protoDollar[3].bUnion(), protoDollar[4].extElementsUnion(), protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 190:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL []ast.ExtendElement
		{
			if protoDollar[2].extElementUnion() != nil {
				protoLOCAL = append(protoDollar[1].extElementsUnion(), protoDollar[2].extElementUnion())
			} else {
				protoLOCAL = protoDollar[1].extElementsUnion()
			}
		}
		protoVAL.union = protoLOCAL
	case 191:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL []ast.ExtendElement
		{
			if protoDollar[1].extElementUnion() != nil {
				protoLOCAL = []ast.ExtendElement{protoDollar[1].extElementUnion()}
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 192:
		protoDollar = protoS[protopt-0 : protopt+1]
		var protoLOCAL []ast.ExtendElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 193:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ExtendElement
		{
			protoLOCAL = protoDollar[1].fldUnion()
		}
		protoVAL.union = protoLOCAL
	case 194:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ExtendElement
		{
			protoLOCAL = protoDollar[1].grpUnion()
		}
		protoVAL.union = protoLOCAL
	case 195:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ExtendElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 196:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ExtendElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 197:
		protoDollar = protoS[protopt-6 : protopt+1]
		var protoLOCAL *ast.FieldNode
		{
			protoLOCAL = ast.NewFieldNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].tidUnion(), protoDollar[3].idUnion(), protoDollar[4].bUnion(), protoDollar[5].iUnion(), nil, protoDollar[6].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 198:
		protoDollar = protoS[protopt-7 : protopt+1]
		var protoLOCAL *ast.FieldNode
		{
			protoLOCAL = ast.NewFieldNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].tidUnion(), protoDollar[3].idUnion(), protoDollar[4].bUnion(), protoDollar[5].iUnion(), protoDollar[6].cmpctOptsUnion(), protoDollar[7].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 199:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.FieldNode
		{
			protoLOCAL = ast.NewFieldNode(nil, protoDollar[1].tidUnion(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].iUnion(), nil, protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 200:
		protoDollar = protoS[protopt-6 : protopt+1]
		var protoLOCAL *ast.FieldNode
		{
			protoLOCAL = ast.NewFieldNode(nil, protoDollar[1].tidUnion(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].iUnion(), protoDollar[5].cmpctOptsUnion(), protoDollar[6].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 201:
		protoDollar = protoS[protopt-5 : protopt+1]
		var protoLOCAL *ast.ServiceNode
		{
			protoLOCAL = ast.NewServiceNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion(), protoDollar[3].bUnion(), protoDollar[4].svcElementsUnion(), protoDollar[5].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 202:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL []ast.ServiceElement
		{
			if protoDollar[2].svcElementUnion() != nil {
				protoLOCAL = append(protoDollar[1].svcElementsUnion(), protoDollar[2].svcElementUnion())
			} else {
				protoLOCAL = protoDollar[1].svcElementsUnion()
			}
		}
		protoVAL.union = protoLOCAL
	case 203:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL []ast.ServiceElement
		{
			if protoDollar[1].svcElementUnion() != nil {
				protoLOCAL = []ast.ServiceElement{protoDollar[1].svcElementUnion()}
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 204:
		protoDollar = protoS[protopt-0 : protopt+1]
		var protoLOCAL []ast.ServiceElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 205:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ServiceElement
		{
			protoLOCAL = protoDollar[1].optUnion()
		}
		protoVAL.union = protoLOCAL
	case 206:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ServiceElement
		{
			protoLOCAL = protoDollar[1].mtdUnion()
		}
		protoVAL.union = protoLOCAL
	case 207:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ServiceElement
		{
			protoLOCAL = ast.NewEmptyDeclNode(protoDollar[1].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 208:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.ServiceElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 209:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.ServiceElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 210:
		protoDollar = protoS[protopt-6 : protopt+1]
		var protoLOCAL *ast.RPCNode
		{
			protoLOCAL = ast.NewRPCNode(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion(), protoDollar[3].rpcTypeUnion(), protoDollar[4].idUnion().ToKeyword(), protoDollar[5].rpcTypeUnion(), protoDollar[6].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 211:
		protoDollar = protoS[protopt-8 : protopt+1]
		var protoLOCAL *ast.RPCNode
		{
			protoLOCAL = ast.NewRPCNodeWithBody(protoDollar[1].idUnion().ToKeyword(), protoDollar[2].idUnion(), protoDollar[3].rpcTypeUnion(), protoDollar[4].idUnion().ToKeyword(), protoDollar[5].rpcTypeUnion(), protoDollar[6].bUnion(), protoDollar[7].rpcElementsUnion(), protoDollar[8].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 212:
		protoDollar = protoS[protopt-4 : protopt+1]
		var protoLOCAL *ast.RPCTypeNode
		{
			protoLOCAL = ast.NewRPCTypeNode(protoDollar[1].bUnion(), protoDollar[2].idUnion().ToKeyword(), protoDollar[3].tidUnion(), protoDollar[4].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 213:
		protoDollar = protoS[protopt-3 : protopt+1]
		var protoLOCAL *ast.RPCTypeNode
		{
			protoLOCAL = ast.NewRPCTypeNode(protoDollar[1].bUnion(), nil, protoDollar[2].tidUnion(), protoDollar[3].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 214:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL []ast.RPCElement
		{
			if protoDollar[2].rpcElementUnion() != nil {
				protoLOCAL = append(protoDollar[1].rpcElementsUnion(), protoDollar[2].rpcElementUnion())
			} else {
				protoLOCAL = protoDollar[1].rpcElementsUnion()
			}
		}
		protoVAL.union = protoLOCAL
	case 215:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL []ast.RPCElement
		{
			if protoDollar[1].rpcElementUnion() != nil {
				protoLOCAL = []ast.RPCElement{protoDollar[1].rpcElementUnion()}
			} else {
				protoLOCAL = nil
			}
		}
		protoVAL.union = protoLOCAL
	case 216:
		protoDollar = protoS[protopt-0 : protopt+1]
		var protoLOCAL []ast.RPCElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 217:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.RPCElement
		{
			protoLOCAL = protoDollar[1].optUnion()
		}
		protoVAL.union = protoLOCAL
	case 218:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.RPCElement
		{
			protoLOCAL = ast.NewEmptyDeclNode(protoDollar[1].bUnion())
		}
		protoVAL.union = protoLOCAL
	case 219:
		protoDollar = protoS[protopt-2 : protopt+1]
		var protoLOCAL ast.RPCElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	case 220:
		protoDollar = protoS[protopt-1 : protopt+1]
		var protoLOCAL ast.RPCElement
		{
			protoLOCAL = nil
		}
		protoVAL.union = protoLOCAL
	}
	goto protostack /* stack new state and value */
}
