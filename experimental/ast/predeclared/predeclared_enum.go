// Copyright 2020-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by github.com/bufbuild/protocompile/internal/enum. DO NOT EDIT.

package predeclared

import (
	"fmt"
	"strings"
)

// String implements [fmt.Stringer].
func (v Name) String() string {
	if int(v) < 0 || int(v) > len(_NameStrings) {
		return fmt.Sprintf("Name(%v)", int(v))
	}
	return _NameStrings[int(v)]
}

var _NameStrings = [...]string {
	Unknown: strings.ToLower("Unknown"),
	Int32: strings.ToLower("Int32"),
	Int64: strings.ToLower("Int64"),
	UInt32: strings.ToLower("UInt32"),
	UInt64: strings.ToLower("UInt64"),
	SInt32: strings.ToLower("SInt32"),
	SInt64: strings.ToLower("SInt64"),
	Fixed32: strings.ToLower("Fixed32"),
	Fixed64: strings.ToLower("Fixed64"),
	SFixed32: strings.ToLower("SFixed32"),
	SFixed64: strings.ToLower("SFixed64"),
	Float: strings.ToLower("Float"),
	Double: strings.ToLower("Double"),
	Bool: strings.ToLower("Bool"),
	String: strings.ToLower("String"),
	Bytes: strings.ToLower("Bytes"),
	Map: strings.ToLower("Map"),
	Max: strings.ToLower("Max"),
	True: strings.ToLower("True"),
	False: strings.ToLower("False"),
	Inf: strings.ToLower("Inf"),
	Nan: strings.ToLower("Nan"),
}

// GoString implements [fmt.GoStringer].
func (v Name) GoString() string {
	if int(v) < 0 || int(v) > len(_NameStrings) {
		return fmt.Sprintf("predeclared.Name(%v)", int(v))
	}
	return _NameStrings[int(v)]
}

var _NameGoStrings = [...]string {
	Unknown: "predeclared.Unknown",
	Int32: "predeclared.Int32",
	Int64: "predeclared.Int64",
	UInt32: "predeclared.UInt32",
	UInt64: "predeclared.UInt64",
	SInt32: "predeclared.SInt32",
	SInt64: "predeclared.SInt64",
	Fixed32: "predeclared.Fixed32",
	Fixed64: "predeclared.Fixed64",
	SFixed32: "predeclared.SFixed32",
	SFixed64: "predeclared.SFixed64",
	Float: "predeclared.Float",
	Double: "predeclared.Double",
	Bool: "predeclared.Bool",
	String: "predeclared.String",
	Bytes: "predeclared.Bytes",
	Map: "predeclared.Map",
	Max: "predeclared.Max",
	True: "predeclared.True",
	False: "predeclared.False",
	Inf: "predeclared.Inf",
	Nan: "predeclared.Nan",
}

// Lookup looks up a builtin type by name.
//
// If name does not name a builtin, returns [Unknown].
func Lookup(s string) Name {
	return _NameFromString[s]
}

var _NameFromString = map[string]Name {
	strings.ToLower("Unknown"): Unknown,
	strings.ToLower("Int32"): Int32,
	strings.ToLower("Int64"): Int64,
	strings.ToLower("UInt32"): UInt32,
	strings.ToLower("UInt64"): UInt64,
	strings.ToLower("SInt32"): SInt32,
	strings.ToLower("SInt64"): SInt64,
	strings.ToLower("Fixed32"): Fixed32,
	strings.ToLower("Fixed64"): Fixed64,
	strings.ToLower("SFixed32"): SFixed32,
	strings.ToLower("SFixed64"): SFixed64,
	strings.ToLower("Float"): Float,
	strings.ToLower("Double"): Double,
	strings.ToLower("Bool"): Bool,
	strings.ToLower("String"): String,
	strings.ToLower("Bytes"): Bytes,
	strings.ToLower("Map"): Map,
	strings.ToLower("Max"): Max,
	strings.ToLower("True"): True,
	strings.ToLower("False"): False,
	strings.ToLower("Inf"): Inf,
	strings.ToLower("Nan"): Nan,
}

