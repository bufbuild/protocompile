// Copyright 2020-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by github.com/bufbuild/protocompile/internal/enum. DO NOT EDIT.

package taxa

import (
	"fmt"
)

// String implements [fmt.Stringer].
func (v Noun) String() string {
	if int(v) < 0 || int(v) > len(_NounStrings) {
		return fmt.Sprintf("Noun(%v)", int(v))
	}
	return _NounStrings[int(v)]
}

var _NounStrings = [...]string {
	Unknown: "<unknown>",
	Unrecognized: "unrecognized token",
	TopLevel: "file scope",
	EOF: "end-of-file",
	Decl: "declaration",
	Empty: "empty declaration",
	Syntax: "`syntax` declaration",
	Edition: "`edition` declaration",
	Package: "`package` declaration",
	Import: "import",
	WeakImport: "weak import",
	PublicImport: "public import",
	Extensions: "extension range",
	Reserved: "reserved range",
	Body: "definition body",
	Def: "definition",
	Message: "message definition",
	Enum: "enum definition",
	Service: "service definition",
	Extend: "message extension block",
	Oneof: "oneof definition",
	Option: "option setting",
	CustomOption: "custom option setting",
	Field: "message field",
	EnumValue: "enum value",
	Method: "service method",
	CompactOptions: "compact options",
	MethodIns: "method parameter list",
	MethodOuts: "method return type",
	FieldTag: "message field tag",
	OptionValue: "option setting value",
	QualifiedName: "qualified name",
	FullyQualifiedName: "fully qualified name",
	ExtensionName: "extension name",
	Expr: "expression",
	Range: "range expression",
	Array: "array expression",
	Dict: "message expression",
	DictField: "message field value",
	Type: "type",
	TypePath: "type name",
	TypeParams: "type parameters",
	Whitespace: "whitespace",
	Comment: "comment",
	Ident: "identifier",
	String: "string literal",
	Float: "floating-point literal",
	Int: "integer literal",
	Semicolon: "`;`",
	Comma: "`,`",
	Slash: "`/`",
	Colon: "`:`",
	Equals: "`=`",
	Minus: "`-`",
	Period: "`.`",
	LParen: "`(`",
	LBracket: "`[`",
	LBrace: "`{`",
	LAngle: "`<`",
	RParen: "`)`",
	RBracket: "`]`",
	RBrace: "`}`",
	RAngle: "`>`",
	Parens: "`(...)`",
	Brackets: "`[...]`",
	Braces: "`{...}`",
	Angles: "`<...>`",
	KeywordSyntax: "`syntax`",
	KeywordEdition: "`edition`",
	KeywordImport: "`import`",
	KeywordWeak: "`weak`",
	KeywordPublic: "`public`",
	KeywordPackage: "`package`",
	KeywordOption: "`option`",
	KeywordMessage: "`message`",
	KeywordEnum: "`enum`",
	KeywordService: "`service`",
	KeywordExtend: "`extend`",
	KeywordOneof: "`oneof`",
	KeywordExtensions: "`extensions`",
	KeywordReserved: "`reserved`",
	KeywordTo: "`to`",
	KeywordRPC: "`rpc`",
	KeywordReturns: "`returns`",
	KeywordOptional: "`optional`",
	KeywordRepeated: "`repeated`",
	KeywordRequired: "`required`",
	KeywordGroup: "`group`",
	KeywordStream: "`stream`",
}

// GoString implements [fmt.GoStringer].
func (v Noun) GoString() string {
	if int(v) < 0 || int(v) > len(_NounStrings) {
		return fmt.Sprintf("taxa.Noun(%v)", int(v))
	}
	return _NounStrings[int(v)]
}

var _NounGoStrings = [...]string {
	Unknown: "taxa.Unknown",
	Unrecognized: "taxa.Unrecognized",
	TopLevel: "taxa.TopLevel",
	EOF: "taxa.EOF",
	Decl: "taxa.Decl",
	Empty: "taxa.Empty",
	Syntax: "taxa.Syntax",
	Edition: "taxa.Edition",
	Package: "taxa.Package",
	Import: "taxa.Import",
	WeakImport: "taxa.WeakImport",
	PublicImport: "taxa.PublicImport",
	Extensions: "taxa.Extensions",
	Reserved: "taxa.Reserved",
	Body: "taxa.Body",
	Def: "taxa.Def",
	Message: "taxa.Message",
	Enum: "taxa.Enum",
	Service: "taxa.Service",
	Extend: "taxa.Extend",
	Oneof: "taxa.Oneof",
	Option: "taxa.Option",
	CustomOption: "taxa.CustomOption",
	Field: "taxa.Field",
	EnumValue: "taxa.EnumValue",
	Method: "taxa.Method",
	CompactOptions: "taxa.CompactOptions",
	MethodIns: "taxa.MethodIns",
	MethodOuts: "taxa.MethodOuts",
	FieldTag: "taxa.FieldTag",
	OptionValue: "taxa.OptionValue",
	QualifiedName: "taxa.QualifiedName",
	FullyQualifiedName: "taxa.FullyQualifiedName",
	ExtensionName: "taxa.ExtensionName",
	Expr: "taxa.Expr",
	Range: "taxa.Range",
	Array: "taxa.Array",
	Dict: "taxa.Dict",
	DictField: "taxa.DictField",
	Type: "taxa.Type",
	TypePath: "taxa.TypePath",
	TypeParams: "taxa.TypeParams",
	Whitespace: "taxa.Whitespace",
	Comment: "taxa.Comment",
	Ident: "taxa.Ident",
	String: "taxa.String",
	Float: "taxa.Float",
	Int: "taxa.Int",
	Semicolon: "taxa.Semicolon",
	Comma: "taxa.Comma",
	Slash: "taxa.Slash",
	Colon: "taxa.Colon",
	Equals: "taxa.Equals",
	Minus: "taxa.Minus",
	Period: "taxa.Period",
	LParen: "taxa.LParen",
	LBracket: "taxa.LBracket",
	LBrace: "taxa.LBrace",
	LAngle: "taxa.LAngle",
	RParen: "taxa.RParen",
	RBracket: "taxa.RBracket",
	RBrace: "taxa.RBrace",
	RAngle: "taxa.RAngle",
	Parens: "taxa.Parens",
	Brackets: "taxa.Brackets",
	Braces: "taxa.Braces",
	Angles: "taxa.Angles",
	KeywordSyntax: "taxa.KeywordSyntax",
	KeywordEdition: "taxa.KeywordEdition",
	KeywordImport: "taxa.KeywordImport",
	KeywordWeak: "taxa.KeywordWeak",
	KeywordPublic: "taxa.KeywordPublic",
	KeywordPackage: "taxa.KeywordPackage",
	KeywordOption: "taxa.KeywordOption",
	KeywordMessage: "taxa.KeywordMessage",
	KeywordEnum: "taxa.KeywordEnum",
	KeywordService: "taxa.KeywordService",
	KeywordExtend: "taxa.KeywordExtend",
	KeywordOneof: "taxa.KeywordOneof",
	KeywordExtensions: "taxa.KeywordExtensions",
	KeywordReserved: "taxa.KeywordReserved",
	KeywordTo: "taxa.KeywordTo",
	KeywordRPC: "taxa.KeywordRPC",
	KeywordReturns: "taxa.KeywordReturns",
	KeywordOptional: "taxa.KeywordOptional",
	KeywordRepeated: "taxa.KeywordRepeated",
	KeywordRequired: "taxa.KeywordRequired",
	KeywordGroup: "taxa.KeywordGroup",
	KeywordStream: "taxa.KeywordStream",
}

