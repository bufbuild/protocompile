// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//% descriptor: true
syntax = "proto2";

package buf.test;

import "google/protobuf/descriptor.proto";

option (x) = {
    f32: [0, 0.0, -0, -0.0],
    f32: [1e10, 1E-10, 1e+1],
    f32: [
        inf, -inf,
        nan, -nan,
        Infinity, -InFiNiTy,
        NaN, -nAn
    ],
    f32: 3.14159265358979323846264338327950288419716939937510582097494459, // math.Pi
    f32: 3.40282347E+38,  // f32::MAX 
    f32: 1.17549435E-38,  // f32::MIN_POSITIVE
    f32: 1.1920929E-7     // f32::EPSILON
    f32: [
        // Snap to Infinity.
        1234567890123456789012345678901234567890,
        -1234567890123456789012345678901234567890
    ],

    f64: [0, 0.0, -0, -0.0],
    f64: [1e10, 1E-10, 1e+1],
    f64: [
        inf, -inf,
        nan, -nan,
        Infinity, -InFiNiTy,
        NaN, -nAn
    ],
    f64: 3.14159265358979323846264338327950288419716939937510582097494459, // math.Pi
    f64: 1.7976931348623157E+308, // f32::MAX 
    f64: 2.2250738585072014E-308, // f32::MIN_POSITIVE
    f64: 2.2204460492503131E-16   // f32::EPSILON
    f64: [1e1000, -1e1000],       // Snap to Infinity.

    // Type-checking errors.
    f32: ["foo", true, {}, [], 0 to 1]
    f64: ["foo", true, {}, [], 0 to 1]
};

option (y) = inf;
option (y) = infinity;
option (y) = INF;
option (y) = Infinity;
option (y) = nan;
option (y) = NaN;
option (y) = NAN;

message Foo {
    repeated float f32 = 1;
    repeated double f64 = 2;
}

extend google.protobuf.FileOptions {
    optional Foo x = 1000;
    repeated float y = 1001;
}