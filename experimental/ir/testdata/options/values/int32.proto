// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//% descriptor: true
syntax = "proto2";

package buf.test;

import "google/protobuf/descriptor.proto";

option (x) = {
    i1: [
        0, 1, 2, 3, -1, -2, -3, -4,
        0x7fffffff, -0x80000000, // Max values
        0x80000000, -0x80000001,  // Out-of-range values.
        0x10000000000000000 // *big.Int value.
    ]
    i2: [
        0, 1, 2, 3, -1, -2, -3, -4,
        0x7fffffff, -0x80000000, // Max values
        0x80000000, -0x80000001,  // Out-of-range values.
        0x10000000000000000 // *big.Int value.
    ]
    i3: [
        0, 1, 2, 3, -1, -2, -3, -4,
        0x7fffffff, -0x80000000, // Max values
        0x80000000, -0x80000001,  // Out-of-range values.
        0x10000000000000000 // *big.Int value.
    ]

    u1: [
        0, 1, 2, 3,
        -1, -2,
        0xffffffff, // Max value. 
        0x100000000, -0x80000000, // Out-of-range values.
        0x10000000000000000 // *big.Int value.
    ]
    u2: [
        0, 1, 2, 3,
        -1, -2,
        0xffffffff, // Max value. 
        0x100000000, -0x80000000, // Out-of-range values.
        0x10000000000000000 // *big.Int value.
    ]

    // Type-checking errors.
    i1: [1.5, "foo", true, inf, nan, {}, [], 0 to 1]
    i2: [1.5, "foo", true, inf, nan, {}, [], 0 to 1]
    i3: [1.5, "foo", true, inf, nan, {}, [], 0 to 1]
    u1: [1.5, "foo", true, inf, nan, {}, [], 0 to 1]
    u2: [1.5, "foo", true, inf, nan, {}, [], 0 to 1]
};

message Foo {
    repeated int32 i1 = 1;
    repeated sint32 i2 = 2;
    repeated sfixed32 i3 = 3;

    repeated uint32 u1 = 11;
    repeated fixed32 u2 = 12;
}

extend google.protobuf.FileOptions {
    optional Foo x = 1000;
}