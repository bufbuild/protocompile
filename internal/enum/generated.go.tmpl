// Copyright 2020-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by {{.Binary}}. DO NOT EDIT.

package {{$pkg := .Package}}{{$pkg}}

import (
{{range .Imports}}	{{.}}
{{end -}}
)
{{ range .Enums -}}
{{- $ty := .Type.Name.Name -}}
{{- $e := . -}}

{{- $name := .Methods.String -}}
{{- if ne $name "" -}}
{{- range .Docs.String }}
// {{.}}
{{end -}}
func (v {{$ty}}) {{$name}}() string {
	if int(v) < 0 || int(v) > len(_{{$ty}}Strings) {
		return fmt.Sprintf("{{$ty}}(%v)", int(v))
	}
	return _{{$ty}}Strings[int(v)]
}

var _{{$ty}}Strings = [...]string {
{{range .Values}}{{if .Skip}}{{continue}}{{end}}	{{(index .Value.Names 0).Name}}: {{"" -}}
    {{- if ne $e.Methods.StringFunc "" -}}
        {{$e.Methods.StringFunc}}("{{(index .Value.Names 0).Name}}")
    {{- else if ne .String "" -}}
        {{.String}}
    {{- else -}}
        "{{(index .Value.Names 0).Name}}"
    {{- end }},
{{end -}}
}

{{end -}}

{{- $name = .Methods.GoString -}}
{{- if ne $name "" -}}
{{- range .Docs.GoString -}}
{{with . -}} // {{.}} {{- else -}} // {{- end }}
{{end -}}
func (v {{$ty}}) {{$name}}() string {
	if int(v) < 0 || int(v) > len(_{{$ty}}Strings) {
		return fmt.Sprintf("{{$pkg}}.{{$ty}}(%v)", int(v))
	}
	return _{{$ty}}Strings[int(v)]
}

var _{{$ty}}GoStrings = [...]string {
{{range .Values}}{{if .Skip}}{{continue}}{{end}}	{{(index .Value.Names 0).Name}}: "{{$pkg}}.{{(index .Value.Names 0).Name}}",
{{end -}}
}

{{end -}}

{{- $name = .Methods.FromString -}}
{{- if ne $name "" -}}
{{- range .Docs.FromString -}}
{{with . -}} // {{.}} {{- else -}} // {{- end }}
{{end -}}
func {{$name}}(s string) {{$ty}} {
	return _{{$ty}}FromString[s]
}

var _{{$ty}}FromString = map[string]{{$ty}} {
{{range .Values}}{{if .Skip}}{{continue}}{{end}}	{{"" -}}
    {{- if ne $e.Methods.StringFunc "" -}}
        {{$e.Methods.StringFunc}}("{{(index .Value.Names 0).Name}}")
    {{- else if ne .String "" -}}
        {{.String}}
    {{- else -}}
        "{{(index .Value.Names 0).Name}}"
    {{- end}}: {{(index .Value.Names 0).Name}},
{{end -}}
}

{{end -}}

{{- end -}}