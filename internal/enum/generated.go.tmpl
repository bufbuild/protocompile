// Copyright 2020-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by {{.Binary}}. DO NOT EDIT.{{$input := .}}

package {{.Package}}

{{with .YAML -}}
import "fmt"

//go:generate go run github.com/bufbuild/protocompile/internal/enum
// See {{$input.Path}}.yaml.
{{range $_, $e := .}}
{{makeDocs $e.Docs "" -}}
type {{$e.Name}} {{$e.Type}}

const (
{{range $i, $v := $e.Values -}}{{if and (not $v.HasSuffixDocs) (ne $v.Docs "")}}
{{makeDocs $v.Docs "\t"}}{{end -}}
{{if eq $i 0}}	{{$v.Name}} {{$e.Name}} = iota
{{- else if ne $v.Alias ""}}	{{$v.Name}} = {{$v.Alias}}
{{- else}}	{{$v.Name}}
{{- end}}{{if $v.HasSuffixDocs}} // {{$v.Docs}}{{end}}
{{end -}}
{{with $e.Total}}	{{.}} int = iota{{end -}}
)
{{range $_, $m := $e.Methods -}}
{{- if eq $m.Kind "string"}}
{{makeDocs $m.Docs "" -}}
func (v {{$e.Name}}) {{$m.Name}}() string {
	if int(v) < 0 || int(v) > len(_table_{{$e.Name}}_{{$m.Name}}) {
		return fmt.Sprintf("{{$e.Name}}(%v)", int(v))
	}
	return _table_{{$e.Name}}_{{$m.Name}}[int(v)]
}
{{else if eq $m.Kind "go-string"}}
{{makeDocs $m.Docs "" -}}
func (v {{$e.Name}}) {{$m.Name}}() string {
	if int(v) < 0 || int(v) > len(_table_{{$e.Name}}_{{$m.Name}}) {
		return fmt.Sprintf("{{$input.Package}}{{$e.Name}}(%v)", int(v))
	}
	return _table_{{$e.Name}}_{{$m.Name}}[int(v)]
}
{{else if eq $m.Kind "from-string"}}
{{makeDocs $m.Docs "" -}}
func {{$m.Name}}(s string) {{$e.Name}} {
	return _table_{{$e.Name}}_{{$m.Name}}[s]
}
{{end -}}{{- end -}}
{{range $_, $m := $e.Methods -}}
{{- if eq $m.Kind "string"}}
var _table_{{$e.Name}}_{{$m.Name}} = [...]string {
{{range $e.Values -}}
{{- with .Alias}}{{continue}}{{end -}}
{{- if contains $m.Skip .Name}}{{continue}}{{end}}	{{.Name}}: {{printf "%q" .String}},
{{end -}}
}
{{else if eq $m.Kind "go-string"}}
var _table_{{$e.Name}}_{{$m.Name}} = [...]string {
{{range $e.Values -}}
{{- with .Alias}}{{continue}}{{end -}}
{{- if contains $m.Skip .Name}}{{continue}}{{end}}	{{.Name}}: {{printf "%q" .Name}},
{{end -}}
}
{{else if eq $m.Kind "from-string"}}
var _table_{{$e.Name}}_{{$m.Name}} = map[string]{{$e.Name}} {
{{range $e.Values -}}
{{- with .Alias}}{{continue}}{{end -}}
{{- if contains $m.Skip .Name}}{{continue}}{{end}}	{{printf "%q" .String}}: {{.Name}},
{{end -}}
}
{{end -}}{{- end -}}
{{- end -}}{{- end -}}
