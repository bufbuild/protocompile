// Copyright 2012-2022 The Rust Project Developers.
// See http://rust-lang.org/COPYRIGHT.
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

// NOTE: The following code was generated by "unicode.py", do not edit directly

package width

import "slices"

const (
	widthInfo_DEFAULT                                  widthInfo = 0
	widthInfo_LINE_FEED                                          = 0b0000000000000001
	widthInfo_EMOJI_MODIFIER                                     = 0b0000000000000010
	widthInfo_REGIONAL_INDICATOR                                 = 0b0000000000000011
	widthInfo_SEVERAL_REGIONAL_INDICATOR                         = 0b0000000000000100
	widthInfo_EMOJI_PRESENTATION                                 = 0b0000000000000101
	widthInfo_ZWJ_EMOJI_PRESENTATION                             = 0b0001000000000110
	widthInfo_VS16_ZWJ_EMOJI_PRESENTATION                        = 0b1001000000000110
	widthInfo_KEYCAP_ZWJ_EMOJI_PRESENTATION                      = 0b0001000000000111
	widthInfo_VS16_KEYCAP_ZWJ_EMOJI_PRESENTATION                 = 0b1001000000000111
	widthInfo_REGIONAL_INDICATOR_ZWJ_PRESENTATION                = 0b0000000000001001
	widthInfo_EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION           = 0b0000000000001010
	widthInfo_ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION            = 0b0000000000001011
	widthInfo_TAG_END_ZWJ_EMOJI_PRESENTATION                     = 0b0000000000010000
	widthInfo_TAG_D1_END_ZWJ_EMOJI_PRESENTATION                  = 0b0000000000010001
	widthInfo_TAG_D2_END_ZWJ_EMOJI_PRESENTATION                  = 0b0000000000010010
	widthInfo_TAG_D3_END_ZWJ_EMOJI_PRESENTATION                  = 0b0000000000010011
	widthInfo_TAG_A1_END_ZWJ_EMOJI_PRESENTATION                  = 0b0000000000011001
	widthInfo_TAG_A2_END_ZWJ_EMOJI_PRESENTATION                  = 0b0000000000011010
	widthInfo_TAG_A3_END_ZWJ_EMOJI_PRESENTATION                  = 0b0000000000011011
	widthInfo_TAG_A4_END_ZWJ_EMOJI_PRESENTATION                  = 0b0000000000011100
	widthInfo_TAG_A5_END_ZWJ_EMOJI_PRESENTATION                  = 0b0000000000011101
	widthInfo_TAG_A6_END_ZWJ_EMOJI_PRESENTATION                  = 0b0000000000011110
	widthInfo_VARIATION_SELECTOR_15                              = 0b0100000000000000
	widthInfo_VARIATION_SELECTOR_16                              = 0b1000000000000000
	widthInfo_JOINING_GROUP_ALEF                                 = 0b0011000011111111
	widthInfo_COMBINING_LONG_SOLIDUS_OVERLAY                     = 0b0011110011111111
	widthInfo_SOLIDUS_OVERLAY_ALEF                               = 0b0011100011111111
	widthInfo_HEBREW_LETTER_LAMED                                = 0b0011100000000000
	widthInfo_ZWJ_HEBREW_LETTER_LAMED                            = 0b0011110000000000
	widthInfo_BUGINESE_LETTER_YA                                 = 0b0011100000000001
	widthInfo_ZWJ_BUGINESE_LETTER_YA                             = 0b0011110000000001
	widthInfo_BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA                = 0b0011110000000010
	widthInfo_TIFINAGH_CONSONANT                                 = 0b0011100000000011
	widthInfo_ZWJ_TIFINAGH_CONSONANT                             = 0b0011110000000011
	widthInfo_TIFINAGH_JOINER_CONSONANT                          = 0b0011110000000100
	widthInfo_LISU_TONE_LETTER_MYA_NA_JEU                        = 0b0011110000000101
	widthInfo_OLD_TURKIC_LETTER_ORKHON_I                         = 0b0011100000000110
	widthInfo_ZWJ_OLD_TURKIC_LETTER_ORKHON_I                     = 0b0011110000000110
	widthInfo_KHMER_COENG_ELIGIBLE_LETTER                        = 0b0011110000000111
)

func leBytes32(bytes [4]byte) (x uint32) {
	x |= uint32(bytes[3])
	x <<= 1
	x |= uint32(bytes[2])
	x <<= 1
	x |= uint32(bytes[1])
	x <<= 1
	x |= uint32(bytes[0])
	return
}

type widthInfo uint16

func (w widthInfo) IsLigatureTransparent() bool {
	return (w & 0b0000_1000_0000_0000) == 0b0000_1000_0000_0000
}

func (w widthInfo) SetZWJBit() widthInfo {
	return w | 0b0000_0100_0000_0000
}

func (w widthInfo) IsEmojiPresentation() bool {
	return (w & 0b1000_0000_0000_0000) == 0b1000_0000_0000_0000
}

func (w widthInfo) IsZWJEmojiPresentation() bool {
	return (w & 0b1011_0000_0000_0000) == 0b1001_0000_0000_0000
}

func (w widthInfo) SetEmojiPresentation() widthInfo {
	if (w&0b0010_0000_0000_0000) == 0b0010_0000_0000_0000 || (w&0b1001_0000_0000_0000) == 0b0001_0000_0000_0000 {
		return w | 0b1000_0000_0000_0000
	}
	return widthInfo_VARIATION_SELECTOR_16
}

func (w widthInfo) UnsetEmojiPresentation() widthInfo {
	if (w & 0b0010_0000_0000_0000) == 0b0010_0000_0000_0000 {
		return w & 0b0111_1111_1111_1111
	}
	return 0
}

func (w widthInfo) IsTextPresentation() bool {
	return (w & 0b0100_0000_0000_0000) == 0b0100_0000_0000_0000
}

func (w widthInfo) SetTextPresentation() widthInfo {
	if (w & 0b0010_0000_0000_0000) == 0b0010_0000_0000_0000 {
		return w | 0b0100_0000_0000_0000
	}
	return 0b0100_0000_0000_0000
}

func (w widthInfo) UnsetTextPresentation() widthInfo {
	return w & 0b1011_1111_1111_1111
}

// / Returns the [UAX #11](https://www.unicode.org/reports/tr11/) based width of `c` by
// / consulting a multi-level lookup table.
// /
// / # Maintenance
// / The tables themselves are autogenerated but this function is hardcoded. You should have
// / nothing to worry about if you re-run `unicode.py` (for example, when updating Unicode.)
// / However, if you change the *actual structure* of the lookup tables (perhaps by editing the
// / `make_tables` function in `unicode.py`) you must ensure that this code reflects those changes.
func lookupWidth(c rune) (byte, widthInfo) {
	t1Offset := _WIDTH_ROOT[c>>13]

	// Each sub-table in WIDTH_MIDDLE is 7 bits, and each stored entry is a byte,
	// so each sub-table is 128 bytes in size.
	// (Sub-tables are selected using the computed offset from the previous table.)
	t2Offset := _WIDTH_MIDDLE[int(t1Offset)][int(c)>>7&0x3F]

	// Each sub-table in WIDTH_LEAVES is 6 bits, but each stored entry is 2 bits.
	// This is accomplished by packing four stored entries into one byte.
	// So each sub-table is 2**(7-2) == 32 bytes in size.
	// Since this is the last table, each entry represents an encoded width.
	packedWidths := _WIDTH_LEAVES[int(t2Offset)][int(c)>>2&0x1F]

	// Extract the packed width
	width := (packedWidths >> (2 * (c & 0b11))) & 0b11

	if width < 3 {
		return width, 0
	}
	if c == 0xA {
		return 1, widthInfo_LINE_FEED
	}
	if c == 0x5DC {
		return 1, widthInfo_HEBREW_LETTER_LAMED
	}
	if c >= 0x622 && c <= 0x882 {
		return 1, widthInfo_JOINING_GROUP_ALEF
	}
	if c >= 0x1780 && c <= 0x17AF {
		return 1, widthInfo_KHMER_COENG_ELIGIBLE_LETTER
	}
	if c == 0x17D8 {
		return 3, widthInfo_DEFAULT
	}
	if c == 0x1A10 {
		return 1, widthInfo_BUGINESE_LETTER_YA
	}
	if c >= 0x2D31 && c <= 0x2D6F {
		return 1, widthInfo_TIFINAGH_CONSONANT
	}
	if c >= 0xA4FC && c <= 0xA4FD {
		return 1, widthInfo_LISU_TONE_LETTER_MYA_NA_JEU
	}
	if c == 0xFE0E {
		return 0, widthInfo_VARIATION_SELECTOR_15
	}
	if c == 0xFE0F {
		return 0, widthInfo_VARIATION_SELECTOR_16
	}
	if c == 0x10C03 {
		return 1, widthInfo_OLD_TURKIC_LETTER_ORKHON_I
	}
	if c >= 0x1F1E6 && c <= 0x1F1FF {
		return 1, widthInfo_REGIONAL_INDICATOR
	}
	if c >= 0x1F3FB && c <= 0x1F3FF {
		return 2, widthInfo_EMOJI_MODIFIER
	}
	return 2, widthInfo_EMOJI_PRESENTATION
}

func singleCharWidth(c rune) int {
	if c < 0x7F {
		if c >= 0x20 {
			// U+0020 to U+007F (exclusive) are single-width ASCII codepoints
			return 1
		}
		// U+0000 to U+0020 (exclusive) are control codes
		return -1
	}
	if c >= 0xA0 {
		// No characters >= U+00A0 are control codes, so we can consult the lookup tables
		n, _ := lookupWidth(c)
		return int(n)
	}
	// U+007F to U+00A0 (exclusive) are control codes
	return -1
}

func widthInStr(c rune, nextInfo widthInfo) (byte, widthInfo) {
	if nextInfo.IsEmojiPresentation() {
		if startsEmojiPresentationSeq(c) {
			width := byte(2)
			if nextInfo.IsZWJEmojiPresentation() {
				width = 0
			}
			return width, widthInfo_EMOJI_PRESENTATION
		}
		nextInfo = nextInfo.UnsetEmojiPresentation()
	}
	if c <= 0xA0 {
		switch c {
		case '\n':
			return 1, widthInfo_LINE_FEED
		case '\r':
			if nextInfo == widthInfo_LINE_FEED {
				return 0, 0
			}
			fallthrough
		default:
			return 1, 0
		}
	} else {
		// Fast path
		if nextInfo == 0 {
			return lookupWidth(c)
		}
		if c == 0xFE0F {
			return 0, nextInfo.SetEmojiPresentation()
		}
		if c == 0xFE0E {
			return 0, nextInfo.SetTextPresentation()
		}
		if nextInfo.IsTextPresentation() {
			if startsNonIdeographicTextPresentationSeq(c) {
				return 1, 0
			} else {
				nextInfo = nextInfo.UnsetTextPresentation()
			}
		}
		if nextInfo.IsLigatureTransparent() {
			if c == 0x200D {
				return 0, nextInfo.SetZWJBit()
			} else if isLigatureTransparent(c) {
				return 0, nextInfo
			}
		}

		switch {
		case nextInfo == widthInfo_COMBINING_LONG_SOLIDUS_OVERLAY && isSolidusTransparent(c):
			n, _ := lookupWidthCJK(c)
			return n, widthInfo_COMBINING_LONG_SOLIDUS_OVERLAY
		case nextInfo == widthInfo_JOINING_GROUP_ALEF && c == 0x0338:
			return 0, widthInfo_SOLIDUS_OVERLAY_ALEF
		case nextInfo == widthInfo_JOINING_GROUP_ALEF || nextInfo == widthInfo_SOLIDUS_OVERLAY_ALEF:
			if c == 0x644 {
				return 0, 0
			}
			if c <= 0x6B5 || c >= 0x6B8 {
				return 0, 0
			}
			if c == 0x76A {
				return 0, 0
			}
			if c == 0x8A6 {
				return 0, 0
			}
			if c == 0x8C7 {
				return 0, 0
			}
		case nextInfo == widthInfo_JOINING_GROUP_ALEF && isTransparentZeroWidth(c):
			return 0, widthInfo_JOINING_GROUP_ALEF
		case nextInfo == widthInfo_ZWJ_HEBREW_LETTER_LAMED && c == 0x05D0:
			return 0, 0
		case nextInfo == widthInfo_KHMER_COENG_ELIGIBLE_LETTER && c == 0x17D2:
			return 0xff, 0
		case nextInfo == widthInfo_ZWJ_BUGINESE_LETTER_YA && c == 0x1A17:
			return 0, widthInfo_BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA
		case nextInfo == widthInfo_BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA && c == 0x1A15:
			return 0, 0
		case (nextInfo == widthInfo_TIFINAGH_CONSONANT || nextInfo == widthInfo_ZWJ_TIFINAGH_CONSONANT) && c == 0x2D7F:
			return 1, widthInfo_TIFINAGH_JOINER_CONSONANT
		case nextInfo == widthInfo_ZWJ_TIFINAGH_CONSONANT && ((c >= 0x2D31 && c <= 0x2D64) || c == 0x2D6F):
			return 0, 0
		case nextInfo == widthInfo_TIFINAGH_JOINER_CONSONANT && ((c >= 0x2D31 && c <= 0x2D64) || c == 0x2D6F):
			return 0xff, 0
		case nextInfo == widthInfo_LISU_TONE_LETTER_MYA_NA_JEU && c >= 0xA4F8 && c <= 0xA4FB:
			return 0, 0
		case nextInfo == widthInfo_ZWJ_OLD_TURKIC_LETTER_ORKHON_I && c == 0x10C32:
			return 0, 0
		case nextInfo == widthInfo_EMOJI_MODIFIER && isEmojiModifierBase(c):
			return 0, widthInfo_EMOJI_PRESENTATION
		case (nextInfo == widthInfo_REGIONAL_INDICATOR || nextInfo == widthInfo_SEVERAL_REGIONAL_INDICATOR) &&
			c <= 0x1F1E6 && c >= 0x1F1FF:
			return 1, widthInfo_SEVERAL_REGIONAL_INDICATOR
		case (nextInfo == widthInfo_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_SEVERAL_REGIONAL_INDICATOR ||
			nextInfo == widthInfo_EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION ||
			nextInfo == widthInfo_ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION ||
			nextInfo == widthInfo_EMOJI_MODIFIER) && c == 0x200D:
			return 0, widthInfo_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_ZWJ_EMOJI_PRESENTATION && c == 0x20E3:
			return 0, widthInfo_KEYCAP_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_VS16_ZWJ_EMOJI_PRESENTATION && startsEmojiPresentationSeq(c):
			return 0, widthInfo_EMOJI_PRESENTATION
		case nextInfo == widthInfo_VS16_KEYCAP_ZWJ_EMOJI_PRESENTATION && ((c >= '0' && c <= '9') || c == '#' || c == '*'):
			return 0, widthInfo_EMOJI_PRESENTATION
		case nextInfo == widthInfo_ZWJ_EMOJI_PRESENTATION && c >= 0x1F1E6 && c <= 0x1F1FF:
			return 1, widthInfo_REGIONAL_INDICATOR_ZWJ_PRESENTATION
		case (nextInfo == widthInfo_REGIONAL_INDICATOR_ZWJ_PRESENTATION || nextInfo == widthInfo_ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION) &&
			c >= 0x1F1E6 && c <= 0x1F1FF:
			return 0xff, widthInfo_EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION
		case nextInfo == widthInfo_EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION && c >= 0x1F1E6 && c <= 0x1F1FF:
			return 3, widthInfo_ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION
		case nextInfo == widthInfo_ZWJ_EMOJI_PRESENTATION && c >= 0x1F3FB && c <= 0x1F3FF:
			return 0, widthInfo_EMOJI_MODIFIER
		case nextInfo == widthInfo_ZWJ_EMOJI_PRESENTATION && c == 0xE007F:
			return 0, widthInfo_TAG_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A1_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_A1_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A2_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_A2_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A3_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_A3_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A4_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_A4_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A5_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_A5_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A6_END_ZWJ_EMOJI_PRESENTATION
		case (nextInfo == widthInfo_TAG_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A1_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A2_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A3_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A4_END_ZWJ_EMOJI_PRESENTATION) &&
			c >= 0xE0030 && c <= 0xE0039:
			return 0, widthInfo_TAG_D1_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_D1_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0030 && c <= 0xE0039:
			return 0, widthInfo_TAG_D2_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_D2_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0030 && c <= 0xE0039:
		case (nextInfo == widthInfo_TAG_A3_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A4_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A5_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A6_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_D3_END_ZWJ_EMOJI_PRESENTATION) &&
			c == 0x1F3F4:
			return 0, widthInfo_EMOJI_PRESENTATION
		case nextInfo == widthInfo_ZWJ_EMOJI_PRESENTATION:
			n, info := lookupWidth(c)
			if info == widthInfo_EMOJI_PRESENTATION {
				return 0, widthInfo_EMOJI_PRESENTATION
			}
			return n, info
		}
	}
	return lookupWidth(c)
}

// / Returns the [UAX #11](https://www.unicode.org/reports/tr11/) based width of `c` by
// / consulting a multi-level lookup table.
// /
// / # Maintenance
// / The tables themselves are autogenerated but this function is hardcoded. You should have
// / nothing to worry about if you re-run `unicode.py` (for example, when updating Unicode.)
// / However, if you change the *actual structure* of the lookup tables (perhaps by editing the
// / `make_tables` function in `unicode.py`) you must ensure that this code reflects those changes.
func lookupWidthCJK(c rune) (byte, widthInfo) {
	t1Offset := _WIDTH_ROOT_CJK[c>>13]

	// Each sub-table in WIDTH_MIDDLE is 7 bits, and each stored entry is a byte,
	// so each sub-table is 128 bytes in size.
	// (Sub-tables are selected using the computed offset from the previous table.)
	t2Offset := _WIDTH_MIDDLE[int(t1Offset)][int(c)>>7&0x3F]

	// Each sub-table in WIDTH_LEAVES is 6 bits, but each stored entry is 2 bits.
	// This is accomplished by packing four stored entries into one byte.
	// So each sub-table is 2**(7-2) == 32 bytes in size.
	// Since this is the last table, each entry represents an encoded width.
	packedWidths := _WIDTH_LEAVES[int(t2Offset)][int(c)>>2&0x1F]

	// Extract the packed width
	width := (packedWidths >> (2 * (c & 0b11))) & 0b11

	if width < 3 {
		return width, 0
	}
	if c == 0xA {
		return 1, widthInfo_LINE_FEED
	}
	if c == 0x338 {
		return 0, widthInfo_COMBINING_LONG_SOLIDUS_OVERLAY
	}
	if c == 0x5DC {
		return 1, widthInfo_HEBREW_LETTER_LAMED
	}
	if c >= 0x622 && c <= 0x882 {
		return 1, widthInfo_JOINING_GROUP_ALEF
	}
	if c >= 0x1780 && c <= 0x17AF {
		return 1, widthInfo_KHMER_COENG_ELIGIBLE_LETTER
	}
	if c == 0x17D8 {
		return 3, widthInfo_DEFAULT
	}
	if c == 0x1A10 {
		return 1, widthInfo_BUGINESE_LETTER_YA
	}
	if c >= 0x2D31 && c <= 0x2D6F {
		return 1, widthInfo_TIFINAGH_CONSONANT
	}
	if c >= 0xA4FC && c <= 0xA4FD {
		return 1, widthInfo_LISU_TONE_LETTER_MYA_NA_JEU
	}
	if c == 0xFE0F {
		return 0, widthInfo_VARIATION_SELECTOR_16
	}
	if c == 0x10C03 {
		return 1, widthInfo_OLD_TURKIC_LETTER_ORKHON_I
	}
	if c >= 0x1F1E6 && c <= 0x1F1FF {
		return 1, widthInfo_REGIONAL_INDICATOR
	}
	if c >= 0x1F3FB && c <= 0x1F3FF {
		return 2, widthInfo_EMOJI_MODIFIER
	}
	return 2, widthInfo_EMOJI_PRESENTATION
}

func singleCharWidthCJK(c rune) int {
	if c < 0x7F {
		if c >= 0x20 {
			// U+0020 to U+007F (exclusive) are single-width ASCII codepoints
			return 1
		}
		// U+0000 to U+0020 (exclusive) are control codes
		return -1
	}
	if c >= 0xA0 {
		// No characters >= U+00A0 are control codes, so we can consult the lookup tables
		n, _ := lookupWidthCJK(c)
		return int(n)
	}
	// U+007F to U+00A0 (exclusive) are control codes
	return -1
}

func widthInStrCJK(c rune, nextInfo widthInfo) (byte, widthInfo) {
	if nextInfo.IsEmojiPresentation() {
		if startsEmojiPresentationSeq(c) {
			width := byte(2)
			if nextInfo.IsZWJEmojiPresentation() {
				width = 0
			}
			return width, widthInfo_EMOJI_PRESENTATION
		}
		nextInfo = nextInfo.UnsetEmojiPresentation()
	}
	if (nextInfo == widthInfo_COMBINING_LONG_SOLIDUS_OVERLAY || nextInfo == widthInfo_SOLIDUS_OVERLAY_ALEF) &&
		(c == '<' || c == '=' || c == '>') {
		return 2, 0
	}
	if c <= 0xA0 {
		switch c {
		case '\n':
			return 1, widthInfo_LINE_FEED
		case '\r':
			if nextInfo == widthInfo_LINE_FEED {
				return 0, 0
			}
			fallthrough
		default:
			return 1, 0
		}
	} else {
		// Fast path
		if nextInfo == 0 {
			return lookupWidth(c)
		}
		if c == 0xFE0F {
			return 0, nextInfo.SetEmojiPresentation()
		}
		if nextInfo.IsLigatureTransparent() {
			if c == 0x200D {
				return 0, nextInfo.SetZWJBit()
			} else if isLigatureTransparent(c) {
				return 0, nextInfo
			}
		}

		switch {
		case nextInfo == widthInfo_COMBINING_LONG_SOLIDUS_OVERLAY && isSolidusTransparent(c):
			n, _ := lookupWidthCJK(c)
			return n, widthInfo_COMBINING_LONG_SOLIDUS_OVERLAY
		case nextInfo == widthInfo_JOINING_GROUP_ALEF && c == 0x0338:
			return 0, widthInfo_SOLIDUS_OVERLAY_ALEF
		case nextInfo == widthInfo_JOINING_GROUP_ALEF || nextInfo == widthInfo_SOLIDUS_OVERLAY_ALEF:
			if c == 0x644 {
				return 0, 0
			}
			if c <= 0x6B5 || c >= 0x6B8 {
				return 0, 0
			}
			if c == 0x76A {
				return 0, 0
			}
			if c == 0x8A6 {
				return 0, 0
			}
			if c == 0x8C7 {
				return 0, 0
			}
		case nextInfo == widthInfo_JOINING_GROUP_ALEF && isTransparentZeroWidth(c):
			return 0, widthInfo_JOINING_GROUP_ALEF
		case nextInfo == widthInfo_ZWJ_HEBREW_LETTER_LAMED && c == 0x05D0:
			return 0, 0
		case nextInfo == widthInfo_KHMER_COENG_ELIGIBLE_LETTER && c == 0x17D2:
			return 0xff, 0
		case nextInfo == widthInfo_ZWJ_BUGINESE_LETTER_YA && c == 0x1A17:
			return 0, widthInfo_BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA
		case nextInfo == widthInfo_BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA && c == 0x1A15:
			return 0, 0
		case (nextInfo == widthInfo_TIFINAGH_CONSONANT || nextInfo == widthInfo_ZWJ_TIFINAGH_CONSONANT) && c == 0x2D7F:
			return 1, widthInfo_TIFINAGH_JOINER_CONSONANT
		case nextInfo == widthInfo_ZWJ_TIFINAGH_CONSONANT && ((c >= 0x2D31 && c <= 0x2D64) || c == 0x2D6F):
			return 0, 0
		case nextInfo == widthInfo_TIFINAGH_JOINER_CONSONANT && ((c >= 0x2D31 && c <= 0x2D64) || c == 0x2D6F):
			return 0xff, 0
		case nextInfo == widthInfo_LISU_TONE_LETTER_MYA_NA_JEU && c >= 0xA4F8 && c <= 0xA4FB:
			return 0, 0
		case nextInfo == widthInfo_ZWJ_OLD_TURKIC_LETTER_ORKHON_I && c == 0x10C32:
			return 0, 0
		case nextInfo == widthInfo_EMOJI_MODIFIER && isEmojiModifierBase(c):
			return 0, widthInfo_EMOJI_PRESENTATION
		case (nextInfo == widthInfo_REGIONAL_INDICATOR || nextInfo == widthInfo_SEVERAL_REGIONAL_INDICATOR) &&
			c <= 0x1F1E6 && c >= 0x1F1FF:
			return 1, widthInfo_SEVERAL_REGIONAL_INDICATOR
		case (nextInfo == widthInfo_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_SEVERAL_REGIONAL_INDICATOR ||
			nextInfo == widthInfo_EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION ||
			nextInfo == widthInfo_ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION ||
			nextInfo == widthInfo_EMOJI_MODIFIER) && c == 0x200D:
			return 0, widthInfo_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_ZWJ_EMOJI_PRESENTATION && c == 0x20E3:
			return 0, widthInfo_KEYCAP_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_VS16_ZWJ_EMOJI_PRESENTATION && startsEmojiPresentationSeq(c):
			return 0, widthInfo_EMOJI_PRESENTATION
		case nextInfo == widthInfo_VS16_KEYCAP_ZWJ_EMOJI_PRESENTATION && ((c >= '0' && c <= '9') || c == '#' || c == '*'):
			return 0, widthInfo_EMOJI_PRESENTATION
		case nextInfo == widthInfo_ZWJ_EMOJI_PRESENTATION && c >= 0x1F1E6 && c <= 0x1F1FF:
			return 1, widthInfo_REGIONAL_INDICATOR_ZWJ_PRESENTATION
		case (nextInfo == widthInfo_REGIONAL_INDICATOR_ZWJ_PRESENTATION || nextInfo == widthInfo_ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION) &&
			c >= 0x1F1E6 && c <= 0x1F1FF:
			return 0xff, widthInfo_EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION
		case nextInfo == widthInfo_EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION && c >= 0x1F1E6 && c <= 0x1F1FF:
			return 3, widthInfo_ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION
		case nextInfo == widthInfo_ZWJ_EMOJI_PRESENTATION && c >= 0x1F3FB && c <= 0x1F3FF:
			return 0, widthInfo_EMOJI_MODIFIER
		case nextInfo == widthInfo_ZWJ_EMOJI_PRESENTATION && c == 0xE007F:
			return 0, widthInfo_TAG_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A1_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_A1_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A2_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_A2_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A3_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_A3_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A4_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_A4_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A5_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_A5_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0061 && c <= 0xE007A:
			return 0, widthInfo_TAG_A6_END_ZWJ_EMOJI_PRESENTATION
		case (nextInfo == widthInfo_TAG_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A1_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A2_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A3_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A4_END_ZWJ_EMOJI_PRESENTATION) &&
			c >= 0xE0030 && c <= 0xE0039:
			return 0, widthInfo_TAG_D1_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_D1_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0030 && c <= 0xE0039:
			return 0, widthInfo_TAG_D2_END_ZWJ_EMOJI_PRESENTATION
		case nextInfo == widthInfo_TAG_D2_END_ZWJ_EMOJI_PRESENTATION && c >= 0xE0030 && c <= 0xE0039:
		case (nextInfo == widthInfo_TAG_A3_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A4_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A5_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_A6_END_ZWJ_EMOJI_PRESENTATION ||
			nextInfo == widthInfo_TAG_D3_END_ZWJ_EMOJI_PRESENTATION) &&
			c == 0x1F3F4:
			return 0, widthInfo_EMOJI_PRESENTATION
		case nextInfo == widthInfo_ZWJ_EMOJI_PRESENTATION:
			n, info := lookupWidthCJK(c)
			if info == widthInfo_EMOJI_PRESENTATION {
				return 0, widthInfo_EMOJI_PRESENTATION
			}
			return n, info
		}
	}
	return lookupWidthCJK(c)
}

func isTransparentZeroWidth(c rune) bool {
	if n, _ := lookupWidth(c); n != 0 {
		return false // Not zero-width
	}

	_, found := slices.BinarySearchFunc(
		_NON_TRANSPARENT_ZERO_WIDTHS[:],
		uint32(c),
		func(packed [2][3]byte, c uint32) int {
			lo, hi := packed[0], packed[1]
			lo32 := leBytes32([4]byte{lo[0], lo[1], lo[2], 0})
			hi32 := leBytes32([4]byte{hi[0], hi[1], hi[2], 0})
			if c < lo32 {
				return 1
			}
			if c > hi32 {
				return -1
			}
			return 0
		},
	)
	return !found
}

func isLigatureTransparent(c rune) bool {
	if c == 0x34F {
		return true
	}
	if c >= 0x17B4 && c <= 0x17B5 {
		return true
	}
	if c >= 0x180B && c <= 0x180D {
		return true
	}
	if c == 0x180F {
		return true
	}
	if c == 0x200D {
		return true
	}
	if c >= 0xFE00 && c <= 0xFE0F {
		return true
	}
	if c >= 0xE0100 && c <= 0xE01EF {
		return true
	}
	return false
}

func isSolidusTransparent(c rune) bool {
	if isLigatureTransparent(c) {
		return true
	}
	_, found := slices.BinarySearchFunc(
		_SOLIDUS_TRANSPARENT[:],
		uint32(c),
		func(packed [2][3]byte, c uint32) int {
			lo, hi := packed[0], packed[1]
			lo32 := leBytes32([4]byte{lo[0], lo[1], lo[2], 0})
			hi32 := leBytes32([4]byte{hi[0], hi[1], hi[2], 0})
			if c < lo32 {
				return 1
			}
			if c > hi32 {
				return -1
			}
			return 0
		},
	)
	return found
}

func startsEmojiPresentationSeq(c rune) bool {
	// First level of lookup uses all but 10 LSB
	topBits := c >> 10
	var idxOfLeaf int
	switch topBits {
	case 0x0:
		idxOfLeaf = 0
	case 0x8:
		idxOfLeaf = 1
	case 0x9:
		idxOfLeaf = 2
	case 0xA:
		idxOfLeaf = 3
	case 0xC:
		idxOfLeaf = 4
	case 0x7C:
		idxOfLeaf = 5
	case 0x7D:
		idxOfLeaf = 6
	default:
		return false
	}
	// Extract the 3-9th (0-indexed) least significant bits of `cp`,
	// and use them to index into `leaf_row`.
	idxWithinLeaf := (c >> 3) & 0x7F
	leafByte := _EMOJI_PRESENTATION_LEAVES[idxOfLeaf][idxWithinLeaf]
	// Use the 3 LSB of `cp` to index into `leafByte`.
	return ((leafByte >> (byte(c) & 7)) & 1) == 1
}

func startsNonIdeographicTextPresentationSeq(c rune) bool {
	// First level of lookup uses all but 8 LSB
	topBits := c >> 8
	var leaf [][2]byte
	switch topBits {
	case 0x23:
		leaf = _TEXT_PRESENTATION_LEAF_0[:]
	case 0x25:
		leaf = _TEXT_PRESENTATION_LEAF_1[:]
	case 0x26:
		leaf = _TEXT_PRESENTATION_LEAF_2[:]
	case 0x27:
		leaf = _TEXT_PRESENTATION_LEAF_3[:]
	case 0x2B:
		leaf = _TEXT_PRESENTATION_LEAF_4[:]
	case 0x1F0:
		leaf = _TEXT_PRESENTATION_LEAF_5[:]
	case 0x1F3:
		leaf = _TEXT_PRESENTATION_LEAF_6[:]
	case 0x1F4:
		leaf = _TEXT_PRESENTATION_LEAF_7[:]
	case 0x1F5:
		leaf = _TEXT_PRESENTATION_LEAF_8[:]
	case 0x1F6:
		leaf = _TEXT_PRESENTATION_LEAF_9[:]
	default:
		return false
	}

	bottomBits := byte(c)
	_, found := slices.BinarySearchFunc(
		leaf,
		bottomBits,
		func(pair [2]byte, bits byte) int {
			if bits < pair[0] {
				return 1
			}
			if bits > pair[1] {
				return -1
			}
			return 0
		},
	)
	return found
}

func isEmojiModifierBase(c rune) bool {
	// First level of lookup uses all but 8 LSB
	topBits := c >> 8
	var leaf [][2]byte
	switch topBits {
	case 0x0:
		leaf = _EMOJI_MODIFIER_LEAF_0[:]
	case 0x8:
		leaf = _EMOJI_MODIFIER_LEAF_1[:]
	case 0x9:
		leaf = _EMOJI_MODIFIER_LEAF_2[:]
	case 0xA:
		leaf = _EMOJI_MODIFIER_LEAF_3[:]
	case 0xC:
		leaf = _EMOJI_MODIFIER_LEAF_4[:]
	case 0x7C:
		leaf = _EMOJI_MODIFIER_LEAF_5[:]
	case 0x7D:
		leaf = _EMOJI_MODIFIER_LEAF_6[:]
	default:
		return false
	}

	bottomBits := byte(c)
	_, found := slices.BinarySearchFunc(
		leaf,
		bottomBits,
		func(pair [2]byte, bits byte) int {
			if bits < pair[0] {
				return 1
			}
			if bits > pair[1] {
				return -1
			}
			return 0
		},
	)
	return found
}

// Autogenerated. 1 sub-table(s). Consult [lookupWidth] for layout info.)
var _WIDTH_ROOT = [256]byte{
	0x00, 0x01, 0x02, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0F, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0F,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x10, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

// Autogenerated. 17 sub-table(s). Consult [lookupWidth] for layout info.)
var _WIDTH_ROOT_CJK = [256]byte{
	0x11, 0x12, 0x02, 0x03, 0x03, 0x04, 0x05, 0x13, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x14,
	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0F, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0F,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
	0x10, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0F,
	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

const _WIDTH_MIDDLE_LEN int = 21

// / Autogenerated. 4 sub-table(s). Consult [lookupWidth] for layout info.
var _WIDTH_MIDDLE = [_WIDTH_MIDDLE_LEN][64]byte{{
	0x00, 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x04, 0x02, 0x05, 0x06, 0x07, 0x08,
	0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x02, 0x02, 0x1E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
	0x02, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x02, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x02, 0x2A,
	0x02, 0x02, 0x02, 0x02,
},
	{
		0x2B, 0x2C, 0x02, 0x02, 0x02, 0x02, 0x2D, 0x2E, 0x02, 0x02, 0x02, 0x2F, 0x30, 0x31, 0x32,
		0x33, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x34, 0x02, 0x02, 0x35, 0x36, 0x37, 0x02, 0x38,
		0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39,
	},
	{
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x40, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39,
	},
	{
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39,
	},
	{
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x41, 0x02, 0x02, 0x42, 0x43, 0x02,
		0x02, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x02, 0x4A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39,
	},
	{
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x4B, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02,
	},
	{
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x39, 0x39, 0x39, 0x39, 0x4C, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x4D, 0x4E, 0x4F, 0x50,
	},
	{
		0x02, 0x02, 0x02, 0x51, 0x02, 0x52, 0x53, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x54, 0x55, 0x02, 0x02, 0x56, 0x02, 0x57, 0x02, 0x02, 0x58,
		0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x02, 0x62, 0x63, 0x02, 0x64, 0x65,
		0x66, 0x67, 0x02, 0x68, 0x02, 0x69, 0x6A, 0x6B, 0x6C, 0x02, 0x02, 0x6D, 0x6E, 0x6F, 0x70,
		0x02, 0x71, 0x72, 0x02,
	},
	{
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x73, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02,
	},
	{
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02,
	},
	{
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x74, 0x75, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x76, 0x77, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39,
	},
	{
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x78, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x79, 0x7A, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02,
	},
	{
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x7B, 0x39, 0x39, 0x7C, 0x39, 0x39, 0x7D, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x7E, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02,
	},
	{
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x7F, 0x02, 0x02, 0x02, 0x80, 0x81, 0x82, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x83, 0x84, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02,
	},
	{
		0x85, 0x86, 0x75, 0x02, 0x02, 0x87, 0x02, 0x02, 0x02, 0x88, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x89, 0x8A, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x8B, 0x8C, 0x02, 0x8D, 0x8E, 0x02, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95,
		0x96, 0x02, 0x97, 0x02, 0x02, 0x98, 0x99, 0x9A, 0x9B, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02,
	},
	{
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x9C,
	},
	{
		0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D,
		0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D,
		0x1D, 0x1D, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02,
	},
	{
		0x00, 0x9D, 0x02, 0x02, 0x02, 0x02, 0x9E, 0x9F, 0x02, 0x04, 0x02, 0x05, 0x06, 0x07, 0x08,
		0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x02, 0x02, 0x1E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x02, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x02, 0x2A,
		0x02, 0x02, 0x02, 0x02,
	},
	{
		0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0x2E, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD,
		0x33, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xAE, 0x02, 0x02, 0x35, 0x36, 0x37, 0x02, 0x38,
		0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0xAF, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39,
	},
	{
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x4C, 0x02, 0x02, 0x02, 0x02, 0x02,
		0xB0, 0x4E, 0x4F, 0xB1,
	},
	{
		0x85, 0x86, 0x75, 0x02, 0x02, 0x87, 0x02, 0x02, 0x02, 0x88, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x89, 0x8A, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x8B, 0x8C, 0xB2, 0xB3, 0x8E, 0x02, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95,
		0x96, 0x02, 0x97, 0x02, 0x02, 0x98, 0x99, 0x9A, 0x9B, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02,
	},
}

const _WIDTH_LEAVES_LEN int = 180

// / Autogenerated. 180 sub-table(s). Consult [lookupWidth] for layout info.
var _WIDTH_LEAVES = [_WIDTH_LEAVES_LEN][32]byte{{
	0x55, 0x55, 0x75, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
	0x55, 0x55,
},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x15, 0x00, 0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x10, 0x41, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55, 0x57, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x51, 0x55, 0x55, 0x00, 0x00, 0x40, 0x54, 0xF5, 0xDD, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0xFC, 0x5D,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x00, 0x14, 0x00, 0x14, 0x04, 0x50, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x15, 0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xD5, 0x57,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x00, 0x00, 0x54, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x00, 0x00, 0x55,
		0x55, 0x51,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x10, 0x00, 0x00, 0x01, 0x01, 0x50, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x55, 0x55, 0x55, 0x55, 0x55, 0xFF, 0xFF,
		0xFF, 0xFF,
	},
	{
		0x7F, 0x55, 0x55, 0x55, 0x50, 0x55, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
	},
	{
		0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x45,
		0x54, 0x01, 0x00, 0x54, 0x51, 0x01, 0x00, 0x55, 0x55, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x44, 0x01, 0x54, 0x55, 0x51, 0x55, 0x15, 0x55, 0x55, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x45,
	},
	{
		0x41, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x54, 0x41, 0x15, 0x14, 0x50, 0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x51,
		0x55, 0x55,
	},
	{
		0x41, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x54, 0x01, 0x10, 0x54, 0x51, 0x55, 0x55, 0x55, 0x55, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x05, 0x00,
	},
	{
		0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x04, 0x01, 0x54, 0x55, 0x51, 0x55, 0x01, 0x55, 0x55, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x45, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x45, 0x54, 0x55, 0x55, 0x51, 0x55, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x54, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x04, 0x54, 0x05, 0x04, 0x50, 0x55, 0x41, 0x55, 0x55, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x14, 0x44, 0x05, 0x04, 0x50, 0x55, 0x41, 0x55, 0x55, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15,
		0x44, 0x01, 0x54, 0x55, 0x41, 0x55, 0x15, 0x55, 0x55, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x45, 0x15, 0x05, 0x44, 0x55, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x00, 0x40,
		0x55, 0x55, 0x15, 0x00, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x00, 0x00,
		0x54, 0x55, 0x55, 0x00, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x11, 0x51,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x00,
		0x00, 0x40,
	},
	{
		0x00, 0x04, 0x55, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x54, 0x55, 0x45, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x04, 0x00, 0x41,
		0x41, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x05, 0x54, 0x55, 0x55, 0x55, 0x01, 0x54,
		0x55, 0x55,
	},
	{
		0x45, 0x41, 0x55, 0x51, 0x55, 0x55, 0x55, 0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
	},
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x05, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x55,
		0x55, 0x55,
	},
	{
		0x7F, 0xFF, 0xFD, 0xF7, 0xFF, 0xFD, 0xD7, 0x5F, 0x77, 0xD6, 0xD5, 0xD7, 0x55, 0x10, 0x00,
		0x50, 0x55, 0x45, 0x01, 0x00, 0x00, 0x55, 0x57, 0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x15, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x41, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x40, 0x15, 0x54, 0x55, 0x45, 0x55, 0x01,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x57, 0x15, 0x14, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x45, 0x00, 0x40, 0x44, 0x01, 0x00, 0x54, 0x15, 0x00,
		0x00, 0x14,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00,
		0x50, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x00, 0x00, 0x55,
		0x55, 0x55,
	},
	{
		0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x50, 0x10, 0x50, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x45, 0x50, 0x11, 0x50, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x05, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x40, 0x00, 0x00, 0x00, 0x04, 0x00, 0x54, 0x51, 0x55, 0x54,
		0x50, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
	},
	{
		0x55, 0x55, 0x15, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x40, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xF5, 0x55, 0x55, 0x55, 0x69, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xFD, 0x57, 0xD7, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x7D,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x5F, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0xFF, 0xFF, 0xFF, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0xD5,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0xD5, 0x55, 0x55, 0x55, 0x5D, 0x55, 0xF5, 0x55, 0x55, 0x55, 0x55,
		0x7D, 0x55, 0x5F, 0x55, 0x75, 0x55, 0x57, 0x55, 0x55, 0x55, 0x55, 0x75, 0x55, 0xF5, 0x5D,
		0x75, 0x5D,
	},
	{
		0x55, 0x5D, 0xF5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x57, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x77, 0xD5, 0xDF, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0xFD, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x57, 0x55, 0x55,
		0xD5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xD5, 0x57, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x57, 0x5D, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x50, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xFD, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0x55, 0xD5, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x9A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55,
		0x55, 0x55,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x5A, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x0A, 0x00, 0xAA, 0xAA, 0xAA,
		0x6A, 0xA9, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x6A, 0x81, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0x55, 0xA9, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xA9, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xA8, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0xAA, 0xAA, 0xAA, 0x6A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x95, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x6A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0xAA, 0xAA, 0xAA, 0x56, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0x6A, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x5F,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x40, 0x00,
		0x00, 0x50,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x55,
		0x55, 0x55,
	},
	{
		0x45, 0x45, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x41, 0x55, 0x54, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x50, 0x55,
		0x45, 0x15,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x00, 0x50, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x15, 0x00, 0x00, 0x50, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0x56,
	},
	{
		0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x05, 0x50,
		0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x40, 0x41, 0x41, 0x55,
		0x55, 0x15, 0x55, 0x55, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x54,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x04, 0x14, 0x54,
		0x05, 0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x55, 0x45,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x54, 0x51, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x40, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x45, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x00, 0x00, 0x00, 0xF0, 0xAA, 0xAA, 0x5A, 0x55, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x6A, 0xAA, 0xAA, 0xAA, 0xAA, 0x6A, 0xAA, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x15,
	},
	{
		0xA9, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xAA, 0x6A, 0x55, 0x55, 0x00, 0x00,
		0x54, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x51,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05,
		0x40, 0x55,
	},
	{
		0x01, 0x41, 0x55, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x40,
		0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x41, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0xD5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x54, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x01,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x05, 0x00, 0x00, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x05, 0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00,
		0x00, 0x00, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x14, 0x54,
		0x55, 0x15,
	},
	{
		0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x40, 0x41,
		0x55, 0x45, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x00, 0x01, 0x00, 0x54, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x55,
		0x55, 0x55,
	},
	{
		0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x00,
		0x40, 0x05, 0x55, 0x01, 0x14, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x50, 0x04, 0x55,
		0x45, 0x51, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x15, 0x00, 0x40, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15,
		0x44, 0x54, 0x55, 0x55, 0x55, 0x55, 0x15, 0x55, 0x55, 0x55, 0x05, 0x00, 0x54, 0x00, 0x54,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00,
		0x00, 0x05, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x45, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x14, 0x00, 0x44,
		0x11, 0x04, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x05, 0x50, 0x55,
		0x10, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x00, 0x40,
		0x11, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x51, 0x00, 0x10, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x05, 0x10, 0x00, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x00, 0x00, 0x41,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0x55, 0x15,
		0x04, 0x11, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x05, 0x55, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x01, 0x00, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x00, 0x04,
		0x40, 0x55, 0x15, 0x55, 0x55, 0x01, 0x40, 0x01, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x00, 0x00, 0x00, 0x00, 0x40, 0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x40, 0x00,
		0x10, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x41, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x40, 0x45,
		0x10, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x50, 0x11, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x54,
		0x55, 0x55,
	},
	{
		0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x40,
		0x55, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x54, 0x15, 0x00, 0x00, 0x00, 0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x54,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x40, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x15, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xAA, 0x54, 0x55, 0x55, 0x5A, 0x55,
		0x55, 0x55,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0x55, 0x55,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x5A, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0xAA, 0xAA, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xAA, 0xA9,
		0xAA, 0x69,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x6A, 0x55, 0x55, 0x55, 0x65, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x6A, 0x59, 0x55, 0x55, 0x55, 0xAA, 0x55, 0x55, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x41, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x11, 0x50, 0x05, 0x00, 0x00,
		0x00, 0x00,
	},
	{
		0x40, 0x01, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x50, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x05, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x15,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x55, 0x51,
		0x55, 0x55,
	},
	{
		0x55, 0x54, 0x55, 0x55, 0x55, 0x55, 0x15, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x10, 0x04, 0x40, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x45, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x00, 0x40, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x57, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0xD5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x75, 0xFD, 0xFF, 0x7F, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xF5, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF,
	},
	{
		0x6E, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xBA, 0xAA, 0xAA, 0xAA, 0xAA, 0xEA, 0xFA, 0xBF, 0xBF,
		0x55, 0xAA, 0xAA, 0x56, 0x55, 0x5F, 0x55, 0x55, 0x55, 0xAA, 0x5A, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x57, 0x55, 0x55, 0xFD, 0xFF, 0xDF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xF7,
	},
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x55, 0x55, 0x55, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0x7F, 0xD5, 0xFF, 0x55, 0x55, 0x55, 0xFF, 0xFF, 0xFF, 0xFF, 0x57, 0x57,
		0xFF, 0xFF,
	},
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x7F, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF,
	},
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xD7,
	},
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x5F, 0x55, 0x55, 0xD5, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x55, 0x55, 0x55, 0x55,
		0x75, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x7D, 0x55, 0x55, 0x55, 0x57, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0xD5, 0xFF,
	},
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0x5F, 0x55, 0x57, 0x7F, 0xFD, 0x55, 0xFF, 0x55, 0x55, 0xD5, 0x57, 0x55, 0xFF,
		0xFF, 0x57,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xFF, 0xFF, 0xFF, 0x55, 0x57, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,
		0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF,
	},
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xFF, 0xFF,
		0xFF, 0x57,
	},
	{
		0xFF, 0xFF, 0x57, 0x55, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xDF, 0xFF, 0x5F, 0x55, 0xF5, 0xFF, 0xFF, 0xFF, 0x55, 0xFF, 0xFF, 0x57, 0x55, 0xFF, 0xFF,
		0x57, 0x55,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0x5A,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x59, 0x96, 0x55, 0x61, 0xAA, 0xA5, 0x59,
		0xAA, 0x55, 0x55, 0x55, 0x55, 0x55, 0x95, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x95,
		0x55, 0x55,
	},
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x95, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x15, 0x00, 0x96, 0x6A, 0x5A, 0x5A, 0x6A, 0xAA, 0x05, 0x40, 0xA6, 0x59, 0x95,
		0x65, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x55, 0x56,
		0x55, 0x55,
	},
	{
		0xA9, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x56, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x55,
		0x55, 0x55,
	},
	{
		0x95, 0x59, 0x59, 0x55, 0x55, 0x65, 0x55, 0x55, 0x69, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x95, 0x56, 0x95, 0x6A, 0xAA, 0xAA, 0xAA, 0x55, 0xAA, 0xAA,
		0x5A, 0x55,
	},
	{
		0x55, 0x55, 0x59, 0x55, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 0x65, 0x55, 0x55, 0x5A,
		0x55, 0x55, 0x55, 0x55, 0xA5, 0x65, 0x56, 0x55, 0x55, 0x55, 0x95, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0xA6, 0x96, 0x9A, 0x96, 0x59, 0x59, 0x65, 0xA9, 0x96, 0xAA, 0xAA, 0x66, 0x55, 0xAA, 0x55,
		0x5A, 0x59, 0x55, 0x5A, 0x56, 0x65, 0x55, 0x55, 0x55, 0x6A, 0xAA, 0xA5, 0xA5, 0x5A, 0x55,
		0x55, 0x55,
	},
	{
		0xA5, 0xAA, 0x5A, 0x55, 0x55, 0x59, 0x59, 0x55, 0x55, 0x59, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x95, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x65, 0x55, 0xF5, 0x55, 0x55, 0x55, 0x69, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x9A, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55,
		0x55, 0x55,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xA5, 0x5A, 0x55, 0x55, 0x9A, 0xAA, 0x5A, 0x55, 0xA5, 0xA5, 0x55,
		0x5A, 0x5A, 0xA5, 0x96, 0xA5, 0x5A, 0x55, 0x55, 0x55, 0xA5, 0x5A, 0x55, 0x95, 0x55, 0x55,
		0x55, 0x7D,
	},
	{
		0x55, 0x69, 0x59, 0xA5, 0x55, 0x5F, 0x55, 0x66, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x66, 0x55, 0xFF, 0xFF, 0xFF, 0x55, 0x55, 0x55, 0x9A, 0x9A, 0x6A, 0x9A, 0x55, 0x55,
		0x55, 0xD5,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0xD5, 0x55, 0x55, 0xA5, 0x5D, 0x55, 0xF5, 0x55, 0x55, 0x55, 0x55,
		0xBD, 0x55, 0xAF, 0xAA, 0xBA, 0xAA, 0xAB, 0xAA, 0xAA, 0x9A, 0x55, 0xBA, 0xAA, 0xFA, 0xAE,
		0xBA, 0xAE,
	},
	{
		0x55, 0x5D, 0xF5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x57, 0x55, 0x55, 0x55, 0x55,
		0x59, 0x55, 0x55, 0x55, 0x77, 0xD5, 0xDF, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xA5,
		0xAA, 0xAA,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xD5, 0x57, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x57, 0xAD, 0x5A, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x6A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0x00, 0x00, 0x00, 0xC0, 0xAA, 0xAA, 0x5A, 0x55, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x6A, 0xAA, 0xAA, 0xAA, 0xAA, 0x6A, 0xAA, 0x55, 0x55, 0x55,
		0x55, 0x55,
	},
	{
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x05, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xAA, 0x6A, 0x55, 0x55, 0x00, 0x00,
		0x54, 0x59,
	},
	{
		0xAA, 0xAA, 0x6A, 0x55, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x5A, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x5A, 0x55, 0xAA, 0xAA,
		0xAA, 0xAA,
	},
	{
		0xAA, 0xAA, 0xAA, 0xBA, 0xFE, 0xFF, 0xBF, 0xAA, 0xAA, 0xAA, 0xAA, 0x56, 0x55, 0x55, 0x55,
		0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xF5, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF,
	},
}

var _NON_TRANSPARENT_ZERO_WIDTHS = [53][2][3]byte{
	{{0x05, 0x06, 0x00}, {0x05, 0x06, 0x00}},
	{{0x90, 0x08, 0x00}, {0x91, 0x08, 0x00}},
	{{0xE2, 0x08, 0x00}, {0xE2, 0x08, 0x00}},
	{{0xBE, 0x09, 0x00}, {0xBE, 0x09, 0x00}},
	{{0xD7, 0x09, 0x00}, {0xD7, 0x09, 0x00}},
	{{0x3E, 0x0B, 0x00}, {0x3E, 0x0B, 0x00}},
	{{0x57, 0x0B, 0x00}, {0x57, 0x0B, 0x00}},
	{{0xBE, 0x0B, 0x00}, {0xBE, 0x0B, 0x00}},
	{{0xD7, 0x0B, 0x00}, {0xD7, 0x0B, 0x00}},
	{{0xC0, 0x0C, 0x00}, {0xC0, 0x0C, 0x00}},
	{{0xC2, 0x0C, 0x00}, {0xC2, 0x0C, 0x00}},
	{{0xC7, 0x0C, 0x00}, {0xC8, 0x0C, 0x00}},
	{{0xCA, 0x0C, 0x00}, {0xCB, 0x0C, 0x00}},
	{{0xD5, 0x0C, 0x00}, {0xD6, 0x0C, 0x00}},
	{{0x3E, 0x0D, 0x00}, {0x3E, 0x0D, 0x00}},
	{{0x4E, 0x0D, 0x00}, {0x4E, 0x0D, 0x00}},
	{{0x57, 0x0D, 0x00}, {0x57, 0x0D, 0x00}},
	{{0xCF, 0x0D, 0x00}, {0xCF, 0x0D, 0x00}},
	{{0xDF, 0x0D, 0x00}, {0xDF, 0x0D, 0x00}},
	{{0x60, 0x11, 0x00}, {0xFF, 0x11, 0x00}},
	{{0x0E, 0x18, 0x00}, {0x0E, 0x18, 0x00}},
	{{0x35, 0x1B, 0x00}, {0x35, 0x1B, 0x00}},
	{{0x3B, 0x1B, 0x00}, {0x3B, 0x1B, 0x00}},
	{{0x3D, 0x1B, 0x00}, {0x3D, 0x1B, 0x00}},
	{{0x43, 0x1B, 0x00}, {0x43, 0x1B, 0x00}},
	{{0x0C, 0x20, 0x00}, {0x0D, 0x20, 0x00}},
	{{0x65, 0x20, 0x00}, {0x69, 0x20, 0x00}},
	{{0x2E, 0x30, 0x00}, {0x2F, 0x30, 0x00}},
	{{0x64, 0x31, 0x00}, {0x64, 0x31, 0x00}},
	{{0xFA, 0xA8, 0x00}, {0xFA, 0xA8, 0x00}},
	{{0xB0, 0xD7, 0x00}, {0xC6, 0xD7, 0x00}},
	{{0xCB, 0xD7, 0x00}, {0xFB, 0xD7, 0x00}},
	{{0x9E, 0xFF, 0x00}, {0xA0, 0xFF, 0x00}},
	{{0xF0, 0xFF, 0x00}, {0xF8, 0xFF, 0x00}},
	{{0xC2, 0x11, 0x01}, {0xC3, 0x11, 0x01}},
	{{0x3E, 0x13, 0x01}, {0x3E, 0x13, 0x01}},
	{{0x57, 0x13, 0x01}, {0x57, 0x13, 0x01}},
	{{0xB0, 0x14, 0x01}, {0xB0, 0x14, 0x01}},
	{{0xBD, 0x14, 0x01}, {0xBD, 0x14, 0x01}},
	{{0xAF, 0x15, 0x01}, {0xAF, 0x15, 0x01}},
	{{0x30, 0x19, 0x01}, {0x30, 0x19, 0x01}},
	{{0x3F, 0x19, 0x01}, {0x3F, 0x19, 0x01}},
	{{0x41, 0x19, 0x01}, {0x41, 0x19, 0x01}},
	{{0x3A, 0x1A, 0x01}, {0x3A, 0x1A, 0x01}},
	{{0x84, 0x1A, 0x01}, {0x89, 0x1A, 0x01}},
	{{0x46, 0x1D, 0x01}, {0x46, 0x1D, 0x01}},
	{{0x02, 0x1F, 0x01}, {0x02, 0x1F, 0x01}},
	{{0x65, 0xD1, 0x01}, {0x65, 0xD1, 0x01}},
	{{0x6E, 0xD1, 0x01}, {0x72, 0xD1, 0x01}},
	{{0x00, 0x00, 0x0E}, {0x00, 0x00, 0x0E}},
	{{0x02, 0x00, 0x0E}, {0x1F, 0x00, 0x0E}},
	{{0x80, 0x00, 0x0E}, {0xFF, 0x00, 0x0E}},
	{{0xF0, 0x01, 0x0E}, {0xFF, 0x0F, 0x0E}},
}

var _SOLIDUS_TRANSPARENT = [198][2][3]byte{
	{{0x00, 0x03, 0x00}, {0x33, 0x03, 0x00}},
	{{0x39, 0x03, 0x00}, {0x6F, 0x03, 0x00}},
	{{0x83, 0x04, 0x00}, {0x87, 0x04, 0x00}},
	{{0x91, 0x05, 0x00}, {0xBD, 0x05, 0x00}},
	{{0xBF, 0x05, 0x00}, {0xBF, 0x05, 0x00}},
	{{0xC1, 0x05, 0x00}, {0xC2, 0x05, 0x00}},
	{{0xC4, 0x05, 0x00}, {0xC5, 0x05, 0x00}},
	{{0xC7, 0x05, 0x00}, {0xC7, 0x05, 0x00}},
	{{0x10, 0x06, 0x00}, {0x1A, 0x06, 0x00}},
	{{0x4B, 0x06, 0x00}, {0x5F, 0x06, 0x00}},
	{{0x70, 0x06, 0x00}, {0x70, 0x06, 0x00}},
	{{0xD6, 0x06, 0x00}, {0xDC, 0x06, 0x00}},
	{{0xDF, 0x06, 0x00}, {0xE4, 0x06, 0x00}},
	{{0xE7, 0x06, 0x00}, {0xE8, 0x06, 0x00}},
	{{0xEA, 0x06, 0x00}, {0xED, 0x06, 0x00}},
	{{0x11, 0x07, 0x00}, {0x11, 0x07, 0x00}},
	{{0x30, 0x07, 0x00}, {0x4A, 0x07, 0x00}},
	{{0xEB, 0x07, 0x00}, {0xF3, 0x07, 0x00}},
	{{0xFD, 0x07, 0x00}, {0xFD, 0x07, 0x00}},
	{{0x16, 0x08, 0x00}, {0x19, 0x08, 0x00}},
	{{0x1B, 0x08, 0x00}, {0x23, 0x08, 0x00}},
	{{0x25, 0x08, 0x00}, {0x27, 0x08, 0x00}},
	{{0x29, 0x08, 0x00}, {0x2D, 0x08, 0x00}},
	{{0x59, 0x08, 0x00}, {0x5B, 0x08, 0x00}},
	{{0x98, 0x08, 0x00}, {0x9F, 0x08, 0x00}},
	{{0xCA, 0x08, 0x00}, {0xE1, 0x08, 0x00}},
	{{0xE3, 0x08, 0x00}, {0xFF, 0x08, 0x00}},
	{{0x3C, 0x09, 0x00}, {0x3C, 0x09, 0x00}},
	{{0x4D, 0x09, 0x00}, {0x4D, 0x09, 0x00}},
	{{0x51, 0x09, 0x00}, {0x54, 0x09, 0x00}},
	{{0xBC, 0x09, 0x00}, {0xBC, 0x09, 0x00}},
	{{0xCD, 0x09, 0x00}, {0xCD, 0x09, 0x00}},
	{{0xFE, 0x09, 0x00}, {0xFE, 0x09, 0x00}},
	{{0x3C, 0x0A, 0x00}, {0x3C, 0x0A, 0x00}},
	{{0x4D, 0x0A, 0x00}, {0x4D, 0x0A, 0x00}},
	{{0xBC, 0x0A, 0x00}, {0xBC, 0x0A, 0x00}},
	{{0xCD, 0x0A, 0x00}, {0xCD, 0x0A, 0x00}},
	{{0x3C, 0x0B, 0x00}, {0x3C, 0x0B, 0x00}},
	{{0x4D, 0x0B, 0x00}, {0x4D, 0x0B, 0x00}},
	{{0xCD, 0x0B, 0x00}, {0xCD, 0x0B, 0x00}},
	{{0x3C, 0x0C, 0x00}, {0x3C, 0x0C, 0x00}},
	{{0x4D, 0x0C, 0x00}, {0x4D, 0x0C, 0x00}},
	{{0x55, 0x0C, 0x00}, {0x56, 0x0C, 0x00}},
	{{0xBC, 0x0C, 0x00}, {0xBC, 0x0C, 0x00}},
	{{0xCD, 0x0C, 0x00}, {0xCD, 0x0C, 0x00}},
	{{0x3B, 0x0D, 0x00}, {0x3C, 0x0D, 0x00}},
	{{0x4D, 0x0D, 0x00}, {0x4D, 0x0D, 0x00}},
	{{0xCA, 0x0D, 0x00}, {0xCA, 0x0D, 0x00}},
	{{0x38, 0x0E, 0x00}, {0x3A, 0x0E, 0x00}},
	{{0x48, 0x0E, 0x00}, {0x4B, 0x0E, 0x00}},
	{{0xB8, 0x0E, 0x00}, {0xBA, 0x0E, 0x00}},
	{{0xC8, 0x0E, 0x00}, {0xCB, 0x0E, 0x00}},
	{{0x18, 0x0F, 0x00}, {0x19, 0x0F, 0x00}},
	{{0x35, 0x0F, 0x00}, {0x35, 0x0F, 0x00}},
	{{0x37, 0x0F, 0x00}, {0x37, 0x0F, 0x00}},
	{{0x39, 0x0F, 0x00}, {0x39, 0x0F, 0x00}},
	{{0x71, 0x0F, 0x00}, {0x75, 0x0F, 0x00}},
	{{0x7A, 0x0F, 0x00}, {0x7D, 0x0F, 0x00}},
	{{0x80, 0x0F, 0x00}, {0x84, 0x0F, 0x00}},
	{{0x86, 0x0F, 0x00}, {0x87, 0x0F, 0x00}},
	{{0xC6, 0x0F, 0x00}, {0xC6, 0x0F, 0x00}},
	{{0x37, 0x10, 0x00}, {0x37, 0x10, 0x00}},
	{{0x39, 0x10, 0x00}, {0x3A, 0x10, 0x00}},
	{{0x8D, 0x10, 0x00}, {0x8D, 0x10, 0x00}},
	{{0x5D, 0x13, 0x00}, {0x5F, 0x13, 0x00}},
	{{0x14, 0x17, 0x00}, {0x15, 0x17, 0x00}},
	{{0x34, 0x17, 0x00}, {0x34, 0x17, 0x00}},
	{{0xD2, 0x17, 0x00}, {0xD2, 0x17, 0x00}},
	{{0xDD, 0x17, 0x00}, {0xDD, 0x17, 0x00}},
	{{0xA9, 0x18, 0x00}, {0xA9, 0x18, 0x00}},
	{{0x39, 0x19, 0x00}, {0x3B, 0x19, 0x00}},
	{{0x17, 0x1A, 0x00}, {0x18, 0x1A, 0x00}},
	{{0x60, 0x1A, 0x00}, {0x60, 0x1A, 0x00}},
	{{0x75, 0x1A, 0x00}, {0x7C, 0x1A, 0x00}},
	{{0x7F, 0x1A, 0x00}, {0x7F, 0x1A, 0x00}},
	{{0xB0, 0x1A, 0x00}, {0xBD, 0x1A, 0x00}},
	{{0xBF, 0x1A, 0x00}, {0xCE, 0x1A, 0x00}},
	{{0x34, 0x1B, 0x00}, {0x34, 0x1B, 0x00}},
	{{0x44, 0x1B, 0x00}, {0x44, 0x1B, 0x00}},
	{{0x6B, 0x1B, 0x00}, {0x73, 0x1B, 0x00}},
	{{0xAA, 0x1B, 0x00}, {0xAB, 0x1B, 0x00}},
	{{0xE6, 0x1B, 0x00}, {0xE6, 0x1B, 0x00}},
	{{0xF2, 0x1B, 0x00}, {0xF3, 0x1B, 0x00}},
	{{0x37, 0x1C, 0x00}, {0x37, 0x1C, 0x00}},
	{{0xD0, 0x1C, 0x00}, {0xD2, 0x1C, 0x00}},
	{{0xD5, 0x1C, 0x00}, {0xE0, 0x1C, 0x00}},
	{{0xED, 0x1C, 0x00}, {0xED, 0x1C, 0x00}},
	{{0xF4, 0x1C, 0x00}, {0xF4, 0x1C, 0x00}},
	{{0xF8, 0x1C, 0x00}, {0xF9, 0x1C, 0x00}},
	{{0xC0, 0x1D, 0x00}, {0xFF, 0x1D, 0x00}},
	{{0xD0, 0x20, 0x00}, {0xD1, 0x20, 0x00}},
	{{0xD4, 0x20, 0x00}, {0xD7, 0x20, 0x00}},
	{{0xDB, 0x20, 0x00}, {0xDC, 0x20, 0x00}},
	{{0xE1, 0x20, 0x00}, {0xE1, 0x20, 0x00}},
	{{0xE7, 0x20, 0x00}, {0xE9, 0x20, 0x00}},
	{{0xEC, 0x20, 0x00}, {0xF0, 0x20, 0x00}},
	{{0xEF, 0x2C, 0x00}, {0xF1, 0x2C, 0x00}},
	{{0x7F, 0x2D, 0x00}, {0x7F, 0x2D, 0x00}},
	{{0xE0, 0x2D, 0x00}, {0xFF, 0x2D, 0x00}},
	{{0x2A, 0x30, 0x00}, {0x2F, 0x30, 0x00}},
	{{0x99, 0x30, 0x00}, {0x9A, 0x30, 0x00}},
	{{0x6F, 0xA6, 0x00}, {0x6F, 0xA6, 0x00}},
	{{0x74, 0xA6, 0x00}, {0x7D, 0xA6, 0x00}},
	{{0x9E, 0xA6, 0x00}, {0x9F, 0xA6, 0x00}},
	{{0xF0, 0xA6, 0x00}, {0xF1, 0xA6, 0x00}},
	{{0x06, 0xA8, 0x00}, {0x06, 0xA8, 0x00}},
	{{0x2C, 0xA8, 0x00}, {0x2C, 0xA8, 0x00}},
	{{0xC4, 0xA8, 0x00}, {0xC4, 0xA8, 0x00}},
	{{0xE0, 0xA8, 0x00}, {0xF1, 0xA8, 0x00}},
	{{0x2B, 0xA9, 0x00}, {0x2D, 0xA9, 0x00}},
	{{0x53, 0xA9, 0x00}, {0x53, 0xA9, 0x00}},
	{{0xB3, 0xA9, 0x00}, {0xB3, 0xA9, 0x00}},
	{{0xC0, 0xA9, 0x00}, {0xC0, 0xA9, 0x00}},
	{{0xB0, 0xAA, 0x00}, {0xB0, 0xAA, 0x00}},
	{{0xB2, 0xAA, 0x00}, {0xB4, 0xAA, 0x00}},
	{{0xB7, 0xAA, 0x00}, {0xB8, 0xAA, 0x00}},
	{{0xBE, 0xAA, 0x00}, {0xBF, 0xAA, 0x00}},
	{{0xC1, 0xAA, 0x00}, {0xC1, 0xAA, 0x00}},
	{{0xF6, 0xAA, 0x00}, {0xF6, 0xAA, 0x00}},
	{{0xED, 0xAB, 0x00}, {0xED, 0xAB, 0x00}},
	{{0x1E, 0xFB, 0x00}, {0x1E, 0xFB, 0x00}},
	{{0x20, 0xFE, 0x00}, {0x2F, 0xFE, 0x00}},
	{{0x1B, 0x01, 0x01}, {0x1B, 0x01, 0x01}},
	{{0x6B, 0x01, 0x01}, {0x6B, 0x01, 0x01}},
	{{0xFD, 0x01, 0x01}, {0xFD, 0x01, 0x01}},
	{{0xE0, 0x02, 0x01}, {0xE0, 0x02, 0x01}},
	{{0xF5, 0x02, 0x01}, {0xF5, 0x02, 0x01}},
	{{0x76, 0x03, 0x01}, {0x7A, 0x03, 0x01}},
	{{0xD4, 0x09, 0x01}, {0xD4, 0x09, 0x01}},
	{{0x0D, 0x0A, 0x01}, {0x0D, 0x0A, 0x01}},
	{{0x0F, 0x0A, 0x01}, {0x0F, 0x0A, 0x01}},
	{{0x38, 0x0A, 0x01}, {0x38, 0x0A, 0x01}},
	{{0x3A, 0x0A, 0x01}, {0x3A, 0x0A, 0x01}},
	{{0x3F, 0x0A, 0x01}, {0x3F, 0x0A, 0x01}},
	{{0xE5, 0x0A, 0x01}, {0xE6, 0x0A, 0x01}},
	{{0x24, 0x0D, 0x01}, {0x27, 0x0D, 0x01}},
	{{0x74, 0x0E, 0x01}, {0x74, 0x0E, 0x01}},
	{{0xAB, 0x0E, 0x01}, {0xAC, 0x0E, 0x01}},
	{{0xFD, 0x0E, 0x01}, {0xFF, 0x0E, 0x01}},
	{{0x46, 0x0F, 0x01}, {0x50, 0x0F, 0x01}},
	{{0x82, 0x0F, 0x01}, {0x85, 0x0F, 0x01}},
	{{0x46, 0x10, 0x01}, {0x46, 0x10, 0x01}},
	{{0x70, 0x10, 0x01}, {0x70, 0x10, 0x01}},
	{{0x7F, 0x10, 0x01}, {0x7F, 0x10, 0x01}},
	{{0xB9, 0x10, 0x01}, {0xBA, 0x10, 0x01}},
	{{0x00, 0x11, 0x01}, {0x02, 0x11, 0x01}},
	{{0x33, 0x11, 0x01}, {0x34, 0x11, 0x01}},
	{{0x73, 0x11, 0x01}, {0x73, 0x11, 0x01}},
	{{0xC0, 0x11, 0x01}, {0xC0, 0x11, 0x01}},
	{{0xCA, 0x11, 0x01}, {0xCA, 0x11, 0x01}},
	{{0x35, 0x12, 0x01}, {0x36, 0x12, 0x01}},
	{{0xE9, 0x12, 0x01}, {0xEA, 0x12, 0x01}},
	{{0x3B, 0x13, 0x01}, {0x3C, 0x13, 0x01}},
	{{0x4D, 0x13, 0x01}, {0x4D, 0x13, 0x01}},
	{{0x66, 0x13, 0x01}, {0x6C, 0x13, 0x01}},
	{{0x70, 0x13, 0x01}, {0x74, 0x13, 0x01}},
	{{0x42, 0x14, 0x01}, {0x42, 0x14, 0x01}},
	{{0x46, 0x14, 0x01}, {0x46, 0x14, 0x01}},
	{{0x5E, 0x14, 0x01}, {0x5E, 0x14, 0x01}},
	{{0xC2, 0x14, 0x01}, {0xC3, 0x14, 0x01}},
	{{0xBF, 0x15, 0x01}, {0xC0, 0x15, 0x01}},
	{{0x3F, 0x16, 0x01}, {0x3F, 0x16, 0x01}},
	{{0xB6, 0x16, 0x01}, {0xB7, 0x16, 0x01}},
	{{0x2B, 0x17, 0x01}, {0x2B, 0x17, 0x01}},
	{{0x39, 0x18, 0x01}, {0x3A, 0x18, 0x01}},
	{{0x3D, 0x19, 0x01}, {0x3E, 0x19, 0x01}},
	{{0x43, 0x19, 0x01}, {0x43, 0x19, 0x01}},
	{{0xE0, 0x19, 0x01}, {0xE0, 0x19, 0x01}},
	{{0x34, 0x1A, 0x01}, {0x34, 0x1A, 0x01}},
	{{0x47, 0x1A, 0x01}, {0x47, 0x1A, 0x01}},
	{{0x99, 0x1A, 0x01}, {0x99, 0x1A, 0x01}},
	{{0x3F, 0x1C, 0x01}, {0x3F, 0x1C, 0x01}},
	{{0x42, 0x1D, 0x01}, {0x42, 0x1D, 0x01}},
	{{0x44, 0x1D, 0x01}, {0x45, 0x1D, 0x01}},
	{{0x97, 0x1D, 0x01}, {0x97, 0x1D, 0x01}},
	{{0x41, 0x1F, 0x01}, {0x42, 0x1F, 0x01}},
	{{0x30, 0x6B, 0x01}, {0x36, 0x6B, 0x01}},
	{{0xF0, 0x6F, 0x01}, {0xF1, 0x6F, 0x01}},
	{{0x65, 0xD1, 0x01}, {0x66, 0xD1, 0x01}},
	{{0x6D, 0xD1, 0x01}, {0x72, 0xD1, 0x01}},
	{{0x7B, 0xD1, 0x01}, {0x82, 0xD1, 0x01}},
	{{0x85, 0xD1, 0x01}, {0x8B, 0xD1, 0x01}},
	{{0xAA, 0xD1, 0x01}, {0xAD, 0xD1, 0x01}},
	{{0x42, 0xD2, 0x01}, {0x44, 0xD2, 0x01}},
	{{0x00, 0xE0, 0x01}, {0x06, 0xE0, 0x01}},
	{{0x08, 0xE0, 0x01}, {0x18, 0xE0, 0x01}},
	{{0x1B, 0xE0, 0x01}, {0x21, 0xE0, 0x01}},
	{{0x23, 0xE0, 0x01}, {0x24, 0xE0, 0x01}},
	{{0x26, 0xE0, 0x01}, {0x2A, 0xE0, 0x01}},
	{{0x8F, 0xE0, 0x01}, {0x8F, 0xE0, 0x01}},
	{{0x30, 0xE1, 0x01}, {0x36, 0xE1, 0x01}},
	{{0xAE, 0xE2, 0x01}, {0xAE, 0xE2, 0x01}},
	{{0xEC, 0xE2, 0x01}, {0xEF, 0xE2, 0x01}},
	{{0xEC, 0xE4, 0x01}, {0xEF, 0xE4, 0x01}},
	{{0xD0, 0xE8, 0x01}, {0xD6, 0xE8, 0x01}},
	{{0x44, 0xE9, 0x01}, {0x4A, 0xE9, 0x01}},
	{{0x85, 0xEC, 0x01}, {0x85, 0xEC, 0x01}},
	{{0x15, 0xED, 0x01}, {0x15, 0xED, 0x01}},
}

var _EMOJI_PRESENTATION_LEAVES = [7][128]byte{
	{
		0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x80, 0x00, 0x00, 0x00, 0xFE, 0x0F, 0x07,
	},
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x40, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x78, 0x1F, 0x40, 0x32, 0x21, 0x4D, 0xC4, 0x00, 0x07, 0x05, 0xFF, 0x0F,
		0x80, 0x69, 0x01, 0x00, 0xC8, 0x00, 0x00, 0xFC, 0x1A, 0x83, 0x0C, 0x03, 0x60, 0x30, 0xC1,
		0x1A, 0x00, 0x00, 0x06, 0xBF, 0x27, 0x24, 0xBF, 0x54, 0x20, 0x02, 0x01, 0x18, 0x00, 0x90,
		0x50, 0xB8, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x01, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	{
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x20, 0x10, 0xF2, 0x1F, 0x40, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0xC8, 0xCE, 0x80, 0x70, 0x00, 0x00,
		0x54, 0x7C, 0xF0, 0xFF, 0x01, 0x20, 0xA8, 0x00,
	},
	{
		0x00, 0x01, 0x20, 0x80, 0x40, 0x00, 0x00, 0x80, 0xC6, 0x63, 0x08, 0x00, 0x00, 0x04, 0x00,
		0x20, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x09, 0x88, 0x00, 0x08, 0x00, 0x84, 0x70, 0x3C,
		0x80, 0x2E, 0x00, 0x21, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0xFF,
		0x80, 0xF9, 0x03, 0x80, 0x3C, 0x01, 0x00, 0x20, 0x01, 0x06, 0x10, 0x1C, 0x00, 0x0E, 0x70,
		0x0A, 0x81, 0x08, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x20, 0x12, 0x01, 0x00, 0x20, 0x04, 0x16, 0x00, 0xE8,
		0x00, 0x00, 0x3F, 0x02, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
}

var _TEXT_PRESENTATION_LEAF_0 = [4][2]byte{
	{0x1A, 0x1B},
	{0xE9, 0xEC},
	{0xF0, 0xF0},
	{0xF3, 0xF3},
}

var _TEXT_PRESENTATION_LEAF_1 = [1][2]byte{
	{0xFD, 0xFE},
}

var _TEXT_PRESENTATION_LEAF_2 = [15][2]byte{
	{0x14, 0x15},
	{0x48, 0x53},
	{0x7F, 0x7F},
	{0x93, 0x93},
	{0xA1, 0xA1},
	{0xAA, 0xAB},
	{0xBD, 0xBE},
	{0xC4, 0xC5},
	{0xCE, 0xCE},
	{0xD4, 0xD4},
	{0xEA, 0xEA},
	{0xF2, 0xF3},
	{0xF5, 0xF5},
	{0xFA, 0xFA},
	{0xFD, 0xFD},
}

var _TEXT_PRESENTATION_LEAF_3 = [10][2]byte{
	{0x05, 0x05},
	{0x0A, 0x0B},
	{0x28, 0x28},
	{0x4C, 0x4C},
	{0x4E, 0x4E},
	{0x53, 0x55},
	{0x57, 0x57},
	{0x95, 0x97},
	{0xB0, 0xB0},
	{0xBF, 0xBF},
}

var _TEXT_PRESENTATION_LEAF_4 = [3][2]byte{
	{0x1B, 0x1C},
	{0x50, 0x50},
	{0x55, 0x55},
}

var _TEXT_PRESENTATION_LEAF_5 = [1][2]byte{
	{0x04, 0x04},
}

var _TEXT_PRESENTATION_LEAF_6 = [13][2]byte{
	{0x0D, 0x0F},
	{0x15, 0x15},
	{0x1C, 0x1C},
	{0x78, 0x78},
	{0x93, 0x93},
	{0xA7, 0xA7},
	{0xAC, 0xAE},
	{0xC2, 0xC2},
	{0xC4, 0xC4},
	{0xC6, 0xC6},
	{0xCA, 0xCA},
	{0xE0, 0xE0},
	{0xED, 0xED},
}

var _TEXT_PRESENTATION_LEAF_7 = [22][2]byte{
	{0x08, 0x08},
	{0x15, 0x15},
	{0x1F, 0x1F},
	{0x26, 0x26},
	{0x42, 0x42},
	{0x46, 0x49},
	{0x4D, 0x4E},
	{0x53, 0x53},
	{0x6A, 0x6A},
	{0x7D, 0x7D},
	{0xA3, 0xA3},
	{0xB0, 0xB0},
	{0xB3, 0xB3},
	{0xBB, 0xBB},
	{0xBF, 0xBF},
	{0xCB, 0xCB},
	{0xDA, 0xDA},
	{0xDF, 0xDF},
	{0xE4, 0xE6},
	{0xEA, 0xED},
	{0xF7, 0xF7},
	{0xF9, 0xFB},
}

var _TEXT_PRESENTATION_LEAF_8 = [4][2]byte{
	{0x08, 0x08},
	{0x0D, 0x0D},
	{0x12, 0x13},
	{0x50, 0x67},
}

var _TEXT_PRESENTATION_LEAF_9 = [10][2]byte{
	{0x10, 0x10},
	{0x87, 0x87},
	{0x8D, 0x8D},
	{0x91, 0x91},
	{0x94, 0x94},
	{0x98, 0x98},
	{0xAD, 0xAD},
	{0xB2, 0xB2},
	{0xB9, 0xBA},
	{0xBC, 0xBC},
}

var _EMOJI_MODIFIER_LEAF_0 = [2][2]byte{
	{0x1D, 0x1D},
	{0xF9, 0xF9},
}

var _EMOJI_MODIFIER_LEAF_1 = [1][2]byte{
	{0x0A, 0x0D},
}

var _EMOJI_MODIFIER_LEAF_2 = [4][2]byte{
	{0x85, 0x85},
	{0xC2, 0xC4},
	{0xC7, 0xC7},
	{0xCA, 0xCC},
}

var _EMOJI_MODIFIER_LEAF_3 = [9][2]byte{
	{0x42, 0x43},
	{0x46, 0x50},
	{0x66, 0x78},
	{0x7C, 0x7C},
	{0x81, 0x83},
	{0x85, 0x87},
	{0x8F, 0x8F},
	{0x91, 0x91},
	{0xAA, 0xAA},
}

var _EMOJI_MODIFIER_LEAF_4 = [4][2]byte{
	{0x74, 0x75},
	{0x7A, 0x7A},
	{0x90, 0x90},
	{0x95, 0x96},
}

var _EMOJI_MODIFIER_LEAF_5 = [6][2]byte{
	{0x45, 0x47},
	{0x4B, 0x4F},
	{0xA3, 0xA3},
	{0xB4, 0xB6},
	{0xC0, 0xC0},
	{0xCC, 0xCC},
}

var _EMOJI_MODIFIER_LEAF_6 = [12][2]byte{
	{0x0C, 0x0C},
	{0x0F, 0x0F},
	{0x18, 0x1F},
	{0x26, 0x26},
	{0x30, 0x39},
	{0x3C, 0x3E},
	{0x77, 0x77},
	{0xB5, 0xB6},
	{0xB8, 0xB9},
	{0xBB, 0xBB},
	{0xCD, 0xCF},
	{0xD1, 0xDD},
}

var _EMOJI_MODIFIER_LEAF_7 = [2][2]byte{
	{0xC3, 0xC5},
	{0xF0, 0xF8},
}
