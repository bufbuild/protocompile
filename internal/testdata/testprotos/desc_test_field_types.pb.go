// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.0
// source: desc_test_field_types.proto

package testprotos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestEnum int32

const (
	TestEnum_INVALID TestEnum = 0
	TestEnum_FIRST   TestEnum = 1
	TestEnum_SECOND  TestEnum = 2
	TestEnum_THIRD   TestEnum = 3
)

// Enum value maps for TestEnum.
var (
	TestEnum_name = map[int32]string{
		0: "INVALID",
		1: "FIRST",
		2: "SECOND",
		3: "THIRD",
	}
	TestEnum_value = map[string]int32{
		"INVALID": 0,
		"FIRST":   1,
		"SECOND":  2,
		"THIRD":   3,
	}
)

func (x TestEnum) Enum() *TestEnum {
	p := new(TestEnum)
	*p = x
	return p
}

func (x TestEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_test_field_types_proto_enumTypes[0].Descriptor()
}

func (TestEnum) Type() protoreflect.EnumType {
	return &file_desc_test_field_types_proto_enumTypes[0]
}

func (x TestEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TestEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TestEnum(num)
	return nil
}

// Deprecated: Use TestEnum.Descriptor instead.
func (TestEnum) EnumDescriptor() ([]byte, []int) {
	return file_desc_test_field_types_proto_rawDescGZIP(), []int{0}
}

type UnaryFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I      *int32              `protobuf:"varint,1,opt,name=i" json:"i,omitempty"`
	J      *int64              `protobuf:"varint,2,opt,name=j" json:"j,omitempty"`
	K      *int32              `protobuf:"zigzag32,3,opt,name=k" json:"k,omitempty"`
	L      *int64              `protobuf:"zigzag64,4,opt,name=l" json:"l,omitempty"`
	M      *uint32             `protobuf:"varint,5,opt,name=m" json:"m,omitempty"`
	N      *uint64             `protobuf:"varint,6,opt,name=n" json:"n,omitempty"`
	O      *uint32             `protobuf:"fixed32,7,opt,name=o" json:"o,omitempty"`
	P      *uint64             `protobuf:"fixed64,8,opt,name=p" json:"p,omitempty"`
	Q      *int32              `protobuf:"fixed32,9,opt,name=q" json:"q,omitempty"`
	R      *int64              `protobuf:"fixed64,10,opt,name=r" json:"r,omitempty"`
	S      *float32            `protobuf:"fixed32,11,opt,name=s" json:"s,omitempty"`
	T      *float64            `protobuf:"fixed64,12,opt,name=t" json:"t,omitempty"`
	U      []byte              `protobuf:"bytes,13,opt,name=u" json:"u,omitempty"`
	V      *string             `protobuf:"bytes,14,opt,name=v" json:"v,omitempty"`
	W      *bool               `protobuf:"varint,15,opt,name=w" json:"w,omitempty"`
	X      *RepeatedFields     `protobuf:"bytes,16,opt,name=x" json:"x,omitempty"`
	Groupy *UnaryFields_GroupY `protobuf:"group,17,opt,name=GroupY,json=groupy" json:"groupy,omitempty"`
	Z      *TestEnum           `protobuf:"varint,18,opt,name=z,enum=testprotos.TestEnum" json:"z,omitempty"`
}

func (x *UnaryFields) Reset() {
	*x = UnaryFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test_field_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryFields) ProtoMessage() {}

func (x *UnaryFields) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test_field_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryFields.ProtoReflect.Descriptor instead.
func (*UnaryFields) Descriptor() ([]byte, []int) {
	return file_desc_test_field_types_proto_rawDescGZIP(), []int{0}
}

func (x *UnaryFields) GetI() int32 {
	if x != nil && x.I != nil {
		return *x.I
	}
	return 0
}

func (x *UnaryFields) GetJ() int64 {
	if x != nil && x.J != nil {
		return *x.J
	}
	return 0
}

func (x *UnaryFields) GetK() int32 {
	if x != nil && x.K != nil {
		return *x.K
	}
	return 0
}

func (x *UnaryFields) GetL() int64 {
	if x != nil && x.L != nil {
		return *x.L
	}
	return 0
}

func (x *UnaryFields) GetM() uint32 {
	if x != nil && x.M != nil {
		return *x.M
	}
	return 0
}

func (x *UnaryFields) GetN() uint64 {
	if x != nil && x.N != nil {
		return *x.N
	}
	return 0
}

func (x *UnaryFields) GetO() uint32 {
	if x != nil && x.O != nil {
		return *x.O
	}
	return 0
}

func (x *UnaryFields) GetP() uint64 {
	if x != nil && x.P != nil {
		return *x.P
	}
	return 0
}

func (x *UnaryFields) GetQ() int32 {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return 0
}

func (x *UnaryFields) GetR() int64 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *UnaryFields) GetS() float32 {
	if x != nil && x.S != nil {
		return *x.S
	}
	return 0
}

func (x *UnaryFields) GetT() float64 {
	if x != nil && x.T != nil {
		return *x.T
	}
	return 0
}

func (x *UnaryFields) GetU() []byte {
	if x != nil {
		return x.U
	}
	return nil
}

func (x *UnaryFields) GetV() string {
	if x != nil && x.V != nil {
		return *x.V
	}
	return ""
}

func (x *UnaryFields) GetW() bool {
	if x != nil && x.W != nil {
		return *x.W
	}
	return false
}

func (x *UnaryFields) GetX() *RepeatedFields {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *UnaryFields) GetGroupy() *UnaryFields_GroupY {
	if x != nil {
		return x.Groupy
	}
	return nil
}

func (x *UnaryFields) GetZ() TestEnum {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return TestEnum_INVALID
}

type RepeatedFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I      []int32                  `protobuf:"varint,1,rep,name=i" json:"i,omitempty"`
	J      []int64                  `protobuf:"varint,2,rep,name=j" json:"j,omitempty"`
	K      []int32                  `protobuf:"zigzag32,3,rep,name=k" json:"k,omitempty"`
	L      []int64                  `protobuf:"zigzag64,4,rep,name=l" json:"l,omitempty"`
	M      []uint32                 `protobuf:"varint,5,rep,name=m" json:"m,omitempty"`
	N      []uint64                 `protobuf:"varint,6,rep,name=n" json:"n,omitempty"`
	O      []uint32                 `protobuf:"fixed32,7,rep,name=o" json:"o,omitempty"`
	P      []uint64                 `protobuf:"fixed64,8,rep,name=p" json:"p,omitempty"`
	Q      []int32                  `protobuf:"fixed32,9,rep,name=q" json:"q,omitempty"`
	R      []int64                  `protobuf:"fixed64,10,rep,name=r" json:"r,omitempty"`
	S      []float32                `protobuf:"fixed32,11,rep,name=s" json:"s,omitempty"`
	T      []float64                `protobuf:"fixed64,12,rep,name=t" json:"t,omitempty"`
	U      [][]byte                 `protobuf:"bytes,13,rep,name=u" json:"u,omitempty"`
	V      []string                 `protobuf:"bytes,14,rep,name=v" json:"v,omitempty"`
	W      []bool                   `protobuf:"varint,15,rep,name=w" json:"w,omitempty"`
	X      []*UnaryFields           `protobuf:"bytes,16,rep,name=x" json:"x,omitempty"`
	Groupy []*RepeatedFields_GroupY `protobuf:"group,17,rep,name=GroupY,json=groupy" json:"groupy,omitempty"`
	Z      []TestEnum               `protobuf:"varint,18,rep,name=z,enum=testprotos.TestEnum" json:"z,omitempty"`
}

func (x *RepeatedFields) Reset() {
	*x = RepeatedFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test_field_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedFields) ProtoMessage() {}

func (x *RepeatedFields) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test_field_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedFields.ProtoReflect.Descriptor instead.
func (*RepeatedFields) Descriptor() ([]byte, []int) {
	return file_desc_test_field_types_proto_rawDescGZIP(), []int{1}
}

func (x *RepeatedFields) GetI() []int32 {
	if x != nil {
		return x.I
	}
	return nil
}

func (x *RepeatedFields) GetJ() []int64 {
	if x != nil {
		return x.J
	}
	return nil
}

func (x *RepeatedFields) GetK() []int32 {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *RepeatedFields) GetL() []int64 {
	if x != nil {
		return x.L
	}
	return nil
}

func (x *RepeatedFields) GetM() []uint32 {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *RepeatedFields) GetN() []uint64 {
	if x != nil {
		return x.N
	}
	return nil
}

func (x *RepeatedFields) GetO() []uint32 {
	if x != nil {
		return x.O
	}
	return nil
}

func (x *RepeatedFields) GetP() []uint64 {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *RepeatedFields) GetQ() []int32 {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *RepeatedFields) GetR() []int64 {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *RepeatedFields) GetS() []float32 {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *RepeatedFields) GetT() []float64 {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *RepeatedFields) GetU() [][]byte {
	if x != nil {
		return x.U
	}
	return nil
}

func (x *RepeatedFields) GetV() []string {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *RepeatedFields) GetW() []bool {
	if x != nil {
		return x.W
	}
	return nil
}

func (x *RepeatedFields) GetX() []*UnaryFields {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *RepeatedFields) GetGroupy() []*RepeatedFields_GroupY {
	if x != nil {
		return x.Groupy
	}
	return nil
}

func (x *RepeatedFields) GetZ() []TestEnum {
	if x != nil {
		return x.Z
	}
	return nil
}

type RepeatedPackedFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I      []int32                        `protobuf:"varint,1,rep,packed,name=i" json:"i,omitempty"`
	J      []int64                        `protobuf:"varint,2,rep,packed,name=j" json:"j,omitempty"`
	K      []int32                        `protobuf:"zigzag32,3,rep,packed,name=k" json:"k,omitempty"`
	L      []int64                        `protobuf:"zigzag64,4,rep,packed,name=l" json:"l,omitempty"`
	M      []uint32                       `protobuf:"varint,5,rep,packed,name=m" json:"m,omitempty"`
	N      []uint64                       `protobuf:"varint,6,rep,packed,name=n" json:"n,omitempty"`
	O      []uint32                       `protobuf:"fixed32,7,rep,packed,name=o" json:"o,omitempty"`
	P      []uint64                       `protobuf:"fixed64,8,rep,packed,name=p" json:"p,omitempty"`
	Q      []int32                        `protobuf:"fixed32,9,rep,packed,name=q" json:"q,omitempty"`
	R      []int64                        `protobuf:"fixed64,10,rep,packed,name=r" json:"r,omitempty"`
	S      []float32                      `protobuf:"fixed32,11,rep,packed,name=s" json:"s,omitempty"`
	T      []float64                      `protobuf:"fixed64,12,rep,packed,name=t" json:"t,omitempty"`
	U      []bool                         `protobuf:"varint,13,rep,packed,name=u" json:"u,omitempty"`
	Groupy []*RepeatedPackedFields_GroupY `protobuf:"group,14,rep,name=GroupY,json=groupy" json:"groupy,omitempty"`
	V      []TestEnum                     `protobuf:"varint,15,rep,packed,name=v,enum=testprotos.TestEnum" json:"v,omitempty"`
}

func (x *RepeatedPackedFields) Reset() {
	*x = RepeatedPackedFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test_field_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedPackedFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedPackedFields) ProtoMessage() {}

func (x *RepeatedPackedFields) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test_field_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedPackedFields.ProtoReflect.Descriptor instead.
func (*RepeatedPackedFields) Descriptor() ([]byte, []int) {
	return file_desc_test_field_types_proto_rawDescGZIP(), []int{2}
}

func (x *RepeatedPackedFields) GetI() []int32 {
	if x != nil {
		return x.I
	}
	return nil
}

func (x *RepeatedPackedFields) GetJ() []int64 {
	if x != nil {
		return x.J
	}
	return nil
}

func (x *RepeatedPackedFields) GetK() []int32 {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *RepeatedPackedFields) GetL() []int64 {
	if x != nil {
		return x.L
	}
	return nil
}

func (x *RepeatedPackedFields) GetM() []uint32 {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *RepeatedPackedFields) GetN() []uint64 {
	if x != nil {
		return x.N
	}
	return nil
}

func (x *RepeatedPackedFields) GetO() []uint32 {
	if x != nil {
		return x.O
	}
	return nil
}

func (x *RepeatedPackedFields) GetP() []uint64 {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *RepeatedPackedFields) GetQ() []int32 {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *RepeatedPackedFields) GetR() []int64 {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *RepeatedPackedFields) GetS() []float32 {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *RepeatedPackedFields) GetT() []float64 {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *RepeatedPackedFields) GetU() []bool {
	if x != nil {
		return x.U
	}
	return nil
}

func (x *RepeatedPackedFields) GetGroupy() []*RepeatedPackedFields_GroupY {
	if x != nil {
		return x.Groupy
	}
	return nil
}

func (x *RepeatedPackedFields) GetV() []TestEnum {
	if x != nil {
		return x.V
	}
	return nil
}

type MapKeyFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I map[int32]string  `protobuf:"bytes,1,rep,name=i" json:"i,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	J map[int64]string  `protobuf:"bytes,2,rep,name=j" json:"j,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	K map[int32]string  `protobuf:"bytes,3,rep,name=k" json:"k,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	L map[int64]string  `protobuf:"bytes,4,rep,name=l" json:"l,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M map[uint32]string `protobuf:"bytes,5,rep,name=m" json:"m,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	N map[uint64]string `protobuf:"bytes,6,rep,name=n" json:"n,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	O map[uint32]string `protobuf:"bytes,7,rep,name=o" json:"o,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	P map[uint64]string `protobuf:"bytes,8,rep,name=p" json:"p,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Q map[int32]string  `protobuf:"bytes,9,rep,name=q" json:"q,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	R map[int64]string  `protobuf:"bytes,10,rep,name=r" json:"r,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	S map[string]string `protobuf:"bytes,11,rep,name=s" json:"s,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	T map[bool]string   `protobuf:"bytes,12,rep,name=t" json:"t,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *MapKeyFields) Reset() {
	*x = MapKeyFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test_field_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapKeyFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapKeyFields) ProtoMessage() {}

func (x *MapKeyFields) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test_field_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapKeyFields.ProtoReflect.Descriptor instead.
func (*MapKeyFields) Descriptor() ([]byte, []int) {
	return file_desc_test_field_types_proto_rawDescGZIP(), []int{3}
}

func (x *MapKeyFields) GetI() map[int32]string {
	if x != nil {
		return x.I
	}
	return nil
}

func (x *MapKeyFields) GetJ() map[int64]string {
	if x != nil {
		return x.J
	}
	return nil
}

func (x *MapKeyFields) GetK() map[int32]string {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *MapKeyFields) GetL() map[int64]string {
	if x != nil {
		return x.L
	}
	return nil
}

func (x *MapKeyFields) GetM() map[uint32]string {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *MapKeyFields) GetN() map[uint64]string {
	if x != nil {
		return x.N
	}
	return nil
}

func (x *MapKeyFields) GetO() map[uint32]string {
	if x != nil {
		return x.O
	}
	return nil
}

func (x *MapKeyFields) GetP() map[uint64]string {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *MapKeyFields) GetQ() map[int32]string {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *MapKeyFields) GetR() map[int64]string {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *MapKeyFields) GetS() map[string]string {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *MapKeyFields) GetT() map[bool]string {
	if x != nil {
		return x.T
	}
	return nil
}

type MapValFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I map[string]int32        `protobuf:"bytes,1,rep,name=i" json:"i,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	J map[string]int64        `protobuf:"bytes,2,rep,name=j" json:"j,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	K map[string]int32        `protobuf:"bytes,3,rep,name=k" json:"k,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	L map[string]int64        `protobuf:"bytes,4,rep,name=l" json:"l,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M map[string]uint32       `protobuf:"bytes,5,rep,name=m" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	N map[string]uint64       `protobuf:"bytes,6,rep,name=n" json:"n,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	O map[string]uint32       `protobuf:"bytes,7,rep,name=o" json:"o,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	P map[string]uint64       `protobuf:"bytes,8,rep,name=p" json:"p,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Q map[string]int32        `protobuf:"bytes,9,rep,name=q" json:"q,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	R map[string]int64        `protobuf:"bytes,10,rep,name=r" json:"r,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	S map[string]float32      `protobuf:"bytes,11,rep,name=s" json:"s,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	T map[string]float64      `protobuf:"bytes,12,rep,name=t" json:"t,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	U map[string][]byte       `protobuf:"bytes,13,rep,name=u" json:"u,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	V map[string]string       `protobuf:"bytes,14,rep,name=v" json:"v,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	W map[string]bool         `protobuf:"bytes,15,rep,name=w" json:"w,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	X map[string]*UnaryFields `protobuf:"bytes,16,rep,name=x" json:"x,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Y map[string]TestEnum     `protobuf:"bytes,17,rep,name=y" json:"y,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=testprotos.TestEnum"`
}

func (x *MapValFields) Reset() {
	*x = MapValFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test_field_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapValFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapValFields) ProtoMessage() {}

func (x *MapValFields) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test_field_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapValFields.ProtoReflect.Descriptor instead.
func (*MapValFields) Descriptor() ([]byte, []int) {
	return file_desc_test_field_types_proto_rawDescGZIP(), []int{4}
}

func (x *MapValFields) GetI() map[string]int32 {
	if x != nil {
		return x.I
	}
	return nil
}

func (x *MapValFields) GetJ() map[string]int64 {
	if x != nil {
		return x.J
	}
	return nil
}

func (x *MapValFields) GetK() map[string]int32 {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *MapValFields) GetL() map[string]int64 {
	if x != nil {
		return x.L
	}
	return nil
}

func (x *MapValFields) GetM() map[string]uint32 {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *MapValFields) GetN() map[string]uint64 {
	if x != nil {
		return x.N
	}
	return nil
}

func (x *MapValFields) GetO() map[string]uint32 {
	if x != nil {
		return x.O
	}
	return nil
}

func (x *MapValFields) GetP() map[string]uint64 {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *MapValFields) GetQ() map[string]int32 {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *MapValFields) GetR() map[string]int64 {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *MapValFields) GetS() map[string]float32 {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *MapValFields) GetT() map[string]float64 {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *MapValFields) GetU() map[string][]byte {
	if x != nil {
		return x.U
	}
	return nil
}

func (x *MapValFields) GetV() map[string]string {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *MapValFields) GetW() map[string]bool {
	if x != nil {
		return x.W
	}
	return nil
}

func (x *MapValFields) GetX() map[string]*UnaryFields {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *MapValFields) GetY() map[string]TestEnum {
	if x != nil {
		return x.Y
	}
	return nil
}

type UnaryFields_GroupY struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ya *string `protobuf:"bytes,171,opt,name=ya" json:"ya,omitempty"`
	Yb *int32  `protobuf:"varint,172,opt,name=yb" json:"yb,omitempty"`
}

func (x *UnaryFields_GroupY) Reset() {
	*x = UnaryFields_GroupY{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test_field_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryFields_GroupY) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryFields_GroupY) ProtoMessage() {}

func (x *UnaryFields_GroupY) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test_field_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryFields_GroupY.ProtoReflect.Descriptor instead.
func (*UnaryFields_GroupY) Descriptor() ([]byte, []int) {
	return file_desc_test_field_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *UnaryFields_GroupY) GetYa() string {
	if x != nil && x.Ya != nil {
		return *x.Ya
	}
	return ""
}

func (x *UnaryFields_GroupY) GetYb() int32 {
	if x != nil && x.Yb != nil {
		return *x.Yb
	}
	return 0
}

type RepeatedFields_GroupY struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ya *string `protobuf:"bytes,171,opt,name=ya" json:"ya,omitempty"`
	Yb *int32  `protobuf:"varint,172,opt,name=yb" json:"yb,omitempty"`
}

func (x *RepeatedFields_GroupY) Reset() {
	*x = RepeatedFields_GroupY{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test_field_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedFields_GroupY) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedFields_GroupY) ProtoMessage() {}

func (x *RepeatedFields_GroupY) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test_field_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedFields_GroupY.ProtoReflect.Descriptor instead.
func (*RepeatedFields_GroupY) Descriptor() ([]byte, []int) {
	return file_desc_test_field_types_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RepeatedFields_GroupY) GetYa() string {
	if x != nil && x.Ya != nil {
		return *x.Ya
	}
	return ""
}

func (x *RepeatedFields_GroupY) GetYb() int32 {
	if x != nil && x.Yb != nil {
		return *x.Yb
	}
	return 0
}

type RepeatedPackedFields_GroupY struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yb []int32 `protobuf:"varint,141,rep,packed,name=yb" json:"yb,omitempty"`
}

func (x *RepeatedPackedFields_GroupY) Reset() {
	*x = RepeatedPackedFields_GroupY{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test_field_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedPackedFields_GroupY) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedPackedFields_GroupY) ProtoMessage() {}

func (x *RepeatedPackedFields_GroupY) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test_field_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedPackedFields_GroupY.ProtoReflect.Descriptor instead.
func (*RepeatedPackedFields_GroupY) Descriptor() ([]byte, []int) {
	return file_desc_test_field_types_proto_rawDescGZIP(), []int{2, 0}
}

func (x *RepeatedPackedFields_GroupY) GetYb() []int32 {
	if x != nil {
		return x.Yb
	}
	return nil
}

var File_desc_test_field_types_proto protoreflect.FileDescriptor

var file_desc_test_field_types_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x91, 0x03, 0x0a, 0x0b, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x6a, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x6a, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x01, 0x6b, 0x12, 0x0c, 0x0a, 0x01, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x01,
	0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6d, 0x12,
	0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x6e, 0x12, 0x0c, 0x0a,
	0x01, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x01, 0x6f, 0x12, 0x0c, 0x0a, 0x01, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x01, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x01, 0x71, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01,
	0x74, 0x12, 0x0c, 0x0a, 0x01, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x75, 0x12,
	0x0c, 0x0a, 0x01, 0x76, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a,
	0x01, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x77, 0x12, 0x28, 0x0a, 0x01, 0x78,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x01, 0x78, 0x12, 0x36, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0a, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x59, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x79, 0x12, 0x22, 0x0a,
	0x01, 0x7a, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x01,
	0x7a, 0x1a, 0x2a, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x59, 0x12, 0x0f, 0x0a, 0x02, 0x79,
	0x61, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x79, 0x61, 0x12, 0x0f, 0x0a, 0x02,
	0x79, 0x62, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x79, 0x62, 0x22, 0x94, 0x03,
	0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x01, 0x69, 0x12, 0x0c,
	0x0a, 0x01, 0x6a, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x01, 0x6a, 0x12, 0x0c, 0x0a, 0x01,
	0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x11, 0x52, 0x01, 0x6b, 0x12, 0x0c, 0x0a, 0x01, 0x6c, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x12, 0x52, 0x01, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x01, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x07, 0x52,
	0x01, 0x6f, 0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x06, 0x52, 0x01, 0x70,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x01, 0x71, 0x12, 0x0c,
	0x0a, 0x01, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x10, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x02, 0x52, 0x01, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x74, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x01, 0x52, 0x01, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x75, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x01, 0x75, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x08, 0x52,
	0x01, 0x77, 0x12, 0x25, 0x0a, 0x01, 0x78, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x01, 0x78, 0x12, 0x39, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0a, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x59, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x79, 0x12, 0x22, 0x0a, 0x01, 0x7a, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x01, 0x7a, 0x1a, 0x2a, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x59, 0x12, 0x0f, 0x0a, 0x02, 0x79, 0x61, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x79, 0x61, 0x12, 0x0f, 0x0a, 0x02, 0x79, 0x62, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x79, 0x62, 0x22, 0x88, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x10, 0x0a,
	0x01, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x01, 0x69, 0x12,
	0x10, 0x0a, 0x01, 0x6a, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x01,
	0x6a, 0x12, 0x10, 0x0a, 0x01, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x11, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x01, 0x6b, 0x12, 0x10, 0x0a, 0x01, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x01, 0x6c, 0x12, 0x10, 0x0a, 0x01, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x01, 0x6d, 0x12, 0x10, 0x0a, 0x01, 0x6e, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x01, 0x6e, 0x12, 0x10, 0x0a, 0x01, 0x6f, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01, 0x52, 0x01, 0x6f, 0x12, 0x10, 0x0a, 0x01, 0x70,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x06, 0x42, 0x02, 0x10, 0x01, 0x52, 0x01, 0x70, 0x12, 0x10, 0x0a,
	0x01, 0x71, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0f, 0x42, 0x02, 0x10, 0x01, 0x52, 0x01, 0x71, 0x12,
	0x10, 0x0a, 0x01, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x10, 0x42, 0x02, 0x10, 0x01, 0x52, 0x01,
	0x72, 0x12, 0x10, 0x0a, 0x01, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x01, 0x73, 0x12, 0x10, 0x0a, 0x01, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x01, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x01, 0x74, 0x12, 0x10, 0x0a, 0x01, 0x75, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x08,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x01, 0x75, 0x12, 0x3f, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0a, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x59,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x79, 0x12, 0x26, 0x0a, 0x01, 0x76, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x01, 0x76,
	0x1a, 0x1d, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x59, 0x12, 0x13, 0x0a, 0x02, 0x79, 0x62,
	0x18, 0x8d, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x02, 0x79, 0x62, 0x22,
	0xca, 0x09, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x2d, 0x0a, 0x01, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x49, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x69, 0x12,
	0x2d, 0x0a, 0x01, 0x6a, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x2e, 0x4a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6a, 0x12, 0x2d,
	0x0a, 0x01, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x2e, 0x4b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6b, 0x12, 0x2d, 0x0a,
	0x01, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x2e, 0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6c, 0x12, 0x2d, 0x0a, 0x01,
	0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x2e, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6d, 0x12, 0x2d, 0x0a, 0x01, 0x6e,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x2e, 0x4e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6e, 0x12, 0x2d, 0x0a, 0x01, 0x6f, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e,
	0x4f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6f, 0x12, 0x2d, 0x0a, 0x01, 0x70, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x50,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x70, 0x12, 0x2d, 0x0a, 0x01, 0x71, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x51, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x71, 0x12, 0x2d, 0x0a, 0x01, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x52, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x01, 0x72, 0x12, 0x2d, 0x0a, 0x01, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d,
	0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x53, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x01, 0x73, 0x12, 0x2d, 0x0a, 0x01, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x54, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x01, 0x74, 0x1a, 0x34, 0x0a, 0x06, 0x49, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x4a, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x34, 0x0a, 0x06, 0x4b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06,
	0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x4e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x4f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34,
	0x0a, 0x06, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x51, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x52, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x34, 0x0a, 0x06, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x54, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x0d, 0x0a,
	0x0c, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2d, 0x0a,
	0x01, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x2e, 0x49, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x69, 0x12, 0x2d, 0x0a, 0x01,
	0x6a, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x2e, 0x4a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6a, 0x12, 0x2d, 0x0a, 0x01, 0x6b,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x2e, 0x4b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6b, 0x12, 0x2d, 0x0a, 0x01, 0x6c, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e,
	0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6c, 0x12, 0x2d, 0x0a, 0x01, 0x6d, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x4d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6d, 0x12, 0x2d, 0x0a, 0x01, 0x6e, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x4e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x6e, 0x12, 0x2d, 0x0a, 0x01, 0x6f, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x4f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x01, 0x6f, 0x12, 0x2d, 0x0a, 0x01, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x50, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x01, 0x70, 0x12, 0x2d, 0x0a, 0x01, 0x71, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x51, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x01, 0x71, 0x12, 0x2d, 0x0a, 0x01, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x52, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x01, 0x72, 0x12, 0x2d, 0x0a, 0x01, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x01, 0x73, 0x12, 0x2d, 0x0a, 0x01, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x54, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01,
	0x74, 0x12, 0x2d, 0x0a, 0x01, 0x75, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x55, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x75,
	0x12, 0x2d, 0x0a, 0x01, 0x76, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x56, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x76, 0x12,
	0x2d, 0x0a, 0x01, 0x77, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x2e, 0x57, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x77, 0x12, 0x2d,
	0x0a, 0x01, 0x78, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x2e, 0x58, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x78, 0x12, 0x2d, 0x0a,
	0x01, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x2e, 0x59, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x79, 0x1a, 0x34, 0x0a, 0x06,
	0x49, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x4a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x4b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34,
	0x0a, 0x06, 0x4c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x4e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x34, 0x0a, 0x06, 0x4f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06,
	0x51, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x52, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x53, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34,
	0x0a, 0x06, 0x54, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x55, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x06, 0x56, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x34, 0x0a, 0x06, 0x57, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x06, 0x58, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x06, 0x59, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x2a, 0x39, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x48, 0x49, 0x52, 0x44, 0x10, 0x03, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x66, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73,
}

var (
	file_desc_test_field_types_proto_rawDescOnce sync.Once
	file_desc_test_field_types_proto_rawDescData = file_desc_test_field_types_proto_rawDesc
)

func file_desc_test_field_types_proto_rawDescGZIP() []byte {
	file_desc_test_field_types_proto_rawDescOnce.Do(func() {
		file_desc_test_field_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_desc_test_field_types_proto_rawDescData)
	})
	return file_desc_test_field_types_proto_rawDescData
}

var file_desc_test_field_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_desc_test_field_types_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_desc_test_field_types_proto_goTypes = []interface{}{
	(TestEnum)(0),                       // 0: testprotos.TestEnum
	(*UnaryFields)(nil),                 // 1: testprotos.UnaryFields
	(*RepeatedFields)(nil),              // 2: testprotos.RepeatedFields
	(*RepeatedPackedFields)(nil),        // 3: testprotos.RepeatedPackedFields
	(*MapKeyFields)(nil),                // 4: testprotos.MapKeyFields
	(*MapValFields)(nil),                // 5: testprotos.MapValFields
	(*UnaryFields_GroupY)(nil),          // 6: testprotos.UnaryFields.GroupY
	(*RepeatedFields_GroupY)(nil),       // 7: testprotos.RepeatedFields.GroupY
	(*RepeatedPackedFields_GroupY)(nil), // 8: testprotos.RepeatedPackedFields.GroupY
	nil,                                 // 9: testprotos.MapKeyFields.IEntry
	nil,                                 // 10: testprotos.MapKeyFields.JEntry
	nil,                                 // 11: testprotos.MapKeyFields.KEntry
	nil,                                 // 12: testprotos.MapKeyFields.LEntry
	nil,                                 // 13: testprotos.MapKeyFields.MEntry
	nil,                                 // 14: testprotos.MapKeyFields.NEntry
	nil,                                 // 15: testprotos.MapKeyFields.OEntry
	nil,                                 // 16: testprotos.MapKeyFields.PEntry
	nil,                                 // 17: testprotos.MapKeyFields.QEntry
	nil,                                 // 18: testprotos.MapKeyFields.REntry
	nil,                                 // 19: testprotos.MapKeyFields.SEntry
	nil,                                 // 20: testprotos.MapKeyFields.TEntry
	nil,                                 // 21: testprotos.MapValFields.IEntry
	nil,                                 // 22: testprotos.MapValFields.JEntry
	nil,                                 // 23: testprotos.MapValFields.KEntry
	nil,                                 // 24: testprotos.MapValFields.LEntry
	nil,                                 // 25: testprotos.MapValFields.MEntry
	nil,                                 // 26: testprotos.MapValFields.NEntry
	nil,                                 // 27: testprotos.MapValFields.OEntry
	nil,                                 // 28: testprotos.MapValFields.PEntry
	nil,                                 // 29: testprotos.MapValFields.QEntry
	nil,                                 // 30: testprotos.MapValFields.REntry
	nil,                                 // 31: testprotos.MapValFields.SEntry
	nil,                                 // 32: testprotos.MapValFields.TEntry
	nil,                                 // 33: testprotos.MapValFields.UEntry
	nil,                                 // 34: testprotos.MapValFields.VEntry
	nil,                                 // 35: testprotos.MapValFields.WEntry
	nil,                                 // 36: testprotos.MapValFields.XEntry
	nil,                                 // 37: testprotos.MapValFields.YEntry
}
var file_desc_test_field_types_proto_depIdxs = []int32{
	2,  // 0: testprotos.UnaryFields.x:type_name -> testprotos.RepeatedFields
	6,  // 1: testprotos.UnaryFields.groupy:type_name -> testprotos.UnaryFields.GroupY
	0,  // 2: testprotos.UnaryFields.z:type_name -> testprotos.TestEnum
	1,  // 3: testprotos.RepeatedFields.x:type_name -> testprotos.UnaryFields
	7,  // 4: testprotos.RepeatedFields.groupy:type_name -> testprotos.RepeatedFields.GroupY
	0,  // 5: testprotos.RepeatedFields.z:type_name -> testprotos.TestEnum
	8,  // 6: testprotos.RepeatedPackedFields.groupy:type_name -> testprotos.RepeatedPackedFields.GroupY
	0,  // 7: testprotos.RepeatedPackedFields.v:type_name -> testprotos.TestEnum
	9,  // 8: testprotos.MapKeyFields.i:type_name -> testprotos.MapKeyFields.IEntry
	10, // 9: testprotos.MapKeyFields.j:type_name -> testprotos.MapKeyFields.JEntry
	11, // 10: testprotos.MapKeyFields.k:type_name -> testprotos.MapKeyFields.KEntry
	12, // 11: testprotos.MapKeyFields.l:type_name -> testprotos.MapKeyFields.LEntry
	13, // 12: testprotos.MapKeyFields.m:type_name -> testprotos.MapKeyFields.MEntry
	14, // 13: testprotos.MapKeyFields.n:type_name -> testprotos.MapKeyFields.NEntry
	15, // 14: testprotos.MapKeyFields.o:type_name -> testprotos.MapKeyFields.OEntry
	16, // 15: testprotos.MapKeyFields.p:type_name -> testprotos.MapKeyFields.PEntry
	17, // 16: testprotos.MapKeyFields.q:type_name -> testprotos.MapKeyFields.QEntry
	18, // 17: testprotos.MapKeyFields.r:type_name -> testprotos.MapKeyFields.REntry
	19, // 18: testprotos.MapKeyFields.s:type_name -> testprotos.MapKeyFields.SEntry
	20, // 19: testprotos.MapKeyFields.t:type_name -> testprotos.MapKeyFields.TEntry
	21, // 20: testprotos.MapValFields.i:type_name -> testprotos.MapValFields.IEntry
	22, // 21: testprotos.MapValFields.j:type_name -> testprotos.MapValFields.JEntry
	23, // 22: testprotos.MapValFields.k:type_name -> testprotos.MapValFields.KEntry
	24, // 23: testprotos.MapValFields.l:type_name -> testprotos.MapValFields.LEntry
	25, // 24: testprotos.MapValFields.m:type_name -> testprotos.MapValFields.MEntry
	26, // 25: testprotos.MapValFields.n:type_name -> testprotos.MapValFields.NEntry
	27, // 26: testprotos.MapValFields.o:type_name -> testprotos.MapValFields.OEntry
	28, // 27: testprotos.MapValFields.p:type_name -> testprotos.MapValFields.PEntry
	29, // 28: testprotos.MapValFields.q:type_name -> testprotos.MapValFields.QEntry
	30, // 29: testprotos.MapValFields.r:type_name -> testprotos.MapValFields.REntry
	31, // 30: testprotos.MapValFields.s:type_name -> testprotos.MapValFields.SEntry
	32, // 31: testprotos.MapValFields.t:type_name -> testprotos.MapValFields.TEntry
	33, // 32: testprotos.MapValFields.u:type_name -> testprotos.MapValFields.UEntry
	34, // 33: testprotos.MapValFields.v:type_name -> testprotos.MapValFields.VEntry
	35, // 34: testprotos.MapValFields.w:type_name -> testprotos.MapValFields.WEntry
	36, // 35: testprotos.MapValFields.x:type_name -> testprotos.MapValFields.XEntry
	37, // 36: testprotos.MapValFields.y:type_name -> testprotos.MapValFields.YEntry
	1,  // 37: testprotos.MapValFields.XEntry.value:type_name -> testprotos.UnaryFields
	0,  // 38: testprotos.MapValFields.YEntry.value:type_name -> testprotos.TestEnum
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_desc_test_field_types_proto_init() }
func file_desc_test_field_types_proto_init() {
	if File_desc_test_field_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_desc_test_field_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test_field_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test_field_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedPackedFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test_field_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapKeyFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test_field_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapValFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test_field_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryFields_GroupY); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test_field_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedFields_GroupY); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test_field_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedPackedFields_GroupY); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_desc_test_field_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_desc_test_field_types_proto_goTypes,
		DependencyIndexes: file_desc_test_field_types_proto_depIdxs,
		EnumInfos:         file_desc_test_field_types_proto_enumTypes,
		MessageInfos:      file_desc_test_field_types_proto_msgTypes,
	}.Build()
	File_desc_test_field_types_proto = out.File
	file_desc_test_field_types_proto_rawDesc = nil
	file_desc_test_field_types_proto_goTypes = nil
	file_desc_test_field_types_proto_depIdxs = nil
}
